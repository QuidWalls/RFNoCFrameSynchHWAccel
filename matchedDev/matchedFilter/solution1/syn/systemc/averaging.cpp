// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "averaging.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic averaging::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic averaging::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> averaging::ap_ST_fsm_state1 = "1";
const sc_lv<16> averaging::ap_ST_fsm_state2 = "10";
const sc_lv<16> averaging::ap_ST_fsm_state3 = "100";
const sc_lv<16> averaging::ap_ST_fsm_state4 = "1000";
const sc_lv<16> averaging::ap_ST_fsm_state5 = "10000";
const sc_lv<16> averaging::ap_ST_fsm_state6 = "100000";
const sc_lv<16> averaging::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> averaging::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> averaging::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> averaging::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> averaging::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> averaging::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> averaging::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> averaging::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> averaging::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> averaging::ap_ST_fsm_state16 = "1000000000000000";
const bool averaging::ap_const_boolean_1 = true;
const sc_lv<1> averaging::ap_const_lv1_0 = "0";
const sc_lv<1> averaging::ap_const_lv1_1 = "1";
const sc_lv<2> averaging::ap_const_lv2_0 = "00";
const sc_lv<2> averaging::ap_const_lv2_2 = "10";
const sc_lv<2> averaging::ap_const_lv2_3 = "11";
const sc_lv<2> averaging::ap_const_lv2_1 = "1";
const sc_lv<16> averaging::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> averaging::ap_const_lv32_F = "1111";
const sc_lv<32> averaging::ap_const_lv32_1 = "1";
const sc_lv<32> averaging::ap_const_lv32_2 = "10";
const bool averaging::ap_const_boolean_0 = false;
const sc_lv<32> averaging::ap_const_lv32_8 = "1000";
const sc_lv<32> averaging::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> averaging::ap_const_lv32_3 = "11";
const sc_lv<32> averaging::ap_const_lv32_4 = "100";
const sc_lv<32> averaging::ap_const_lv32_5 = "101";
const sc_lv<32> averaging::ap_const_lv32_6 = "110";
const sc_lv<32> averaging::ap_const_lv32_7 = "111";
const sc_lv<32> averaging::ap_const_lv32_E = "1110";
const sc_lv<4> averaging::ap_const_lv4_B = "1011";
const sc_lv<4> averaging::ap_const_lv4_E = "1110";
const sc_lv<4> averaging::ap_const_lv4_D = "1101";
const sc_lv<4> averaging::ap_const_lv4_C = "1100";
const sc_lv<4> averaging::ap_const_lv4_A = "1010";
const sc_lv<4> averaging::ap_const_lv4_9 = "1001";
const sc_lv<4> averaging::ap_const_lv4_8 = "1000";
const sc_lv<4> averaging::ap_const_lv4_7 = "111";
const sc_lv<4> averaging::ap_const_lv4_6 = "110";
const sc_lv<4> averaging::ap_const_lv4_5 = "101";
const sc_lv<4> averaging::ap_const_lv4_4 = "100";
const sc_lv<4> averaging::ap_const_lv4_3 = "11";
const sc_lv<4> averaging::ap_const_lv4_2 = "10";
const sc_lv<4> averaging::ap_const_lv4_1 = "1";
const sc_lv<4> averaging::ap_const_lv4_0 = "0000";
const sc_lv<4> averaging::ap_const_lv4_F = "1111";
const sc_lv<32> averaging::ap_const_lv32_9 = "1001";
const sc_lv<32> averaging::ap_const_lv32_A = "1010";
const sc_lv<32> averaging::ap_const_lv32_B = "1011";
const sc_lv<32> averaging::ap_const_lv32_C = "1100";
const sc_lv<32> averaging::ap_const_lv32_D = "1101";
const sc_lv<32> averaging::ap_const_lv32_17 = "10111";
const sc_lv<24> averaging::ap_const_lv24_1 = "1";
const sc_lv<32> averaging::ap_const_lv32_10 = "10000";
const sc_lv<32> averaging::ap_const_lv32_1F = "11111";

averaging::averaging(sc_module_name name) : sc_module(name), mVcdFile(0) {
    data_reg_q_V_U = new averaging_data_rebkb("data_reg_q_V_U");
    data_reg_q_V_U->clk(ap_clk);
    data_reg_q_V_U->reset(ap_rst_n_inv);
    data_reg_q_V_U->address0(data_reg_q_V_address0);
    data_reg_q_V_U->ce0(data_reg_q_V_ce0);
    data_reg_q_V_U->we0(data_reg_q_V_we0);
    data_reg_q_V_U->d0(data_reg_q_V_d0);
    data_reg_q_V_U->q0(data_reg_q_V_q0);
    data_reg_q_V_U->address1(data_reg_q_V_address1);
    data_reg_q_V_U->ce1(data_reg_q_V_ce1);
    data_reg_q_V_U->we1(data_reg_q_V_we1);
    data_reg_q_V_U->d1(data_reg_q_V_d1);
    data_reg_q_V_U->q1(data_reg_q_V_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state16);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_predicate_op141_read_state16 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( currentwrState_load_reg_496 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( currentwrState_load_reg_496 );

    SC_METHOD(thread_ap_condition_228);
    sensitive << ( currentState_load_reg_524 );
    sensitive << ( tmp_reg_532 );
    sensitive << ( firstLoad_V_load_reg_528 );

    SC_METHOD(thread_ap_phi_mux_data_valid_reg_V_new_1_phi_fu_205_p6);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( currentState_load_reg_524 );
    sensitive << ( tmp_reg_532 );
    sensitive << ( data_valid_reg_V_new_1_reg_202 );
    sensitive << ( p_Result_1_fu_472_p3 );

    SC_METHOD(thread_ap_predicate_op141_read_state16);
    sensitive << ( currentState_load_reg_524 );
    sensitive << ( tmp_reg_532 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_currentState_load_load_fu_269_p1);
    sensitive << ( currentState );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_currentwrState_load_load_fu_227_p1);
    sensitive << ( currentwrState );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_data_reg_q_V_address0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_data_reg_q_V_address1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_data_reg_q_V_ce0);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_predicate_op141_read_state16 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_data_reg_q_V_ce1);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_predicate_op141_read_state16 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_data_reg_q_V_d0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( reg_213 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_220 );
    sensitive << ( data_reg_q_V_load_3_reg_541 );
    sensitive << ( data_reg_q_V_load_5_reg_551 );
    sensitive << ( data_reg_q_V_load_7_reg_561 );
    sensitive << ( data_reg_q_V_load_9_reg_571 );
    sensitive << ( data_reg_q_V_load_11_reg_581 );
    sensitive << ( data_reg_q_V_load_13_reg_591 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_data_reg_q_V_d1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( reg_213 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_220 );
    sensitive << ( data_reg_q_V_load_4_reg_546 );
    sensitive << ( data_reg_q_V_load_6_reg_556 );
    sensitive << ( data_reg_q_V_load_8_reg_566 );
    sensitive << ( data_reg_q_V_load_10_reg_576 );
    sensitive << ( data_reg_q_V_load_12_reg_586 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_4_fu_451_p1 );

    SC_METHOD(thread_data_reg_q_V_we0);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( currentState_load_reg_524 );
    sensitive << ( tmp_reg_532 );
    sensitive << ( firstLoad_V_load_reg_528 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_predicate_op141_read_state16 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_data_reg_q_V_we1);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( currentState_load_reg_524 );
    sensitive << ( tmp_reg_532 );
    sensitive << ( firstLoad_V_load_reg_528 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_predicate_op141_read_state16 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_i_data_TDATA_blk_n);
    sensitive << ( i_data_TVALID );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( currentState_load_reg_524 );
    sensitive << ( tmp_reg_532 );

    SC_METHOD(thread_i_data_TREADY);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_predicate_op141_read_state16 );

    SC_METHOD(thread_o_data_TDATA);
    sensitive << ( o_data_V_data_V_1_data_out );

    SC_METHOD(thread_o_data_TDATA_blk_n);
    sensitive << ( o_data_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( currentwrState_load_reg_496 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_o_data_TLAST);
    sensitive << ( o_data_V_last_V_1_data_out );

    SC_METHOD(thread_o_data_TVALID);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_o_data_V_data_V_1_ack_in);
    sensitive << ( o_data_V_data_V_1_state );

    SC_METHOD(thread_o_data_V_data_V_1_ack_out);
    sensitive << ( o_data_TREADY );

    SC_METHOD(thread_o_data_V_data_V_1_data_out);
    sensitive << ( o_data_V_data_V_1_payload_A );
    sensitive << ( o_data_V_data_V_1_payload_B );
    sensitive << ( o_data_V_data_V_1_sel );

    SC_METHOD(thread_o_data_V_data_V_1_load_A);
    sensitive << ( o_data_V_data_V_1_sel_wr );
    sensitive << ( o_data_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_data_V_1_load_B);
    sensitive << ( o_data_V_data_V_1_sel_wr );
    sensitive << ( o_data_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_data_V_1_sel);
    sensitive << ( o_data_V_data_V_1_sel_rd );

    SC_METHOD(thread_o_data_V_data_V_1_state_cmp_full);
    sensitive << ( o_data_V_data_V_1_state );

    SC_METHOD(thread_o_data_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( currentwrState_load_reg_496 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_o_data_V_data_V_1_vld_out);
    sensitive << ( o_data_V_data_V_1_state );

    SC_METHOD(thread_o_data_V_last_V_1_ack_in);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_o_data_V_last_V_1_ack_out);
    sensitive << ( o_data_TREADY );

    SC_METHOD(thread_o_data_V_last_V_1_data_out);
    sensitive << ( o_data_V_last_V_1_sel );

    SC_METHOD(thread_o_data_V_last_V_1_sel);
    sensitive << ( o_data_V_last_V_1_sel_rd );

    SC_METHOD(thread_o_data_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( currentwrState_load_reg_496 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_o_data_V_last_V_1_vld_out);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_p_Result_1_fu_472_p3);
    sensitive << ( tmp_2_reg_514 );

    SC_METHOD(thread_p_Result_3_fu_277_p3);
    sensitive << ( data_reg_q_V_q0 );
    sensitive << ( data_reg_i_V_11_load_reg_505 );

    SC_METHOD(thread_p_Result_4_fu_257_p5);
    sensitive << ( data_valid_reg_V );
    sensitive << ( tmp_2_fu_253_p1 );

    SC_METHOD(thread_p_Result_s_fu_332_p2);
    sensitive << ( p_Val2_s_reg_500 );

    SC_METHOD(thread_tmp_1_fu_239_p3);
    sensitive << ( data_valid_reg_V );

    SC_METHOD(thread_tmp_2_fu_253_p1);
    sensitive << ( data_valid_reg_V );

    SC_METHOD(thread_tmp_4_fu_451_p1);
    sensitive << ( i_data_TDATA );

    SC_METHOD(thread_tmp_nbreadreq_fu_150_p4);
    sensitive << ( i_data_TVALID );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op141_read_state16 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    o_data_V_data_V_1_sel_rd = SC_LOGIC_0;
    o_data_V_data_V_1_sel_wr = SC_LOGIC_0;
    o_data_V_data_V_1_state = "00";
    o_data_V_last_V_1_sel_rd = SC_LOGIC_0;
    o_data_V_last_V_1_state = "00";
    currentwrState = "0";
    data_valid_reg_V = "000000000000000000000000";
    data_reg_i_V_11 = "0000000000000000";
    currentState = "0";
    firstLoad_V = "0";
    data_reg_i_V_10 = "0000000000000000";
    data_reg_i_V_9 = "0000000000000000";
    data_reg_i_V_8 = "0000000000000000";
    data_reg_i_V_7 = "0000000000000000";
    data_reg_i_V_6 = "0000000000000000";
    data_reg_i_V_5 = "0000000000000000";
    data_reg_i_V_4 = "0000000000000000";
    data_reg_i_V_3 = "0000000000000000";
    data_reg_i_V_2 = "0000000000000000";
    data_reg_i_V_1 = "0000000000000000";
    data_reg_i_V_0 = "0000000000000000";
    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "averaging_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, i_data_TDATA, "(port)i_data_TDATA");
    sc_trace(mVcdFile, i_data_TVALID, "(port)i_data_TVALID");
    sc_trace(mVcdFile, i_data_TREADY, "(port)i_data_TREADY");
    sc_trace(mVcdFile, i_data_TLAST, "(port)i_data_TLAST");
    sc_trace(mVcdFile, o_data_TDATA, "(port)o_data_TDATA");
    sc_trace(mVcdFile, o_data_TVALID, "(port)o_data_TVALID");
    sc_trace(mVcdFile, o_data_TREADY, "(port)o_data_TREADY");
    sc_trace(mVcdFile, o_data_TLAST, "(port)o_data_TLAST");
    sc_trace(mVcdFile, start_V, "(port)start_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, o_data_V_data_V_1_data_out, "o_data_V_data_V_1_data_out");
    sc_trace(mVcdFile, o_data_V_data_V_1_vld_in, "o_data_V_data_V_1_vld_in");
    sc_trace(mVcdFile, o_data_V_data_V_1_vld_out, "o_data_V_data_V_1_vld_out");
    sc_trace(mVcdFile, o_data_V_data_V_1_ack_in, "o_data_V_data_V_1_ack_in");
    sc_trace(mVcdFile, o_data_V_data_V_1_ack_out, "o_data_V_data_V_1_ack_out");
    sc_trace(mVcdFile, o_data_V_data_V_1_payload_A, "o_data_V_data_V_1_payload_A");
    sc_trace(mVcdFile, o_data_V_data_V_1_payload_B, "o_data_V_data_V_1_payload_B");
    sc_trace(mVcdFile, o_data_V_data_V_1_sel_rd, "o_data_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, o_data_V_data_V_1_sel_wr, "o_data_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, o_data_V_data_V_1_sel, "o_data_V_data_V_1_sel");
    sc_trace(mVcdFile, o_data_V_data_V_1_load_A, "o_data_V_data_V_1_load_A");
    sc_trace(mVcdFile, o_data_V_data_V_1_load_B, "o_data_V_data_V_1_load_B");
    sc_trace(mVcdFile, o_data_V_data_V_1_state, "o_data_V_data_V_1_state");
    sc_trace(mVcdFile, o_data_V_data_V_1_state_cmp_full, "o_data_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, o_data_V_last_V_1_data_out, "o_data_V_last_V_1_data_out");
    sc_trace(mVcdFile, o_data_V_last_V_1_vld_in, "o_data_V_last_V_1_vld_in");
    sc_trace(mVcdFile, o_data_V_last_V_1_vld_out, "o_data_V_last_V_1_vld_out");
    sc_trace(mVcdFile, o_data_V_last_V_1_ack_in, "o_data_V_last_V_1_ack_in");
    sc_trace(mVcdFile, o_data_V_last_V_1_ack_out, "o_data_V_last_V_1_ack_out");
    sc_trace(mVcdFile, o_data_V_last_V_1_sel_rd, "o_data_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, o_data_V_last_V_1_sel, "o_data_V_last_V_1_sel");
    sc_trace(mVcdFile, o_data_V_last_V_1_state, "o_data_V_last_V_1_state");
    sc_trace(mVcdFile, currentwrState, "currentwrState");
    sc_trace(mVcdFile, data_valid_reg_V, "data_valid_reg_V");
    sc_trace(mVcdFile, data_reg_i_V_11, "data_reg_i_V_11");
    sc_trace(mVcdFile, currentState, "currentState");
    sc_trace(mVcdFile, firstLoad_V, "firstLoad_V");
    sc_trace(mVcdFile, data_reg_i_V_10, "data_reg_i_V_10");
    sc_trace(mVcdFile, data_reg_i_V_9, "data_reg_i_V_9");
    sc_trace(mVcdFile, data_reg_i_V_8, "data_reg_i_V_8");
    sc_trace(mVcdFile, data_reg_i_V_7, "data_reg_i_V_7");
    sc_trace(mVcdFile, data_reg_i_V_6, "data_reg_i_V_6");
    sc_trace(mVcdFile, data_reg_i_V_5, "data_reg_i_V_5");
    sc_trace(mVcdFile, data_reg_i_V_4, "data_reg_i_V_4");
    sc_trace(mVcdFile, data_reg_i_V_3, "data_reg_i_V_3");
    sc_trace(mVcdFile, data_reg_i_V_2, "data_reg_i_V_2");
    sc_trace(mVcdFile, data_reg_i_V_1, "data_reg_i_V_1");
    sc_trace(mVcdFile, data_reg_i_V_0, "data_reg_i_V_0");
    sc_trace(mVcdFile, data_reg_q_V_address0, "data_reg_q_V_address0");
    sc_trace(mVcdFile, data_reg_q_V_ce0, "data_reg_q_V_ce0");
    sc_trace(mVcdFile, data_reg_q_V_we0, "data_reg_q_V_we0");
    sc_trace(mVcdFile, data_reg_q_V_d0, "data_reg_q_V_d0");
    sc_trace(mVcdFile, data_reg_q_V_q0, "data_reg_q_V_q0");
    sc_trace(mVcdFile, data_reg_q_V_address1, "data_reg_q_V_address1");
    sc_trace(mVcdFile, data_reg_q_V_ce1, "data_reg_q_V_ce1");
    sc_trace(mVcdFile, data_reg_q_V_we1, "data_reg_q_V_we1");
    sc_trace(mVcdFile, data_reg_q_V_d1, "data_reg_q_V_d1");
    sc_trace(mVcdFile, data_reg_q_V_q1, "data_reg_q_V_q1");
    sc_trace(mVcdFile, i_data_TDATA_blk_n, "i_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, currentState_load_reg_524, "currentState_load_reg_524");
    sc_trace(mVcdFile, tmp_reg_532, "tmp_reg_532");
    sc_trace(mVcdFile, o_data_TDATA_blk_n, "o_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, currentwrState_load_reg_496, "currentwrState_load_reg_496");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, reg_213, "reg_213");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, firstLoad_V_load_reg_528, "firstLoad_V_load_reg_528");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, reg_220, "reg_220");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, start_V_read_reg_492, "start_V_read_reg_492");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, currentwrState_load_load_fu_227_p1, "currentwrState_load_load_fu_227_p1");
    sc_trace(mVcdFile, p_Val2_s_reg_500, "p_Val2_s_reg_500");
    sc_trace(mVcdFile, data_reg_i_V_11_load_reg_505, "data_reg_i_V_11_load_reg_505");
    sc_trace(mVcdFile, tmp_2_fu_253_p1, "tmp_2_fu_253_p1");
    sc_trace(mVcdFile, tmp_2_reg_514, "tmp_2_reg_514");
    sc_trace(mVcdFile, p_Result_4_fu_257_p5, "p_Result_4_fu_257_p5");
    sc_trace(mVcdFile, p_Result_4_reg_519, "p_Result_4_reg_519");
    sc_trace(mVcdFile, currentState_load_load_fu_269_p1, "currentState_load_load_fu_269_p1");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_150_p4, "tmp_nbreadreq_fu_150_p4");
    sc_trace(mVcdFile, p_Result_3_fu_277_p3, "p_Result_3_fu_277_p3");
    sc_trace(mVcdFile, data_reg_q_V_load_3_reg_541, "data_reg_q_V_load_3_reg_541");
    sc_trace(mVcdFile, data_reg_q_V_load_4_reg_546, "data_reg_q_V_load_4_reg_546");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, data_reg_q_V_load_5_reg_551, "data_reg_q_V_load_5_reg_551");
    sc_trace(mVcdFile, data_reg_q_V_load_6_reg_556, "data_reg_q_V_load_6_reg_556");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, data_reg_q_V_load_7_reg_561, "data_reg_q_V_load_7_reg_561");
    sc_trace(mVcdFile, data_reg_q_V_load_8_reg_566, "data_reg_q_V_load_8_reg_566");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, data_reg_q_V_load_9_reg_571, "data_reg_q_V_load_9_reg_571");
    sc_trace(mVcdFile, data_reg_q_V_load_10_reg_576, "data_reg_q_V_load_10_reg_576");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, data_reg_q_V_load_11_reg_581, "data_reg_q_V_load_11_reg_581");
    sc_trace(mVcdFile, data_reg_q_V_load_12_reg_586, "data_reg_q_V_load_12_reg_586");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, data_reg_q_V_load_13_reg_591, "data_reg_q_V_load_13_reg_591");
    sc_trace(mVcdFile, p_Result_s_fu_332_p2, "p_Result_s_fu_332_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_phi_mux_data_valid_reg_V_new_1_phi_fu_205_p6, "ap_phi_mux_data_valid_reg_V_new_1_phi_fu_205_p6");
    sc_trace(mVcdFile, data_valid_reg_V_new_1_reg_202, "data_valid_reg_V_new_1_reg_202");
    sc_trace(mVcdFile, p_Result_1_fu_472_p3, "p_Result_1_fu_472_p3");
    sc_trace(mVcdFile, ap_predicate_op141_read_state16, "ap_predicate_op141_read_state16");
    sc_trace(mVcdFile, ap_block_state16, "ap_block_state16");
    sc_trace(mVcdFile, tmp_1_fu_239_p3, "tmp_1_fu_239_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, tmp_4_fu_451_p1, "tmp_4_fu_451_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_228, "ap_condition_228");
#endif

    }
    mHdltvinHandle.open("averaging.hdltvin.dat");
    mHdltvoutHandle.open("averaging.hdltvout.dat");
}

averaging::~averaging() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete data_reg_q_V_U;
}

void averaging::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        currentState = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, start_V_read_reg_492.read()))) {
            currentState = ap_const_lv1_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        currentwrState = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, currentwrState_load_load_fu_227_p1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_239_p3.read()))) {
            currentwrState = ap_const_lv1_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_0 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_0 = i_data_TDATA.read().range(31, 16);
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_1 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_1 = data_reg_i_V_0.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_10 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_10 = data_reg_i_V_9.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_11 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_11 = data_reg_i_V_10.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_2 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_2 = data_reg_i_V_1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_3 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_3 = data_reg_i_V_2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_4 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_4 = data_reg_i_V_3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_5 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_5 = data_reg_i_V_4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_6 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_6 = data_reg_i_V_5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_7 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_7 = data_reg_i_V_6.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_8 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_8 = data_reg_i_V_7.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        data_reg_i_V_9 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            data_reg_i_V_9 = data_reg_i_V_8.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_532.read()))) {
        data_valid_reg_V_new_1_reg_202 = p_Result_s_fu_332_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
        data_valid_reg_V_new_1_reg_202 = p_Result_1_fu_472_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, currentState_load_reg_524.read()))) {
        data_valid_reg_V_new_1_reg_202 = p_Result_4_reg_519.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        firstLoad_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
            firstLoad_V = ap_const_lv1_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, currentState_load_reg_524.read()))) {
            firstLoad_V = ap_const_lv1_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_out.read()))) {
            o_data_V_data_V_1_sel_rd =  (sc_logic) (~o_data_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_in.read()))) {
            o_data_V_data_V_1_sel_wr =  (sc_logic) (~o_data_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            o_data_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            o_data_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()))))) {
            o_data_V_data_V_1_state = ap_const_lv2_3;
        } else {
            o_data_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_out.read()))) {
            o_data_V_last_V_1_sel_rd =  (sc_logic) (~o_data_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, o_data_V_last_V_1_state.read())))) {
            o_data_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_V_last_V_1_state.read())))) {
            o_data_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, o_data_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()))))) {
            o_data_V_last_V_1_state = ap_const_lv2_3;
        } else {
            o_data_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_228.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            reg_213 = data_reg_q_V_q0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
            reg_213 = data_reg_q_V_q1.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_228.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            reg_220 = data_reg_q_V_q1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
            reg_220 = data_reg_q_V_q0.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        currentState_load_reg_524 = currentState.read();
        currentwrState_load_reg_496 = currentwrState.read();
        data_reg_i_V_11_load_reg_505 = data_reg_i_V_11.read();
        firstLoad_V_load_reg_528 = firstLoad_V.read();
        p_Result_4_reg_519 = p_Result_4_fu_257_p5.read();
        p_Val2_s_reg_500 = data_valid_reg_V.read();
        start_V_read_reg_492 = start_V.read();
        tmp_2_reg_514 = tmp_2_fu_253_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        data_reg_q_V_load_10_reg_576 = data_reg_q_V_q0.read();
        data_reg_q_V_load_11_reg_581 = data_reg_q_V_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        data_reg_q_V_load_12_reg_586 = data_reg_q_V_q0.read();
        data_reg_q_V_load_13_reg_591 = data_reg_q_V_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        data_reg_q_V_load_3_reg_541 = data_reg_q_V_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        data_reg_q_V_load_4_reg_546 = data_reg_q_V_q0.read();
        data_reg_q_V_load_5_reg_551 = data_reg_q_V_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        data_reg_q_V_load_6_reg_556 = data_reg_q_V_q0.read();
        data_reg_q_V_load_7_reg_561 = data_reg_q_V_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        data_reg_q_V_load_8_reg_566 = data_reg_q_V_q0.read();
        data_reg_q_V_load_9_reg_571 = data_reg_q_V_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
        data_valid_reg_V = ap_phi_mux_data_valid_reg_V_new_1_phi_fu_205_p6.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_load_A.read())) {
        o_data_V_data_V_1_payload_A = p_Result_3_fu_277_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_load_B.read())) {
        o_data_V_data_V_1_payload_B = p_Result_3_fu_277_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_load_fu_269_p1.read()))) {
        tmp_reg_532 = tmp_nbreadreq_fu_150_p4.read();
    }
}

void averaging::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void averaging::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void averaging::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void averaging::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void averaging::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void averaging::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void averaging::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void averaging::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void averaging::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void averaging::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void averaging::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void averaging::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void averaging::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void averaging::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void averaging::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void averaging::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void averaging::thread_ap_block_state16() {
    ap_block_state16 = (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()));
}

void averaging::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_lv1_1, currentwrState_load_reg_496.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()));
}

void averaging::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_1, currentwrState_load_reg_496.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()));
}

void averaging::thread_ap_condition_228() {
    ap_condition_228 = (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()));
}

void averaging::thread_ap_phi_mux_data_valid_reg_V_new_1_phi_fu_205_p6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()))) {
        ap_phi_mux_data_valid_reg_V_new_1_phi_fu_205_p6 = p_Result_1_fu_472_p3.read();
    } else {
        ap_phi_mux_data_valid_reg_V_new_1_phi_fu_205_p6 = data_valid_reg_V_new_1_reg_202.read();
    }
}

void averaging::thread_ap_predicate_op141_read_state16() {
    ap_predicate_op141_read_state16 = (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()));
}

void averaging::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void averaging::thread_currentState_load_load_fu_269_p1() {
    currentState_load_load_fu_269_p1 = currentState.read();
}

void averaging::thread_currentwrState_load_load_fu_227_p1() {
    currentwrState_load_load_fu_227_p1 = currentwrState.read();
}

void averaging::thread_data_reg_q_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        data_reg_q_V_address0 = ap_const_lv4_F;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        data_reg_q_V_address0 = ap_const_lv4_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        data_reg_q_V_address0 = ap_const_lv4_3;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        data_reg_q_V_address0 = ap_const_lv4_5;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        data_reg_q_V_address0 = ap_const_lv4_7;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        data_reg_q_V_address0 = ap_const_lv4_9;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        data_reg_q_V_address0 = ap_const_lv4_D;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        data_reg_q_V_address0 = ap_const_lv4_B;
    } else {
        data_reg_q_V_address0 = "XXXX";
    }
}

void averaging::thread_data_reg_q_V_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        data_reg_q_V_address1 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        data_reg_q_V_address1 = ap_const_lv4_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        data_reg_q_V_address1 = ap_const_lv4_4;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        data_reg_q_V_address1 = ap_const_lv4_6;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        data_reg_q_V_address1 = ap_const_lv4_8;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        data_reg_q_V_address1 = ap_const_lv4_A;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        data_reg_q_V_address1 = ap_const_lv4_C;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        data_reg_q_V_address1 = ap_const_lv4_E;
    } else {
        data_reg_q_V_address1 = "XXXX";
    }
}

void averaging::thread_data_reg_q_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        data_reg_q_V_ce0 = ap_const_logic_1;
    } else {
        data_reg_q_V_ce0 = ap_const_logic_0;
    }
}

void averaging::thread_data_reg_q_V_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        data_reg_q_V_ce1 = ap_const_logic_1;
    } else {
        data_reg_q_V_ce1 = ap_const_logic_0;
    }
}

void averaging::thread_data_reg_q_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        data_reg_q_V_d0 = reg_220.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        data_reg_q_V_d0 = data_reg_q_V_load_13_reg_591.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        data_reg_q_V_d0 = data_reg_q_V_load_11_reg_581.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        data_reg_q_V_d0 = data_reg_q_V_load_9_reg_571.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        data_reg_q_V_d0 = data_reg_q_V_load_7_reg_561.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        data_reg_q_V_d0 = data_reg_q_V_load_5_reg_551.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        data_reg_q_V_d0 = data_reg_q_V_load_3_reg_541.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        data_reg_q_V_d0 = reg_213.read();
    } else {
        data_reg_q_V_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void averaging::thread_data_reg_q_V_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        data_reg_q_V_d1 = tmp_4_fu_451_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        data_reg_q_V_d1 = reg_213.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        data_reg_q_V_d1 = data_reg_q_V_load_12_reg_586.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        data_reg_q_V_d1 = data_reg_q_V_load_10_reg_576.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        data_reg_q_V_d1 = data_reg_q_V_load_8_reg_566.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        data_reg_q_V_d1 = data_reg_q_V_load_6_reg_556.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        data_reg_q_V_d1 = data_reg_q_V_load_4_reg_546.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        data_reg_q_V_d1 = reg_220.read();
    } else {
        data_reg_q_V_d1 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void averaging::thread_data_reg_q_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())))) {
        data_reg_q_V_we0 = ap_const_logic_1;
    } else {
        data_reg_q_V_we0 = ap_const_logic_0;
    }
}

void averaging::thread_data_reg_q_V_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, firstLoad_V_load_reg_528.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())))) {
        data_reg_q_V_we1 = ap_const_logic_1;
    } else {
        data_reg_q_V_we1 = ap_const_logic_0;
    }
}

void averaging::thread_i_data_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_524.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_532.read()))) {
        i_data_TDATA_blk_n = i_data_TVALID.read();
    } else {
        i_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void averaging::thread_i_data_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
        i_data_TREADY = ap_const_logic_1;
    } else {
        i_data_TREADY = ap_const_logic_0;
    }
}

void averaging::thread_o_data_TDATA() {
    o_data_TDATA = o_data_V_data_V_1_data_out.read();
}

void averaging::thread_o_data_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, currentwrState_load_reg_496.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, currentwrState_load_reg_496.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())))) {
        o_data_TDATA_blk_n = o_data_V_data_V_1_state.read()[1];
    } else {
        o_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void averaging::thread_o_data_TLAST() {
    o_data_TLAST = o_data_V_last_V_1_data_out.read();
}

void averaging::thread_o_data_TVALID() {
    o_data_TVALID = o_data_V_last_V_1_state.read()[0];
}

void averaging::thread_o_data_V_data_V_1_ack_in() {
    o_data_V_data_V_1_ack_in = o_data_V_data_V_1_state.read()[1];
}

void averaging::thread_o_data_V_data_V_1_ack_out() {
    o_data_V_data_V_1_ack_out = o_data_TREADY.read();
}

void averaging::thread_o_data_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_sel.read())) {
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_B.read();
    } else {
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_A.read();
    }
}

void averaging::thread_o_data_V_data_V_1_load_A() {
    o_data_V_data_V_1_load_A = (o_data_V_data_V_1_state_cmp_full.read() & ~o_data_V_data_V_1_sel_wr.read());
}

void averaging::thread_o_data_V_data_V_1_load_B() {
    o_data_V_data_V_1_load_B = (o_data_V_data_V_1_sel_wr.read() & o_data_V_data_V_1_state_cmp_full.read());
}

void averaging::thread_o_data_V_data_V_1_sel() {
    o_data_V_data_V_1_sel = o_data_V_data_V_1_sel_rd.read();
}

void averaging::thread_o_data_V_data_V_1_state_cmp_full() {
    o_data_V_data_V_1_state_cmp_full =  (sc_logic) ((!o_data_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(o_data_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void averaging::thread_o_data_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentwrState_load_reg_496.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
        o_data_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        o_data_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void averaging::thread_o_data_V_data_V_1_vld_out() {
    o_data_V_data_V_1_vld_out = o_data_V_data_V_1_state.read()[0];
}

void averaging::thread_o_data_V_last_V_1_ack_in() {
    o_data_V_last_V_1_ack_in = o_data_V_last_V_1_state.read()[1];
}

void averaging::thread_o_data_V_last_V_1_ack_out() {
    o_data_V_last_V_1_ack_out = o_data_TREADY.read();
}

void averaging::thread_o_data_V_last_V_1_data_out() {
    o_data_V_last_V_1_data_out = ap_const_lv1_0;
}

void averaging::thread_o_data_V_last_V_1_sel() {
    o_data_V_last_V_1_sel = o_data_V_last_V_1_sel_rd.read();
}

void averaging::thread_o_data_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentwrState_load_reg_496.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
        o_data_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        o_data_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void averaging::thread_o_data_V_last_V_1_vld_out() {
    o_data_V_last_V_1_vld_out = o_data_V_last_V_1_state.read()[0];
}

void averaging::thread_p_Result_1_fu_472_p3() {
    p_Result_1_fu_472_p3 = esl_concat<23,1>(tmp_2_reg_514.read(), ap_const_lv1_1);
}

void averaging::thread_p_Result_3_fu_277_p3() {
    p_Result_3_fu_277_p3 = esl_concat<16,16>(data_reg_i_V_11_load_reg_505.read(), data_reg_q_V_q0.read());
}

void averaging::thread_p_Result_4_fu_257_p5() {
    p_Result_4_fu_257_p5 = esl_partset<24,24,23,32,32>(data_valid_reg_V.read(), tmp_2_fu_253_p1.read(), ap_const_lv32_1, ap_const_lv32_17);
}

void averaging::thread_p_Result_s_fu_332_p2() {
    p_Result_s_fu_332_p2 = (!ap_const_lv24_1.is_01())? sc_lv<24>(): p_Val2_s_reg_500.read() << (unsigned short)ap_const_lv24_1.to_uint();
}

void averaging::thread_tmp_1_fu_239_p3() {
    tmp_1_fu_239_p3 = data_valid_reg_V.read().range(11, 11);
}

void averaging::thread_tmp_2_fu_253_p1() {
    tmp_2_fu_253_p1 = data_valid_reg_V.read().range(23-1, 0);
}

void averaging::thread_tmp_4_fu_451_p1() {
    tmp_4_fu_451_p1 = i_data_TDATA.read().range(16-1, 0);
}

void averaging::thread_tmp_nbreadreq_fu_150_p4() {
    tmp_nbreadreq_fu_150_p4 =  (sc_lv<1>) ((i_data_TVALID.read()));
}

void averaging::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_read_state16.read())) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

void averaging::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_TDATA\" :  \"" << i_data_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_TVALID\" :  \"" << i_data_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"i_data_TREADY\" :  \"" << i_data_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_TLAST\" :  \"" << i_data_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_TDATA\" :  \"" << o_data_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_TVALID\" :  \"" << o_data_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"o_data_TREADY\" :  \"" << o_data_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_TLAST\" :  \"" << o_data_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"start_V\" :  \"" << start_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

