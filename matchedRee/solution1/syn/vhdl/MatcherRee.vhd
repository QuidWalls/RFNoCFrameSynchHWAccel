-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatcherRee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    i_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    i_data_TVALID : IN STD_LOGIC;
    i_data_TREADY : OUT STD_LOGIC;
    i_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    o_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    o_data_TVALID : OUT STD_LOGIC;
    o_data_TREADY : IN STD_LOGIC;
    o_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    start_V : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of MatcherRee is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MatcherRee,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.740000,HLS_SYN_LAT=9,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=28,HLS_SYN_FF=1053,HLS_SYN_LUT=288}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv21_76 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001110110";
    constant ap_const_lv21_9C : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010011100";
    constant ap_const_lv21_A9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010101001";
    constant ap_const_lv21_CC : STD_LOGIC_VECTOR (20 downto 0) := "000000000000011001100";
    constant ap_const_lv21_B6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010110110";
    constant ap_const_lv21_8C : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010001100";
    constant ap_const_lv21_79 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001111001";
    constant ap_const_lv21_5C : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001011100";
    constant ap_const_lv21_49 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001001001";
    constant ap_const_lv21_69 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001101001";
    constant ap_const_lv21_93 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010010011";
    constant ap_const_lv21_B3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010110011";
    constant ap_const_lv21_D3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000011010011";
    constant ap_const_lv21_D0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000011010000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal i_data_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal i_data_V_data_V_0_vld_in : STD_LOGIC;
    signal i_data_V_data_V_0_vld_out : STD_LOGIC;
    signal i_data_V_data_V_0_ack_in : STD_LOGIC;
    signal i_data_V_data_V_0_ack_out : STD_LOGIC;
    signal i_data_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal i_data_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal i_data_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal i_data_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal i_data_V_data_V_0_sel : STD_LOGIC;
    signal i_data_V_data_V_0_load_A : STD_LOGIC;
    signal i_data_V_data_V_0_load_B : STD_LOGIC;
    signal i_data_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_data_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal i_data_V_last_V_0_vld_in : STD_LOGIC;
    signal i_data_V_last_V_0_ack_out : STD_LOGIC;
    signal i_data_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal o_data_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_V_data_V_1_vld_in : STD_LOGIC;
    signal o_data_V_data_V_1_vld_out : STD_LOGIC;
    signal o_data_V_data_V_1_ack_in : STD_LOGIC;
    signal o_data_V_data_V_1_ack_out : STD_LOGIC;
    signal o_data_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal o_data_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal o_data_V_data_V_1_sel : STD_LOGIC;
    signal o_data_V_data_V_1_load_A : STD_LOGIC;
    signal o_data_V_data_V_1_load_B : STD_LOGIC;
    signal o_data_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal o_data_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal o_data_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_V_last_V_1_vld_in : STD_LOGIC;
    signal o_data_V_last_V_1_vld_out : STD_LOGIC;
    signal o_data_V_last_V_1_ack_in : STD_LOGIC;
    signal o_data_V_last_V_1_ack_out : STD_LOGIC;
    signal o_data_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal o_data_V_last_V_1_sel : STD_LOGIC;
    signal o_data_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal currentState : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal buffQ_V_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffQ_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal buffI_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal i_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal currentState_load_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter7_currentState_load_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter8_currentState_load_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_V_read_read_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal currentState_load_load_fu_201_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_currentState_load_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_currentState_load_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_currentState_load_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_currentState_load_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_currentState_load_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_currentState_load_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_215_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_reg_1568 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_219_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_1573 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_reg_1578 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1583 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffQ_V_2_load_reg_1588 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffI_V_2_load_reg_1593 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_reg_1598 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_1603 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffQ_V_4_load_reg_1608 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffI_V_4_load_reg_1613 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_1618 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_1623 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffQ_V_6_load_reg_1628 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffI_V_6_load_reg_1633 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_reg_1638 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_reg_1643 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffQ_V_8_load_reg_1648 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffI_V_8_load_reg_1653 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_reg_1658 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_reg_1663 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffQ_V_10_load_reg_1668 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffI_V_10_load_reg_1673 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_reg_1678 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_reg_1683 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffQ_V_12_load_reg_1688 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffI_V_12_load_reg_1693 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_reg_1698 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_reg_1703 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_1299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal tmp_5_fu_363_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_376_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal tmp_2_fu_229_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_fu_241_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl1_fu_233_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl2_cast_fu_249_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_3_fu_259_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_fu_277_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl3_fu_269_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl4_cast_fu_285_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_7_fu_253_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_s_fu_289_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_4_fu_389_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_fu_401_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl6_cast_fu_409_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl5_fu_393_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_1_1_fu_419_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_7_1_fu_413_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_8_fu_432_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl7_fu_444_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl7_cast_fu_452_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl_fu_436_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_11_1_fu_462_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_10_1_fu_456_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_8_1_fu_426_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_s_fu_479_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_11_1_fu_469_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_10_fu_501_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1308_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_11_fu_523_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1317_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_12_fu_544_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1326_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1335_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1344_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_15_fu_643_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1353_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_16_fu_664_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1362_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1371_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1380_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_19_fu_763_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1389_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_20_fu_784_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1398_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1407_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1416_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_23_fu_883_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1425_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_24_fu_904_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1434_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1443_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1452_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_27_fu_1003_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1461_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_28_fu_1024_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1470_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1479_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1488_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_31_fu_1123_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1497_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_32_fu_1144_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1506_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1515_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1524_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_35_fu_1243_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1542_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1533_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_36_fu_1273_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1551_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_14_s_fu_1290_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_s_fu_1260_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1308_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1308_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1317_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1317_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1326_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1326_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1335_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1335_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1344_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1344_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1353_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1353_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1362_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1362_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1371_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1371_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1380_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1380_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1389_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1389_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1398_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1398_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1407_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1407_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1416_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1416_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1425_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1425_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1434_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1434_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1443_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1443_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1452_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1452_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1461_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1461_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1470_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1470_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1479_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1479_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1488_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1488_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1497_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1497_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1506_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1506_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1515_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1515_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1524_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1524_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1533_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1533_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1542_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1542_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1551_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1551_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component MatcherRee_mac_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component MatcherRee_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;



begin
    MatcherRee_mac_mubkb_U0 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1308_p0,
        din1 => buffQ_V_1,
        din2 => grp_fu_1308_p2,
        dout => grp_fu_1308_p3);

    MatcherRee_mac_mubkb_U1 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1317_p0,
        din1 => buffI_V_1,
        din2 => grp_fu_1317_p2,
        dout => grp_fu_1317_p3);

    MatcherRee_mac_mucud_U2 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1326_p0,
        din1 => buffQ_V_2,
        din2 => grp_fu_1326_p2,
        dout => grp_fu_1326_p3);

    MatcherRee_mac_mucud_U3 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1335_p0,
        din1 => buffI_V_2,
        din2 => grp_fu_1335_p2,
        dout => grp_fu_1335_p3);

    MatcherRee_mac_mucud_U4 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1344_p0,
        din1 => buffQ_V_3,
        din2 => grp_fu_1344_p2,
        dout => grp_fu_1344_p3);

    MatcherRee_mac_mucud_U5 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1353_p0,
        din1 => buffI_V_3,
        din2 => grp_fu_1353_p2,
        dout => grp_fu_1353_p3);

    MatcherRee_mac_mucud_U6 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1362_p0,
        din1 => buffQ_V_4,
        din2 => grp_fu_1362_p2,
        dout => grp_fu_1362_p3);

    MatcherRee_mac_mucud_U7 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1371_p0,
        din1 => buffI_V_4,
        din2 => grp_fu_1371_p2,
        dout => grp_fu_1371_p3);

    MatcherRee_mac_mucud_U8 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1380_p0,
        din1 => buffQ_V_5,
        din2 => grp_fu_1380_p2,
        dout => grp_fu_1380_p3);

    MatcherRee_mac_mucud_U9 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1389_p0,
        din1 => buffI_V_5,
        din2 => grp_fu_1389_p2,
        dout => grp_fu_1389_p3);

    MatcherRee_mac_mucud_U10 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1398_p0,
        din1 => buffQ_V_6,
        din2 => grp_fu_1398_p2,
        dout => grp_fu_1398_p3);

    MatcherRee_mac_mucud_U11 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1407_p0,
        din1 => buffI_V_6,
        din2 => grp_fu_1407_p2,
        dout => grp_fu_1407_p3);

    MatcherRee_mac_mubkb_U12 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1416_p0,
        din1 => buffQ_V_7,
        din2 => grp_fu_1416_p2,
        dout => grp_fu_1416_p3);

    MatcherRee_mac_mubkb_U13 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1425_p0,
        din1 => buffI_V_7,
        din2 => grp_fu_1425_p2,
        dout => grp_fu_1425_p3);

    MatcherRee_mac_mubkb_U14 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1434_p0,
        din1 => buffQ_V_8,
        din2 => grp_fu_1434_p2,
        dout => grp_fu_1434_p3);

    MatcherRee_mac_mubkb_U15 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1443_p0,
        din1 => buffI_V_8,
        din2 => grp_fu_1443_p2,
        dout => grp_fu_1443_p3);

    MatcherRee_mac_mubkb_U16 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1452_p0,
        din1 => buffQ_V_9,
        din2 => grp_fu_1452_p2,
        dout => grp_fu_1452_p3);

    MatcherRee_mac_mubkb_U17 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1461_p0,
        din1 => buffI_V_9,
        din2 => grp_fu_1461_p2,
        dout => grp_fu_1461_p3);

    MatcherRee_mac_mubkb_U18 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1470_p0,
        din1 => buffQ_V_10,
        din2 => grp_fu_1470_p2,
        dout => grp_fu_1470_p3);

    MatcherRee_mac_mubkb_U19 : component MatcherRee_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1479_p0,
        din1 => buffI_V_10,
        din2 => grp_fu_1479_p2,
        dout => grp_fu_1479_p3);

    MatcherRee_mac_mucud_U20 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1488_p0,
        din1 => buffQ_V_11,
        din2 => grp_fu_1488_p2,
        dout => grp_fu_1488_p3);

    MatcherRee_mac_mucud_U21 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1497_p0,
        din1 => buffI_V_11,
        din2 => grp_fu_1497_p2,
        dout => grp_fu_1497_p3);

    MatcherRee_mac_mucud_U22 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1506_p0,
        din1 => buffQ_V_12,
        din2 => grp_fu_1506_p2,
        dout => grp_fu_1506_p3);

    MatcherRee_mac_mucud_U23 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1515_p0,
        din1 => buffI_V_12,
        din2 => grp_fu_1515_p2,
        dout => grp_fu_1515_p3);

    MatcherRee_mac_mucud_U24 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1524_p0,
        din1 => buffQ_V_13,
        din2 => grp_fu_1524_p2,
        dout => grp_fu_1524_p3);

    MatcherRee_mac_mucud_U25 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1533_p0,
        din1 => buffI_V_13,
        din2 => grp_fu_1533_p2,
        dout => grp_fu_1533_p3);

    MatcherRee_mac_mucud_U26 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1542_p0,
        din1 => buffQ_V_14,
        din2 => grp_fu_1542_p2,
        dout => grp_fu_1542_p3);

    MatcherRee_mac_mucud_U27 : component MatcherRee_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1551_p0,
        din1 => buffI_V_14,
        din2 => grp_fu_1551_p2,
        dout => grp_fu_1551_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    currentState_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                currentState <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_lv1_0 = currentState_load_load_fu_201_p1) and (ap_const_lv1_1 = start_V_read_read_fu_176_p2))) then 
                    currentState <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    i_data_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                i_data_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = i_data_V_data_V_0_ack_out) and (ap_const_logic_1 = i_data_V_data_V_0_vld_out))) then 
                                        i_data_V_data_V_0_sel_rd <= not(i_data_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    i_data_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                i_data_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = i_data_V_data_V_0_vld_in) and (ap_const_logic_1 = i_data_V_data_V_0_ack_in))) then 
                                        i_data_V_data_V_0_sel_wr <= not(i_data_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    i_data_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                i_data_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = i_data_V_data_V_0_vld_in) and (ap_const_logic_1 = i_data_V_data_V_0_ack_out) and (i_data_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = i_data_V_data_V_0_vld_in) and (i_data_V_data_V_0_state = ap_const_lv2_2)))) then 
                    i_data_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = i_data_V_data_V_0_vld_in) and (ap_const_logic_0 = i_data_V_data_V_0_ack_out) and (i_data_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = i_data_V_data_V_0_ack_out) and (i_data_V_data_V_0_state = ap_const_lv2_1)))) then 
                    i_data_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = i_data_V_data_V_0_vld_in) and (i_data_V_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = i_data_V_data_V_0_ack_out) and (i_data_V_data_V_0_state = ap_const_lv2_1)) or ((i_data_V_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = i_data_V_data_V_0_vld_in) and (ap_const_logic_0 = i_data_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = i_data_V_data_V_0_vld_in) and (ap_const_logic_1 = i_data_V_data_V_0_ack_out)))))) then 
                    i_data_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    i_data_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_data_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                i_data_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = i_data_V_last_V_0_vld_in) and (ap_const_logic_1 = i_data_V_last_V_0_ack_out) and (ap_const_lv2_3 = i_data_V_last_V_0_state)) or ((ap_const_logic_0 = i_data_V_last_V_0_vld_in) and (ap_const_lv2_2 = i_data_V_last_V_0_state)))) then 
                    i_data_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = i_data_V_last_V_0_vld_in) and (ap_const_logic_0 = i_data_V_last_V_0_ack_out) and (ap_const_lv2_3 = i_data_V_last_V_0_state)) or ((ap_const_logic_0 = i_data_V_last_V_0_ack_out) and (ap_const_lv2_1 = i_data_V_last_V_0_state)))) then 
                    i_data_V_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = i_data_V_last_V_0_vld_in) and (ap_const_lv2_2 = i_data_V_last_V_0_state)) or ((ap_const_logic_1 = i_data_V_last_V_0_ack_out) and (ap_const_lv2_1 = i_data_V_last_V_0_state)) or ((ap_const_lv2_3 = i_data_V_last_V_0_state) and not(((ap_const_logic_1 = i_data_V_last_V_0_vld_in) and (ap_const_logic_0 = i_data_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = i_data_V_last_V_0_vld_in) and (ap_const_logic_1 = i_data_V_last_V_0_ack_out)))))) then 
                    i_data_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    i_data_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    o_data_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = o_data_V_data_V_1_ack_out) and (ap_const_logic_1 = o_data_V_data_V_1_vld_out))) then 
                                        o_data_V_data_V_1_sel_rd <= not(o_data_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    o_data_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = o_data_V_data_V_1_vld_in) and (ap_const_logic_1 = o_data_V_data_V_1_ack_in))) then 
                                        o_data_V_data_V_1_sel_wr <= not(o_data_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    o_data_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = o_data_V_data_V_1_vld_in) and (ap_const_logic_1 = o_data_V_data_V_1_ack_out) and (ap_const_lv2_3 = o_data_V_data_V_1_state)) or ((ap_const_logic_0 = o_data_V_data_V_1_vld_in) and (ap_const_lv2_2 = o_data_V_data_V_1_state)))) then 
                    o_data_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = o_data_V_data_V_1_vld_in) and (ap_const_logic_0 = o_data_V_data_V_1_ack_out) and (ap_const_lv2_3 = o_data_V_data_V_1_state)) or ((ap_const_logic_0 = o_data_V_data_V_1_ack_out) and (ap_const_lv2_1 = o_data_V_data_V_1_state)))) then 
                    o_data_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = o_data_V_data_V_1_vld_in) and (ap_const_lv2_2 = o_data_V_data_V_1_state)) or ((ap_const_logic_1 = o_data_V_data_V_1_ack_out) and (ap_const_lv2_1 = o_data_V_data_V_1_state)) or ((ap_const_lv2_3 = o_data_V_data_V_1_state) and not(((ap_const_logic_1 = o_data_V_data_V_1_vld_in) and (ap_const_logic_0 = o_data_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = o_data_V_data_V_1_vld_in) and (ap_const_logic_1 = o_data_V_data_V_1_ack_out)))))) then 
                    o_data_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    o_data_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    o_data_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = o_data_V_last_V_1_ack_out) and (ap_const_logic_1 = o_data_V_last_V_1_vld_out))) then 
                                        o_data_V_last_V_1_sel_rd <= not(o_data_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    o_data_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = o_data_V_last_V_1_vld_in) and (ap_const_logic_1 = o_data_V_last_V_1_ack_out) and (ap_const_lv2_3 = o_data_V_last_V_1_state)) or ((ap_const_logic_0 = o_data_V_last_V_1_vld_in) and (ap_const_lv2_2 = o_data_V_last_V_1_state)))) then 
                    o_data_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = o_data_V_last_V_1_vld_in) and (ap_const_logic_0 = o_data_V_last_V_1_ack_out) and (ap_const_lv2_3 = o_data_V_last_V_1_state)) or ((ap_const_logic_0 = o_data_V_last_V_1_ack_out) and (ap_const_lv2_1 = o_data_V_last_V_1_state)))) then 
                    o_data_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = o_data_V_last_V_1_vld_in) and (ap_const_lv2_2 = o_data_V_last_V_1_state)) or ((ap_const_logic_1 = o_data_V_last_V_1_ack_out) and (ap_const_lv2_1 = o_data_V_last_V_1_state)) or ((ap_const_lv2_3 = o_data_V_last_V_1_state) and not(((ap_const_logic_1 = o_data_V_last_V_1_vld_in) and (ap_const_logic_0 = o_data_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = o_data_V_last_V_1_vld_in) and (ap_const_logic_1 = o_data_V_last_V_1_ack_out)))))) then 
                    o_data_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    o_data_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_currentState_load_reg_1564 <= currentState_load_reg_1564;
                currentState_load_reg_1564 <= currentState;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_currentState_load_reg_1564 <= ap_reg_pp0_iter1_currentState_load_reg_1564;
                ap_reg_pp0_iter3_currentState_load_reg_1564 <= ap_reg_pp0_iter2_currentState_load_reg_1564;
                ap_reg_pp0_iter4_currentState_load_reg_1564 <= ap_reg_pp0_iter3_currentState_load_reg_1564;
                ap_reg_pp0_iter5_currentState_load_reg_1564 <= ap_reg_pp0_iter4_currentState_load_reg_1564;
                ap_reg_pp0_iter6_currentState_load_reg_1564 <= ap_reg_pp0_iter5_currentState_load_reg_1564;
                ap_reg_pp0_iter7_currentState_load_reg_1564 <= ap_reg_pp0_iter6_currentState_load_reg_1564;
                ap_reg_pp0_iter8_currentState_load_reg_1564 <= ap_reg_pp0_iter7_currentState_load_reg_1564;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_currentState_load_reg_1564) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                    buffI_V_0(15 downto 5) <= tmp_7_fu_376_p3(15 downto 5);
                    buffI_V_1(15 downto 5) <= buffI_V_0(15 downto 5);
                    buffI_V_2(15 downto 5) <= buffI_V_1(15 downto 5);
                    buffQ_V_0(15 downto 5) <= tmp_5_fu_363_p3(15 downto 5);
                    buffQ_V_1(15 downto 5) <= buffQ_V_0(15 downto 5);
                    buffQ_V_2(15 downto 5) <= buffQ_V_1(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter5_currentState_load_reg_1564) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6))) then
                    buffI_V_10(15 downto 5) <= buffI_V_9(15 downto 5);
                    buffI_V_9(15 downto 5) <= buffI_V_8_load_reg_1653(15 downto 5);
                    buffQ_V_10(15 downto 5) <= buffQ_V_9(15 downto 5);
                    buffQ_V_9(15 downto 5) <= buffQ_V_8_load_reg_1648(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter5_currentState_load_reg_1564))) then
                    buffI_V_10_load_reg_1673(15 downto 5) <= buffI_V_10(15 downto 5);
                    buffQ_V_10_load_reg_1668(15 downto 5) <= buffQ_V_10(15 downto 5);
                tmp_29_reg_1678 <= grp_fu_1470_p3(20 downto 5);
                tmp_30_reg_1683 <= grp_fu_1479_p3(20 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter6_currentState_load_reg_1564) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7))) then
                    buffI_V_11(15 downto 5) <= buffI_V_10_load_reg_1673(15 downto 5);
                    buffI_V_12(15 downto 5) <= buffI_V_11(15 downto 5);
                    buffQ_V_11(15 downto 5) <= buffQ_V_10_load_reg_1668(15 downto 5);
                    buffQ_V_12(15 downto 5) <= buffQ_V_11(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter6_currentState_load_reg_1564))) then
                    buffI_V_12_load_reg_1693(15 downto 5) <= buffI_V_12(15 downto 5);
                    buffQ_V_12_load_reg_1688(15 downto 5) <= buffQ_V_12(15 downto 5);
                tmp_33_reg_1698 <= grp_fu_1506_p3(20 downto 5);
                tmp_34_reg_1703 <= grp_fu_1515_p3(20 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_lv1_1 = ap_reg_pp0_iter7_currentState_load_reg_1564) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                    buffI_V_13(15 downto 5) <= buffI_V_12_load_reg_1693(15 downto 5);
                    buffI_V_14(15 downto 5) <= buffI_V_13(15 downto 5);
                    buffQ_V_13(15 downto 5) <= buffQ_V_12_load_reg_1688(15 downto 5);
                    buffQ_V_14(15 downto 5) <= buffQ_V_13(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_currentState_load_reg_1564))) then
                    buffI_V_2_load_reg_1593(15 downto 5) <= buffI_V_2(15 downto 5);
                    buffQ_V_2_load_reg_1588(15 downto 5) <= buffQ_V_2(15 downto 5);
                tmp_13_reg_1598 <= grp_fu_1326_p3(20 downto 5);
                tmp_14_reg_1603 <= grp_fu_1335_p3(20 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_currentState_load_reg_1564) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then
                    buffI_V_3(15 downto 5) <= buffI_V_2_load_reg_1593(15 downto 5);
                    buffI_V_4(15 downto 5) <= buffI_V_3(15 downto 5);
                    buffQ_V_3(15 downto 5) <= buffQ_V_2_load_reg_1588(15 downto 5);
                    buffQ_V_4(15 downto 5) <= buffQ_V_3(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_currentState_load_reg_1564))) then
                    buffI_V_4_load_reg_1613(15 downto 5) <= buffI_V_4(15 downto 5);
                    buffQ_V_4_load_reg_1608(15 downto 5) <= buffQ_V_4(15 downto 5);
                tmp_17_reg_1618 <= grp_fu_1362_p3(20 downto 5);
                tmp_18_reg_1623 <= grp_fu_1371_p3(20 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter3_currentState_load_reg_1564) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then
                    buffI_V_5(15 downto 5) <= buffI_V_4_load_reg_1613(15 downto 5);
                    buffI_V_6(15 downto 5) <= buffI_V_5(15 downto 5);
                    buffQ_V_5(15 downto 5) <= buffQ_V_4_load_reg_1608(15 downto 5);
                    buffQ_V_6(15 downto 5) <= buffQ_V_5(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter3_currentState_load_reg_1564))) then
                    buffI_V_6_load_reg_1633(15 downto 5) <= buffI_V_6(15 downto 5);
                    buffQ_V_6_load_reg_1628(15 downto 5) <= buffQ_V_6(15 downto 5);
                tmp_21_reg_1638 <= grp_fu_1398_p3(20 downto 5);
                tmp_22_reg_1643 <= grp_fu_1407_p3(20 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter4_currentState_load_reg_1564) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then
                    buffI_V_7(15 downto 5) <= buffI_V_6_load_reg_1633(15 downto 5);
                    buffI_V_8(15 downto 5) <= buffI_V_7(15 downto 5);
                    buffQ_V_7(15 downto 5) <= buffQ_V_6_load_reg_1628(15 downto 5);
                    buffQ_V_8(15 downto 5) <= buffQ_V_7(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter4_currentState_load_reg_1564))) then
                    buffI_V_8_load_reg_1653(15 downto 5) <= buffI_V_8(15 downto 5);
                    buffQ_V_8_load_reg_1648(15 downto 5) <= buffQ_V_8(15 downto 5);
                tmp_25_reg_1658 <= grp_fu_1434_p3(20 downto 5);
                tmp_26_reg_1663 <= grp_fu_1443_p3(20 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = i_data_V_data_V_0_load_A)) then
                i_data_V_data_V_0_payload_A <= i_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = i_data_V_data_V_0_load_B)) then
                i_data_V_data_V_0_payload_B <= i_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = o_data_V_data_V_1_load_A)) then
                o_data_V_data_V_1_payload_A <= p_Result_s_fu_1299_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = o_data_V_data_V_1_load_B)) then
                o_data_V_data_V_1_payload_B <= p_Result_s_fu_1299_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = currentState_load_reg_1564) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                tmp_1_reg_1573 <= i_data_V_data_V_0_data_out(26 downto 16);
                tmp_6_reg_1578 <= p_Val2_7_fu_253_p2(20 downto 5);
                tmp_9_reg_1583 <= p_Val2_s_fu_289_p2(20 downto 5);
                tmp_reg_1568 <= tmp_fu_215_p1;
            end if;
        end if;
    end process;
    buffQ_V_14(4 downto 0) <= "00000";
    buffI_V_14(4 downto 0) <= "00000";
    buffQ_V_13(4 downto 0) <= "00000";
    buffI_V_13(4 downto 0) <= "00000";
    buffQ_V_12(4 downto 0) <= "00000";
    buffI_V_12(4 downto 0) <= "00000";
    buffQ_V_11(4 downto 0) <= "00000";
    buffI_V_11(4 downto 0) <= "00000";
    buffQ_V_10(4 downto 0) <= "00000";
    buffI_V_10(4 downto 0) <= "00000";
    buffQ_V_9(4 downto 0) <= "00000";
    buffI_V_9(4 downto 0) <= "00000";
    buffQ_V_8(4 downto 0) <= "00000";
    buffI_V_8(4 downto 0) <= "00000";
    buffQ_V_7(4 downto 0) <= "00000";
    buffI_V_7(4 downto 0) <= "00000";
    buffQ_V_6(4 downto 0) <= "00000";
    buffI_V_6(4 downto 0) <= "00000";
    buffQ_V_5(4 downto 0) <= "00000";
    buffI_V_5(4 downto 0) <= "00000";
    buffQ_V_4(4 downto 0) <= "00000";
    buffI_V_4(4 downto 0) <= "00000";
    buffQ_V_3(4 downto 0) <= "00000";
    buffI_V_3(4 downto 0) <= "00000";
    buffQ_V_2(4 downto 0) <= "00000";
    buffI_V_2(4 downto 0) <= "00000";
    buffQ_V_1(4 downto 0) <= "00000";
    buffI_V_1(4 downto 0) <= "00000";
    buffQ_V_0(4 downto 0) <= "00000";
    buffI_V_0(4 downto 0) <= "00000";
    buffQ_V_2_load_reg_1588(4 downto 0) <= "00000";
    buffI_V_2_load_reg_1593(4 downto 0) <= "00000";
    buffQ_V_4_load_reg_1608(4 downto 0) <= "00000";
    buffI_V_4_load_reg_1613(4 downto 0) <= "00000";
    buffQ_V_6_load_reg_1628(4 downto 0) <= "00000";
    buffI_V_6_load_reg_1633(4 downto 0) <= "00000";
    buffQ_V_8_load_reg_1648(4 downto 0) <= "00000";
    buffI_V_8_load_reg_1653(4 downto 0) <= "00000";
    buffQ_V_10_load_reg_1668(4 downto 0) <= "00000";
    buffI_V_10_load_reg_1673(4 downto 0) <= "00000";
    buffQ_V_12_load_reg_1688(4 downto 0) <= "00000";
    buffI_V_12_load_reg_1693(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(i_data_V_data_V_0_vld_out, o_data_V_data_V_1_ack_in, o_data_V_last_V_1_ack_in, ap_enable_reg_pp0_iter1, currentState_load_reg_1564, ap_enable_reg_pp0_iter9)
    begin
                ap_block_pp0_stage0_flag00001001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_1564) and (ap_const_logic_0 = i_data_V_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and ((ap_const_logic_0 = o_data_V_data_V_1_ack_in) or (ap_const_logic_0 = o_data_V_last_V_1_ack_in))));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(i_data_V_data_V_0_vld_out, o_data_V_data_V_1_ack_in, o_data_V_last_V_1_ack_in, ap_enable_reg_pp0_iter1, currentState_load_reg_1564, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_1564) and (ap_const_logic_0 = i_data_V_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_boolean_1 = ap_block_state9_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and ((ap_const_logic_0 = o_data_V_data_V_1_ack_in) or (ap_const_logic_0 = o_data_V_last_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state10_io))));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(i_data_V_data_V_0_vld_out, o_data_V_data_V_1_ack_in, o_data_V_last_V_1_ack_in, ap_enable_reg_pp0_iter1, currentState_load_reg_1564, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_1564) and (ap_const_logic_0 = i_data_V_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_boolean_1 = ap_block_state9_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and ((ap_const_logic_0 = o_data_V_data_V_1_ack_in) or (ap_const_logic_0 = o_data_V_last_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state10_io))));
    end process;


    ap_block_state10_io_assign_proc : process(o_data_V_data_V_1_ack_in, ap_reg_pp0_iter8_currentState_load_reg_1564)
    begin
                ap_block_state10_io <= ((ap_const_lv1_1 = ap_reg_pp0_iter8_currentState_load_reg_1564) and (ap_const_logic_0 = o_data_V_data_V_1_ack_in));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(o_data_V_data_V_1_ack_in, o_data_V_last_V_1_ack_in)
    begin
                ap_block_state10_pp0_stage0_iter9 <= ((ap_const_logic_0 = o_data_V_data_V_1_ack_in) or (ap_const_logic_0 = o_data_V_last_V_1_ack_in));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(i_data_V_data_V_0_vld_out, currentState_load_reg_1564)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_const_lv1_1 = currentState_load_reg_1564) and (ap_const_logic_0 = i_data_V_data_V_0_vld_out));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(o_data_V_data_V_1_ack_in, ap_reg_pp0_iter7_currentState_load_reg_1564)
    begin
                ap_block_state9_io <= ((ap_const_lv1_1 = ap_reg_pp0_iter7_currentState_load_reg_1564) and (ap_const_logic_0 = o_data_V_data_V_1_ack_in));
    end process;

        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_logic_0 = ap_const_logic_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    currentState_load_load_fu_201_p1 <= currentState;
    grp_fu_1308_p0 <= ap_const_lv21_76(8 - 1 downto 0);
    grp_fu_1308_p2 <= (tmp_s_fu_479_p4 & ap_const_lv5_0);
    grp_fu_1317_p0 <= ap_const_lv21_76(8 - 1 downto 0);
    grp_fu_1317_p2 <= (tmp_10_fu_501_p4 & ap_const_lv5_0);
    grp_fu_1326_p0 <= ap_const_lv21_9C(9 - 1 downto 0);
    grp_fu_1326_p2 <= (tmp_11_fu_523_p4 & ap_const_lv5_0);
    grp_fu_1335_p0 <= ap_const_lv21_9C(9 - 1 downto 0);
    grp_fu_1335_p2 <= (tmp_12_fu_544_p4 & ap_const_lv5_0);
    grp_fu_1344_p0 <= ap_const_lv21_A9(9 - 1 downto 0);
    grp_fu_1344_p2 <= (tmp_13_reg_1598 & ap_const_lv5_0);
    grp_fu_1353_p0 <= ap_const_lv21_A9(9 - 1 downto 0);
    grp_fu_1353_p2 <= (tmp_14_reg_1603 & ap_const_lv5_0);
    grp_fu_1362_p0 <= ap_const_lv21_CC(9 - 1 downto 0);
    grp_fu_1362_p2 <= (tmp_15_fu_643_p4 & ap_const_lv5_0);
    grp_fu_1371_p0 <= ap_const_lv21_CC(9 - 1 downto 0);
    grp_fu_1371_p2 <= (tmp_16_fu_664_p4 & ap_const_lv5_0);
    grp_fu_1380_p0 <= ap_const_lv21_B6(9 - 1 downto 0);
    grp_fu_1380_p2 <= (tmp_17_reg_1618 & ap_const_lv5_0);
    grp_fu_1389_p0 <= ap_const_lv21_B6(9 - 1 downto 0);
    grp_fu_1389_p2 <= (tmp_18_reg_1623 & ap_const_lv5_0);
    grp_fu_1398_p0 <= ap_const_lv21_8C(9 - 1 downto 0);
    grp_fu_1398_p2 <= (tmp_19_fu_763_p4 & ap_const_lv5_0);
    grp_fu_1407_p0 <= ap_const_lv21_8C(9 - 1 downto 0);
    grp_fu_1407_p2 <= (tmp_20_fu_784_p4 & ap_const_lv5_0);
    grp_fu_1416_p0 <= ap_const_lv21_79(8 - 1 downto 0);
    grp_fu_1416_p2 <= (tmp_21_reg_1638 & ap_const_lv5_0);
    grp_fu_1425_p0 <= ap_const_lv21_79(8 - 1 downto 0);
    grp_fu_1425_p2 <= (tmp_22_reg_1643 & ap_const_lv5_0);
    grp_fu_1434_p0 <= ap_const_lv21_5C(8 - 1 downto 0);
    grp_fu_1434_p2 <= (tmp_23_fu_883_p4 & ap_const_lv5_0);
    grp_fu_1443_p0 <= ap_const_lv21_5C(8 - 1 downto 0);
    grp_fu_1443_p2 <= (tmp_24_fu_904_p4 & ap_const_lv5_0);
    grp_fu_1452_p0 <= ap_const_lv21_49(8 - 1 downto 0);
    grp_fu_1452_p2 <= (tmp_25_reg_1658 & ap_const_lv5_0);
    grp_fu_1461_p0 <= ap_const_lv21_49(8 - 1 downto 0);
    grp_fu_1461_p2 <= (tmp_26_reg_1663 & ap_const_lv5_0);
    grp_fu_1470_p0 <= ap_const_lv21_69(8 - 1 downto 0);
    grp_fu_1470_p2 <= (tmp_27_fu_1003_p4 & ap_const_lv5_0);
    grp_fu_1479_p0 <= ap_const_lv21_69(8 - 1 downto 0);
    grp_fu_1479_p2 <= (tmp_28_fu_1024_p4 & ap_const_lv5_0);
    grp_fu_1488_p0 <= ap_const_lv21_93(9 - 1 downto 0);
    grp_fu_1488_p2 <= (tmp_29_reg_1678 & ap_const_lv5_0);
    grp_fu_1497_p0 <= ap_const_lv21_93(9 - 1 downto 0);
    grp_fu_1497_p2 <= (tmp_30_reg_1683 & ap_const_lv5_0);
    grp_fu_1506_p0 <= ap_const_lv21_B3(9 - 1 downto 0);
    grp_fu_1506_p2 <= (tmp_31_fu_1123_p4 & ap_const_lv5_0);
    grp_fu_1515_p0 <= ap_const_lv21_B3(9 - 1 downto 0);
    grp_fu_1515_p2 <= (tmp_32_fu_1144_p4 & ap_const_lv5_0);
    grp_fu_1524_p0 <= ap_const_lv21_D3(9 - 1 downto 0);
    grp_fu_1524_p2 <= (tmp_33_reg_1698 & ap_const_lv5_0);
    grp_fu_1533_p0 <= ap_const_lv21_D3(9 - 1 downto 0);
    grp_fu_1533_p2 <= (tmp_34_reg_1703 & ap_const_lv5_0);
    grp_fu_1542_p0 <= ap_const_lv21_D0(9 - 1 downto 0);
    grp_fu_1542_p2 <= (tmp_35_fu_1243_p4 & ap_const_lv5_0);
    grp_fu_1551_p0 <= ap_const_lv21_D0(9 - 1 downto 0);
    grp_fu_1551_p2 <= (tmp_36_fu_1273_p4 & ap_const_lv5_0);

    i_data_TDATA_blk_n_assign_proc : process(i_data_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, currentState_load_reg_1564)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_1 = currentState_load_reg_1564))) then 
            i_data_TDATA_blk_n <= i_data_V_data_V_0_state(0);
        else 
            i_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    i_data_TREADY <= i_data_V_last_V_0_state(1);
    i_data_V_data_V_0_ack_in <= i_data_V_data_V_0_state(1);

    i_data_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, currentState_load_reg_1564, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_1564) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            i_data_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            i_data_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    i_data_V_data_V_0_data_out_assign_proc : process(i_data_V_data_V_0_payload_A, i_data_V_data_V_0_payload_B, i_data_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = i_data_V_data_V_0_sel)) then 
            i_data_V_data_V_0_data_out <= i_data_V_data_V_0_payload_B;
        else 
            i_data_V_data_V_0_data_out <= i_data_V_data_V_0_payload_A;
        end if; 
    end process;

    i_data_V_data_V_0_load_A <= (i_data_V_data_V_0_state_cmp_full and not(i_data_V_data_V_0_sel_wr));
    i_data_V_data_V_0_load_B <= (i_data_V_data_V_0_sel_wr and i_data_V_data_V_0_state_cmp_full);
    i_data_V_data_V_0_sel <= i_data_V_data_V_0_sel_rd;
    i_data_V_data_V_0_state_cmp_full <= '0' when (i_data_V_data_V_0_state = ap_const_lv2_1) else '1';
    i_data_V_data_V_0_vld_in <= i_data_TVALID;
    i_data_V_data_V_0_vld_out <= i_data_V_data_V_0_state(0);

    i_data_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, currentState_load_reg_1564, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_1564) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            i_data_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            i_data_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    i_data_V_last_V_0_vld_in <= i_data_TVALID;
    o_data_TDATA <= o_data_V_data_V_1_data_out;

    o_data_TDATA_blk_n_assign_proc : process(o_data_V_data_V_1_state, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_currentState_load_reg_1564, ap_enable_reg_pp0_iter9, ap_reg_pp0_iter8_currentState_load_reg_1564)
    begin
        if ((((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_lv1_1 = ap_reg_pp0_iter7_currentState_load_reg_1564)) or ((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_1 = ap_reg_pp0_iter8_currentState_load_reg_1564)))) then 
            o_data_TDATA_blk_n <= o_data_V_data_V_1_state(1);
        else 
            o_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    o_data_TLAST <= o_data_V_last_V_1_data_out;
    o_data_TVALID <= o_data_V_last_V_1_state(0);
    o_data_V_data_V_1_ack_in <= o_data_V_data_V_1_state(1);
    o_data_V_data_V_1_ack_out <= o_data_TREADY;

    o_data_V_data_V_1_data_out_assign_proc : process(o_data_V_data_V_1_payload_A, o_data_V_data_V_1_payload_B, o_data_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = o_data_V_data_V_1_sel)) then 
            o_data_V_data_V_1_data_out <= o_data_V_data_V_1_payload_B;
        else 
            o_data_V_data_V_1_data_out <= o_data_V_data_V_1_payload_A;
        end if; 
    end process;

    o_data_V_data_V_1_load_A <= (o_data_V_data_V_1_state_cmp_full and not(o_data_V_data_V_1_sel_wr));
    o_data_V_data_V_1_load_B <= (o_data_V_data_V_1_sel_wr and o_data_V_data_V_1_state_cmp_full);
    o_data_V_data_V_1_sel <= o_data_V_data_V_1_sel_rd;
    o_data_V_data_V_1_state_cmp_full <= '0' when (o_data_V_data_V_1_state = ap_const_lv2_1) else '1';

    o_data_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_currentState_load_reg_1564, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_lv1_1 = ap_reg_pp0_iter7_currentState_load_reg_1564) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            o_data_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            o_data_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    o_data_V_data_V_1_vld_out <= o_data_V_data_V_1_state(0);
    o_data_V_last_V_1_ack_in <= o_data_V_last_V_1_state(1);
    o_data_V_last_V_1_ack_out <= o_data_TREADY;
    o_data_V_last_V_1_data_out <= ap_const_lv1_0;
    o_data_V_last_V_1_sel <= o_data_V_last_V_1_sel_rd;

    o_data_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_currentState_load_reg_1564, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_const_lv1_1 = ap_reg_pp0_iter7_currentState_load_reg_1564) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            o_data_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            o_data_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    o_data_V_last_V_1_vld_out <= o_data_V_last_V_1_state(0);
    p_Result_s_fu_1299_p3 <= (tmp_14_s_fu_1290_p4 & tmp_9_s_fu_1260_p4);
    p_Val2_10_1_fu_456_p2 <= std_logic_vector(signed(p_shl7_cast_fu_452_p1) + signed(p_shl_fu_436_p3));
    p_Val2_11_1_fu_469_p2 <= std_logic_vector(unsigned(tmp_11_1_fu_462_p3) + unsigned(p_Val2_10_1_fu_456_p2));
    p_Val2_7_1_fu_413_p2 <= std_logic_vector(signed(p_shl6_cast_fu_409_p1) + signed(p_shl5_fu_393_p3));
    p_Val2_7_fu_253_p2 <= std_logic_vector(unsigned(p_shl1_fu_233_p3) - unsigned(p_shl2_cast_fu_249_p1));
    p_Val2_8_1_fu_426_p2 <= std_logic_vector(unsigned(tmp_1_1_fu_419_p3) + unsigned(p_Val2_7_1_fu_413_p2));
    p_Val2_s_fu_289_p2 <= std_logic_vector(unsigned(p_shl3_fu_269_p3) - unsigned(p_shl4_cast_fu_285_p1));
    p_shl1_fu_233_p3 <= (tmp_2_fu_229_p1 & ap_const_lv11_0);
        p_shl2_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl2_fu_241_p3),21));

    p_shl2_fu_241_p3 <= (tmp_fu_215_p1 & ap_const_lv9_0);
    p_shl3_fu_269_p3 <= (tmp_3_fu_259_p4 & ap_const_lv11_0);
        p_shl4_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl4_fu_277_p3),21));

    p_shl4_fu_277_p3 <= (tmp_1_fu_219_p4 & ap_const_lv9_0);
    p_shl5_fu_393_p3 <= (tmp_4_fu_389_p1 & ap_const_lv6_0);
        p_shl6_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_fu_401_p3),21));

    p_shl6_fu_401_p3 <= (buffQ_V_0 & ap_const_lv4_0);
        p_shl7_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_fu_444_p3),21));

    p_shl7_fu_444_p3 <= (buffI_V_0 & ap_const_lv4_0);
    p_shl_fu_436_p3 <= (tmp_8_fu_432_p1 & ap_const_lv6_0);
    start_V_read_read_fu_176_p2 <= start_V;
    tmp_10_fu_501_p4 <= p_Val2_11_1_fu_469_p2(20 downto 5);
    tmp_11_1_fu_462_p3 <= (tmp_9_reg_1583 & ap_const_lv5_0);
    tmp_11_fu_523_p4 <= grp_fu_1308_p3(20 downto 5);
    tmp_12_fu_544_p4 <= grp_fu_1317_p3(20 downto 5);
    tmp_14_s_fu_1290_p4 <= grp_fu_1551_p3(20 downto 5);
    tmp_15_fu_643_p4 <= grp_fu_1344_p3(20 downto 5);
    tmp_16_fu_664_p4 <= grp_fu_1353_p3(20 downto 5);
    tmp_19_fu_763_p4 <= grp_fu_1380_p3(20 downto 5);
    tmp_1_1_fu_419_p3 <= (tmp_6_reg_1578 & ap_const_lv5_0);
    tmp_1_fu_219_p4 <= i_data_V_data_V_0_data_out(26 downto 16);
    tmp_20_fu_784_p4 <= grp_fu_1389_p3(20 downto 5);
    tmp_23_fu_883_p4 <= grp_fu_1416_p3(20 downto 5);
    tmp_24_fu_904_p4 <= grp_fu_1425_p3(20 downto 5);
    tmp_27_fu_1003_p4 <= grp_fu_1452_p3(20 downto 5);
    tmp_28_fu_1024_p4 <= grp_fu_1461_p3(20 downto 5);
    tmp_2_fu_229_p1 <= i_data_V_data_V_0_data_out(10 - 1 downto 0);
    tmp_31_fu_1123_p4 <= grp_fu_1488_p3(20 downto 5);
    tmp_32_fu_1144_p4 <= grp_fu_1497_p3(20 downto 5);
    tmp_35_fu_1243_p4 <= grp_fu_1524_p3(20 downto 5);
    tmp_36_fu_1273_p4 <= grp_fu_1533_p3(20 downto 5);
    tmp_3_fu_259_p4 <= i_data_V_data_V_0_data_out(25 downto 16);
    tmp_4_fu_389_p1 <= buffQ_V_0(15 - 1 downto 0);
    tmp_5_fu_363_p3 <= (tmp_reg_1568 & ap_const_lv5_0);
    tmp_7_fu_376_p3 <= (tmp_1_reg_1573 & ap_const_lv5_0);
    tmp_8_fu_432_p1 <= buffI_V_0(15 - 1 downto 0);
    tmp_9_s_fu_1260_p4 <= grp_fu_1542_p3(20 downto 5);
    tmp_fu_215_p1 <= i_data_V_data_V_0_data_out(11 - 1 downto 0);
    tmp_s_fu_479_p4 <= p_Val2_8_1_fu_426_p2(20 downto 5);
end behav;
