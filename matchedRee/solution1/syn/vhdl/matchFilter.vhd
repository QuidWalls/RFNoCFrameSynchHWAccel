-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matchFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of matchFilter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matchFilter,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.325667,HLS_SYN_LAT=897,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=1,HLS_SYN_FF=2420,HLS_SYN_LUT=1002}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_data_V_0_vld_in : STD_LOGIC;
    signal in_V_data_V_0_vld_out : STD_LOGIC;
    signal in_V_data_V_0_ack_in : STD_LOGIC;
    signal in_V_data_V_0_ack_out : STD_LOGIC;
    signal in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_data_V_0_sel : STD_LOGIC;
    signal in_V_data_V_0_load_A : STD_LOGIC;
    signal in_V_data_V_0_load_B : STD_LOGIC;
    signal in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_last_V_0_vld_in : STD_LOGIC;
    signal in_V_last_V_0_vld_out : STD_LOGIC;
    signal in_V_last_V_0_ack_in : STD_LOGIC;
    signal in_V_last_V_0_ack_out : STD_LOGIC;
    signal in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_last_V_0_sel : STD_LOGIC;
    signal in_V_last_V_0_load_A : STD_LOGIC;
    signal in_V_last_V_0_load_B : STD_LOGIC;
    signal in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_data_V_1_vld_in : STD_LOGIC;
    signal out_V_data_V_1_vld_out : STD_LOGIC;
    signal out_V_data_V_1_ack_in : STD_LOGIC;
    signal out_V_data_V_1_ack_out : STD_LOGIC;
    signal out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_data_V_1_sel : STD_LOGIC;
    signal out_V_data_V_1_load_A : STD_LOGIC;
    signal out_V_data_V_1_load_B : STD_LOGIC;
    signal out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_vld_in : STD_LOGIC;
    signal out_V_last_V_1_vld_out : STD_LOGIC;
    signal out_V_last_V_1_ack_in : STD_LOGIC;
    signal out_V_last_V_1_ack_out : STD_LOGIC;
    signal out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_last_V_1_sel : STD_LOGIC;
    signal out_V_last_V_1_load_A : STD_LOGIC;
    signal out_V_last_V_1_load_B : STD_LOGIC;
    signal out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_i_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_data_V_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_514 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_cast2_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_cast2_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal a_1_fu_194_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_1_reg_529 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffIn_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffIn_data_V_load_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal b_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_552 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal tmp_3_fu_223_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_562 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_fu_227_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_fu_240_p130 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_501_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal buffIn_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffIn_data_V_ce0 : STD_LOGIC;
    signal buffIn_data_V_we0 : STD_LOGIC;
    signal buffIn_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffIn_last_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffIn_last_V_ce0 : STD_LOGIC;
    signal buffIn_last_V_we0 : STD_LOGIC;
    signal buffIn_last_V_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffIn_last_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_reg_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_1_i_reg_153 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_i_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_1_cast_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_i_cast1_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal grp_fu_501_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component matchFilter_mux_1dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        din97_WIDTH : INTEGER;
        din98_WIDTH : INTEGER;
        din99_WIDTH : INTEGER;
        din100_WIDTH : INTEGER;
        din101_WIDTH : INTEGER;
        din102_WIDTH : INTEGER;
        din103_WIDTH : INTEGER;
        din104_WIDTH : INTEGER;
        din105_WIDTH : INTEGER;
        din106_WIDTH : INTEGER;
        din107_WIDTH : INTEGER;
        din108_WIDTH : INTEGER;
        din109_WIDTH : INTEGER;
        din110_WIDTH : INTEGER;
        din111_WIDTH : INTEGER;
        din112_WIDTH : INTEGER;
        din113_WIDTH : INTEGER;
        din114_WIDTH : INTEGER;
        din115_WIDTH : INTEGER;
        din116_WIDTH : INTEGER;
        din117_WIDTH : INTEGER;
        din118_WIDTH : INTEGER;
        din119_WIDTH : INTEGER;
        din120_WIDTH : INTEGER;
        din121_WIDTH : INTEGER;
        din122_WIDTH : INTEGER;
        din123_WIDTH : INTEGER;
        din124_WIDTH : INTEGER;
        din125_WIDTH : INTEGER;
        din126_WIDTH : INTEGER;
        din127_WIDTH : INTEGER;
        din128_WIDTH : INTEGER;
        din129_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (15 downto 0);
        din65 : IN STD_LOGIC_VECTOR (15 downto 0);
        din66 : IN STD_LOGIC_VECTOR (15 downto 0);
        din67 : IN STD_LOGIC_VECTOR (15 downto 0);
        din68 : IN STD_LOGIC_VECTOR (15 downto 0);
        din69 : IN STD_LOGIC_VECTOR (15 downto 0);
        din70 : IN STD_LOGIC_VECTOR (15 downto 0);
        din71 : IN STD_LOGIC_VECTOR (15 downto 0);
        din72 : IN STD_LOGIC_VECTOR (15 downto 0);
        din73 : IN STD_LOGIC_VECTOR (15 downto 0);
        din74 : IN STD_LOGIC_VECTOR (15 downto 0);
        din75 : IN STD_LOGIC_VECTOR (15 downto 0);
        din76 : IN STD_LOGIC_VECTOR (15 downto 0);
        din77 : IN STD_LOGIC_VECTOR (15 downto 0);
        din78 : IN STD_LOGIC_VECTOR (15 downto 0);
        din79 : IN STD_LOGIC_VECTOR (15 downto 0);
        din80 : IN STD_LOGIC_VECTOR (15 downto 0);
        din81 : IN STD_LOGIC_VECTOR (15 downto 0);
        din82 : IN STD_LOGIC_VECTOR (15 downto 0);
        din83 : IN STD_LOGIC_VECTOR (15 downto 0);
        din84 : IN STD_LOGIC_VECTOR (15 downto 0);
        din85 : IN STD_LOGIC_VECTOR (15 downto 0);
        din86 : IN STD_LOGIC_VECTOR (15 downto 0);
        din87 : IN STD_LOGIC_VECTOR (15 downto 0);
        din88 : IN STD_LOGIC_VECTOR (15 downto 0);
        din89 : IN STD_LOGIC_VECTOR (15 downto 0);
        din90 : IN STD_LOGIC_VECTOR (15 downto 0);
        din91 : IN STD_LOGIC_VECTOR (15 downto 0);
        din92 : IN STD_LOGIC_VECTOR (15 downto 0);
        din93 : IN STD_LOGIC_VECTOR (15 downto 0);
        din94 : IN STD_LOGIC_VECTOR (15 downto 0);
        din95 : IN STD_LOGIC_VECTOR (15 downto 0);
        din96 : IN STD_LOGIC_VECTOR (15 downto 0);
        din97 : IN STD_LOGIC_VECTOR (15 downto 0);
        din98 : IN STD_LOGIC_VECTOR (15 downto 0);
        din99 : IN STD_LOGIC_VECTOR (15 downto 0);
        din100 : IN STD_LOGIC_VECTOR (15 downto 0);
        din101 : IN STD_LOGIC_VECTOR (15 downto 0);
        din102 : IN STD_LOGIC_VECTOR (15 downto 0);
        din103 : IN STD_LOGIC_VECTOR (15 downto 0);
        din104 : IN STD_LOGIC_VECTOR (15 downto 0);
        din105 : IN STD_LOGIC_VECTOR (15 downto 0);
        din106 : IN STD_LOGIC_VECTOR (15 downto 0);
        din107 : IN STD_LOGIC_VECTOR (15 downto 0);
        din108 : IN STD_LOGIC_VECTOR (15 downto 0);
        din109 : IN STD_LOGIC_VECTOR (15 downto 0);
        din110 : IN STD_LOGIC_VECTOR (15 downto 0);
        din111 : IN STD_LOGIC_VECTOR (15 downto 0);
        din112 : IN STD_LOGIC_VECTOR (15 downto 0);
        din113 : IN STD_LOGIC_VECTOR (15 downto 0);
        din114 : IN STD_LOGIC_VECTOR (15 downto 0);
        din115 : IN STD_LOGIC_VECTOR (15 downto 0);
        din116 : IN STD_LOGIC_VECTOR (15 downto 0);
        din117 : IN STD_LOGIC_VECTOR (15 downto 0);
        din118 : IN STD_LOGIC_VECTOR (15 downto 0);
        din119 : IN STD_LOGIC_VECTOR (15 downto 0);
        din120 : IN STD_LOGIC_VECTOR (15 downto 0);
        din121 : IN STD_LOGIC_VECTOR (15 downto 0);
        din122 : IN STD_LOGIC_VECTOR (15 downto 0);
        din123 : IN STD_LOGIC_VECTOR (15 downto 0);
        din124 : IN STD_LOGIC_VECTOR (15 downto 0);
        din125 : IN STD_LOGIC_VECTOR (15 downto 0);
        din126 : IN STD_LOGIC_VECTOR (15 downto 0);
        din127 : IN STD_LOGIC_VECTOR (15 downto 0);
        din128 : IN STD_LOGIC_VECTOR (15 downto 0);
        din129 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matchFilter_mac_meOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matchFilter_buffIbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matchFilter_buffIcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    buffIn_data_V_U : component matchFilter_buffIbkb
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffIn_data_V_address0,
        ce0 => buffIn_data_V_ce0,
        we0 => buffIn_data_V_we0,
        d0 => buffIn_data_V_d0,
        q0 => buffIn_data_V_q0);

    buffIn_last_V_U : component matchFilter_buffIcud
    generic map (
        DataWidth => 1,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffIn_last_V_address0,
        ce0 => buffIn_last_V_ce0,
        we0 => buffIn_last_V_we0,
        d0 => buffIn_last_V_d0,
        q0 => buffIn_last_V_q0);

    matchFilter_mux_1dEe_U0 : component matchFilter_mux_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 16,
        din65_WIDTH => 16,
        din66_WIDTH => 16,
        din67_WIDTH => 16,
        din68_WIDTH => 16,
        din69_WIDTH => 16,
        din70_WIDTH => 16,
        din71_WIDTH => 16,
        din72_WIDTH => 16,
        din73_WIDTH => 16,
        din74_WIDTH => 16,
        din75_WIDTH => 16,
        din76_WIDTH => 16,
        din77_WIDTH => 16,
        din78_WIDTH => 16,
        din79_WIDTH => 16,
        din80_WIDTH => 16,
        din81_WIDTH => 16,
        din82_WIDTH => 16,
        din83_WIDTH => 16,
        din84_WIDTH => 16,
        din85_WIDTH => 16,
        din86_WIDTH => 16,
        din87_WIDTH => 16,
        din88_WIDTH => 16,
        din89_WIDTH => 16,
        din90_WIDTH => 16,
        din91_WIDTH => 16,
        din92_WIDTH => 16,
        din93_WIDTH => 16,
        din94_WIDTH => 16,
        din95_WIDTH => 16,
        din96_WIDTH => 16,
        din97_WIDTH => 16,
        din98_WIDTH => 16,
        din99_WIDTH => 16,
        din100_WIDTH => 16,
        din101_WIDTH => 16,
        din102_WIDTH => 16,
        din103_WIDTH => 16,
        din104_WIDTH => 16,
        din105_WIDTH => 16,
        din106_WIDTH => 16,
        din107_WIDTH => 16,
        din108_WIDTH => 16,
        din109_WIDTH => 16,
        din110_WIDTH => 16,
        din111_WIDTH => 16,
        din112_WIDTH => 16,
        din113_WIDTH => 16,
        din114_WIDTH => 16,
        din115_WIDTH => 16,
        din116_WIDTH => 16,
        din117_WIDTH => 16,
        din118_WIDTH => 16,
        din119_WIDTH => 16,
        din120_WIDTH => 16,
        din121_WIDTH => 16,
        din122_WIDTH => 16,
        din123_WIDTH => 16,
        din124_WIDTH => 16,
        din125_WIDTH => 16,
        din126_WIDTH => 16,
        din127_WIDTH => 16,
        din128_WIDTH => 16,
        din129_WIDTH => 7,
        dout_WIDTH => 16)
    port map (
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv16_0,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => ap_const_lv16_0,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => ap_const_lv16_0,
        din25 => ap_const_lv16_0,
        din26 => ap_const_lv16_0,
        din27 => ap_const_lv16_0,
        din28 => ap_const_lv16_0,
        din29 => ap_const_lv16_0,
        din30 => ap_const_lv16_0,
        din31 => ap_const_lv16_0,
        din32 => ap_const_lv16_0,
        din33 => ap_const_lv16_0,
        din34 => ap_const_lv16_0,
        din35 => ap_const_lv16_0,
        din36 => ap_const_lv16_0,
        din37 => ap_const_lv16_0,
        din38 => ap_const_lv16_0,
        din39 => ap_const_lv16_0,
        din40 => ap_const_lv16_0,
        din41 => ap_const_lv16_0,
        din42 => ap_const_lv16_0,
        din43 => ap_const_lv16_0,
        din44 => ap_const_lv16_0,
        din45 => ap_const_lv16_0,
        din46 => ap_const_lv16_0,
        din47 => ap_const_lv16_0,
        din48 => ap_const_lv16_0,
        din49 => ap_const_lv16_0,
        din50 => ap_const_lv16_0,
        din51 => ap_const_lv16_0,
        din52 => ap_const_lv16_0,
        din53 => ap_const_lv16_0,
        din54 => ap_const_lv16_0,
        din55 => ap_const_lv16_0,
        din56 => ap_const_lv16_0,
        din57 => ap_const_lv16_0,
        din58 => ap_const_lv16_0,
        din59 => ap_const_lv16_0,
        din60 => ap_const_lv16_0,
        din61 => ap_const_lv16_0,
        din62 => ap_const_lv16_0,
        din63 => ap_const_lv16_0,
        din64 => ap_const_lv16_0,
        din65 => ap_const_lv16_1,
        din66 => ap_const_lv16_0,
        din67 => ap_const_lv16_0,
        din68 => ap_const_lv16_0,
        din69 => ap_const_lv16_0,
        din70 => ap_const_lv16_0,
        din71 => ap_const_lv16_0,
        din72 => ap_const_lv16_0,
        din73 => ap_const_lv16_0,
        din74 => ap_const_lv16_0,
        din75 => ap_const_lv16_0,
        din76 => ap_const_lv16_0,
        din77 => ap_const_lv16_0,
        din78 => ap_const_lv16_0,
        din79 => ap_const_lv16_0,
        din80 => ap_const_lv16_0,
        din81 => ap_const_lv16_0,
        din82 => ap_const_lv16_0,
        din83 => ap_const_lv16_0,
        din84 => ap_const_lv16_0,
        din85 => ap_const_lv16_0,
        din86 => ap_const_lv16_0,
        din87 => ap_const_lv16_0,
        din88 => ap_const_lv16_0,
        din89 => ap_const_lv16_0,
        din90 => ap_const_lv16_0,
        din91 => ap_const_lv16_0,
        din92 => ap_const_lv16_0,
        din93 => ap_const_lv16_0,
        din94 => ap_const_lv16_0,
        din95 => ap_const_lv16_0,
        din96 => ap_const_lv16_0,
        din97 => ap_const_lv16_0,
        din98 => ap_const_lv16_0,
        din99 => ap_const_lv16_0,
        din100 => ap_const_lv16_0,
        din101 => ap_const_lv16_0,
        din102 => ap_const_lv16_0,
        din103 => ap_const_lv16_0,
        din104 => ap_const_lv16_0,
        din105 => ap_const_lv16_0,
        din106 => ap_const_lv16_0,
        din107 => ap_const_lv16_0,
        din108 => ap_const_lv16_0,
        din109 => ap_const_lv16_0,
        din110 => ap_const_lv16_0,
        din111 => ap_const_lv16_0,
        din112 => ap_const_lv16_0,
        din113 => ap_const_lv16_0,
        din114 => ap_const_lv16_0,
        din115 => ap_const_lv16_0,
        din116 => ap_const_lv16_0,
        din117 => ap_const_lv16_0,
        din118 => ap_const_lv16_0,
        din119 => ap_const_lv16_0,
        din120 => ap_const_lv16_0,
        din121 => ap_const_lv16_0,
        din122 => ap_const_lv16_0,
        din123 => ap_const_lv16_0,
        din124 => ap_const_lv16_0,
        din125 => ap_const_lv16_0,
        din126 => ap_const_lv16_0,
        din127 => ap_const_lv16_0,
        din128 => ap_const_lv16_0,
        din129 => tmp_3_reg_562,
        dout => tmp_1_fu_240_p130);

    matchFilter_mac_meOg_U1 : component matchFilter_mac_meOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_501_p0,
        din1 => tmp_1_fu_240_p130,
        din2 => p_1_i_reg_153,
        ce => ap_const_logic_1,
        dout => grp_fu_501_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_V_data_V_0_ack_out) and (ap_const_logic_1 = in_V_data_V_0_vld_out))) then 
                                        in_V_data_V_0_sel_rd <= not(in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_V_data_V_0_vld_in) and (ap_const_logic_1 = in_V_data_V_0_ack_in))) then 
                                        in_V_data_V_0_sel_wr <= not(in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_V_data_V_0_vld_in) and (ap_const_logic_1 = in_V_data_V_0_ack_out) and (in_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_V_data_V_0_vld_in) and (in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_V_data_V_0_vld_in) and (ap_const_logic_0 = in_V_data_V_0_ack_out) and (in_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_V_data_V_0_ack_out) and (in_V_data_V_0_state = ap_const_lv2_1)))) then 
                    in_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_V_data_V_0_vld_in) and (in_V_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = in_V_data_V_0_ack_out) and (in_V_data_V_0_state = ap_const_lv2_1)) or ((in_V_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = in_V_data_V_0_vld_in) and (ap_const_logic_0 = in_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = in_V_data_V_0_vld_in) and (ap_const_logic_1 = in_V_data_V_0_ack_out)))))) then 
                    in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_V_last_V_0_ack_out) and (ap_const_logic_1 = in_V_last_V_0_vld_out))) then 
                                        in_V_last_V_0_sel_rd <= not(in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_V_last_V_0_vld_in) and (ap_const_logic_1 = in_V_last_V_0_ack_in))) then 
                                        in_V_last_V_0_sel_wr <= not(in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_V_last_V_0_vld_in) and (ap_const_logic_1 = in_V_last_V_0_ack_out) and (ap_const_lv2_3 = in_V_last_V_0_state)) or ((ap_const_logic_0 = in_V_last_V_0_vld_in) and (ap_const_lv2_2 = in_V_last_V_0_state)))) then 
                    in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_V_last_V_0_vld_in) and (ap_const_logic_0 = in_V_last_V_0_ack_out) and (ap_const_lv2_3 = in_V_last_V_0_state)) or ((ap_const_logic_0 = in_V_last_V_0_ack_out) and (ap_const_lv2_1 = in_V_last_V_0_state)))) then 
                    in_V_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_V_last_V_0_vld_in) and (ap_const_lv2_2 = in_V_last_V_0_state)) or ((ap_const_logic_1 = in_V_last_V_0_ack_out) and (ap_const_lv2_1 = in_V_last_V_0_state)) or ((ap_const_lv2_3 = in_V_last_V_0_state) and not(((ap_const_logic_1 = in_V_last_V_0_vld_in) and (ap_const_logic_0 = in_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = in_V_last_V_0_vld_in) and (ap_const_logic_1 = in_V_last_V_0_ack_out)))))) then 
                    in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_data_V_1_ack_out) and (ap_const_logic_1 = out_V_data_V_1_vld_out))) then 
                                        out_V_data_V_1_sel_rd <= not(out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_data_V_1_vld_in) and (ap_const_logic_1 = out_V_data_V_1_ack_in))) then 
                                        out_V_data_V_1_sel_wr <= not(out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_V_data_V_1_vld_in) and (ap_const_logic_1 = out_V_data_V_1_ack_out) and (ap_const_lv2_3 = out_V_data_V_1_state)) or ((ap_const_logic_0 = out_V_data_V_1_vld_in) and (ap_const_lv2_2 = out_V_data_V_1_state)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_V_data_V_1_vld_in) and (ap_const_logic_0 = out_V_data_V_1_ack_out) and (ap_const_lv2_3 = out_V_data_V_1_state)) or ((ap_const_logic_0 = out_V_data_V_1_ack_out) and (ap_const_lv2_1 = out_V_data_V_1_state)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_V_data_V_1_vld_in) and (ap_const_lv2_2 = out_V_data_V_1_state)) or ((ap_const_logic_1 = out_V_data_V_1_ack_out) and (ap_const_lv2_1 = out_V_data_V_1_state)) or ((ap_const_lv2_3 = out_V_data_V_1_state) and not(((ap_const_logic_1 = out_V_data_V_1_vld_in) and (ap_const_logic_0 = out_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = out_V_data_V_1_vld_in) and (ap_const_logic_1 = out_V_data_V_1_ack_out)))))) then 
                    out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_last_V_1_ack_out) and (ap_const_logic_1 = out_V_last_V_1_vld_out))) then 
                                        out_V_last_V_1_sel_rd <= not(out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_last_V_1_vld_in) and (ap_const_logic_1 = out_V_last_V_1_ack_in))) then 
                                        out_V_last_V_1_sel_wr <= not(out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_V_last_V_1_vld_in) and (ap_const_logic_1 = out_V_last_V_1_ack_out) and (ap_const_lv2_3 = out_V_last_V_1_state)) or ((ap_const_logic_0 = out_V_last_V_1_vld_in) and (ap_const_lv2_2 = out_V_last_V_1_state)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_V_last_V_1_vld_in) and (ap_const_logic_0 = out_V_last_V_1_ack_out) and (ap_const_lv2_3 = out_V_last_V_1_state)) or ((ap_const_logic_0 = out_V_last_V_1_ack_out) and (ap_const_lv2_1 = out_V_last_V_1_state)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_V_last_V_1_vld_in) and (ap_const_lv2_2 = out_V_last_V_1_state)) or ((ap_const_logic_1 = out_V_last_V_1_ack_out) and (ap_const_lv2_1 = out_V_last_V_1_state)) or ((ap_const_lv2_3 = out_V_last_V_1_state) and not(((ap_const_logic_1 = out_V_last_V_1_vld_in) and (ap_const_logic_0 = out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = out_V_last_V_1_vld_in) and (ap_const_logic_1 = out_V_last_V_1_ack_out)))))) then 
                    out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    a_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                a_reg_142 <= a_1_reg_529;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                a_reg_142 <= ap_const_lv7_7F;
            end if; 
        end if;
    end process;

    b_i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                b_i_reg_165 <= b_reg_552;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2))) then 
                b_i_reg_165 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_1_i_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_1_i_reg_153 <= grp_fu_501_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2))) then 
                p_1_i_reg_153 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_fu_188_p2))) then
                a_1_reg_529 <= a_1_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    a_cast2_reg_520(6 downto 0) <= a_cast2_fu_184_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_io = ap_const_boolean_0))) then
                b_reg_552 <= b_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                buffIn_data_V_load_reg_544 <= buffIn_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_V_data_V_0_load_A)) then
                in_V_data_V_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_V_data_V_0_load_B)) then
                in_V_data_V_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_V_last_V_0_load_A)) then
                in_V_last_V_0_payload_A <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_V_last_V_0_load_B)) then
                in_V_last_V_0_payload_B <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_data_V_1_load_A)) then
                out_V_data_V_1_payload_A <= p_Result_s_fu_227_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_data_V_1_load_B)) then
                out_V_data_V_1_payload_B <= p_Result_s_fu_227_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_last_V_1_load_A)) then
                out_V_last_V_1_payload_A <= tmp_last_V_reg_514;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_last_V_1_load_B)) then
                out_V_last_V_1_payload_B <= tmp_last_V_reg_514;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_io = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_fu_211_p2))) then
                tmp_3_reg_562 <= tmp_3_fu_223_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_data_V_reg_509 <= in_V_data_V_0_data_out;
                tmp_last_V_reg_514 <= in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    a_cast2_reg_520(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (in_V_data_V_0_vld_out, out_V_data_V_1_ack_in, out_V_last_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state6, exitcond_i_fu_211_p2, ap_CS_fsm_state10, ap_CS_fsm_state3, tmp_fu_188_p2, ap_block_state6_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_i_fu_211_p2) and (ap_block_state6_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_io = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_fu_211_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = out_V_data_V_1_ack_in) or (ap_const_logic_0 = out_V_last_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    a_1_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_1_fu_194_p2),32));
    a_1_fu_194_p2 <= std_logic_vector(unsigned(a_reg_142) + unsigned(ap_const_lv7_7F));
    a_cast2_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_142),32));
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_assign_proc : process(out_V_data_V_1_ack_in, out_V_last_V_1_ack_in)
    begin
                ap_block_state10 <= ((ap_const_logic_0 = out_V_data_V_1_ack_in) or (ap_const_logic_0 = out_V_last_V_1_ack_in));
    end process;


    ap_block_state6_io_assign_proc : process(out_V_data_V_1_ack_in, exitcond_i_fu_211_p2)
    begin
                ap_block_state6_io <= ((ap_const_lv1_1 = exitcond_i_fu_211_p2) and (ap_const_logic_0 = out_V_data_V_1_ack_in));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_fu_217_p2 <= std_logic_vector(unsigned(b_i_reg_165) + unsigned(ap_const_lv8_1));
    b_i_cast1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_i_reg_165),32));

    buffIn_data_V_address0_assign_proc : process(ap_CS_fsm_state6, a_cast2_reg_520, ap_CS_fsm_state3, tmp_fu_188_p2, ap_CS_fsm_state5, a_1_cast_fu_200_p1, b_i_cast1_fu_206_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffIn_data_V_address0 <= b_i_cast1_fu_206_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffIn_data_V_address0 <= a_cast2_reg_520(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2))) then 
            buffIn_data_V_address0 <= ap_const_lv32_0(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_fu_188_p2))) then 
            buffIn_data_V_address0 <= a_1_cast_fu_200_p1(7 - 1 downto 0);
        else 
            buffIn_data_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    buffIn_data_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, tmp_fu_188_p2, ap_block_state6_io, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_fu_188_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2)))) then 
            buffIn_data_V_ce0 <= ap_const_logic_1;
        else 
            buffIn_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffIn_data_V_d0_assign_proc : process(tmp_data_V_reg_509, ap_CS_fsm_state3, tmp_fu_188_p2, buffIn_data_V_load_reg_544, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffIn_data_V_d0 <= buffIn_data_V_load_reg_544;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2))) then 
            buffIn_data_V_d0 <= tmp_data_V_reg_509;
        else 
            buffIn_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffIn_data_V_we0_assign_proc : process(ap_CS_fsm_state3, tmp_fu_188_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2)))) then 
            buffIn_data_V_we0 <= ap_const_logic_1;
        else 
            buffIn_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffIn_last_V_address0_assign_proc : process(a_cast2_reg_520, ap_CS_fsm_state3, tmp_fu_188_p2, ap_CS_fsm_state4, a_1_cast_fu_200_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_last_V_address0 <= a_cast2_reg_520(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2))) then 
            buffIn_last_V_address0 <= ap_const_lv32_0(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_fu_188_p2))) then 
            buffIn_last_V_address0 <= a_1_cast_fu_200_p1(7 - 1 downto 0);
        else 
            buffIn_last_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    buffIn_last_V_ce0_assign_proc : process(ap_CS_fsm_state3, tmp_fu_188_p2, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_fu_188_p2)) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2)))) then 
            buffIn_last_V_ce0 <= ap_const_logic_1;
        else 
            buffIn_last_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffIn_last_V_d0_assign_proc : process(tmp_last_V_reg_514, ap_CS_fsm_state3, tmp_fu_188_p2, ap_CS_fsm_state4, buffIn_last_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_last_V_d0 <= buffIn_last_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2))) then 
            buffIn_last_V_d0 <= tmp_last_V_reg_514;
        else 
            buffIn_last_V_d0 <= "X";
        end if; 
    end process;


    buffIn_last_V_we0_assign_proc : process(ap_CS_fsm_state3, tmp_fu_188_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_188_p2)))) then 
            buffIn_last_V_we0 <= ap_const_logic_1;
        else 
            buffIn_last_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_211_p2 <= "1" when (b_i_reg_165 = ap_const_lv8_80) else "0";
    grp_fu_501_p0 <= buffIn_data_V_q0(16 - 1 downto 0);
    in_V_data_V_0_ack_in <= in_V_data_V_0_state(1);

    in_V_data_V_0_ack_out_assign_proc : process(in_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_V_data_V_0_data_out_assign_proc : process(in_V_data_V_0_payload_A, in_V_data_V_0_payload_B, in_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = in_V_data_V_0_sel)) then 
            in_V_data_V_0_data_out <= in_V_data_V_0_payload_B;
        else 
            in_V_data_V_0_data_out <= in_V_data_V_0_payload_A;
        end if; 
    end process;

    in_V_data_V_0_load_A <= (in_V_data_V_0_state_cmp_full and not(in_V_data_V_0_sel_wr));
    in_V_data_V_0_load_B <= (in_V_data_V_0_sel_wr and in_V_data_V_0_state_cmp_full);
    in_V_data_V_0_sel <= in_V_data_V_0_sel_rd;
    in_V_data_V_0_state_cmp_full <= '0' when (in_V_data_V_0_state = ap_const_lv2_1) else '1';
    in_V_data_V_0_vld_in <= in_r_TVALID;
    in_V_data_V_0_vld_out <= in_V_data_V_0_state(0);
    in_V_last_V_0_ack_in <= in_V_last_V_0_state(1);

    in_V_last_V_0_ack_out_assign_proc : process(in_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_V_last_V_0_data_out_assign_proc : process(in_V_last_V_0_payload_A, in_V_last_V_0_payload_B, in_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = in_V_last_V_0_sel)) then 
            in_V_last_V_0_data_out <= in_V_last_V_0_payload_B;
        else 
            in_V_last_V_0_data_out <= in_V_last_V_0_payload_A;
        end if; 
    end process;

    in_V_last_V_0_load_A <= (in_V_last_V_0_state_cmp_full and not(in_V_last_V_0_sel_wr));
    in_V_last_V_0_load_B <= (in_V_last_V_0_sel_wr and in_V_last_V_0_state_cmp_full);
    in_V_last_V_0_sel <= in_V_last_V_0_sel_rd;
    in_V_last_V_0_state_cmp_full <= '0' when (in_V_last_V_0_state = ap_const_lv2_1) else '1';
    in_V_last_V_0_vld_in <= in_r_TVALID;
    in_V_last_V_0_vld_out <= in_V_last_V_0_state(0);

    in_r_TDATA_blk_n_assign_proc : process(in_V_data_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_TDATA_blk_n <= in_V_data_V_0_state(0);
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= in_V_last_V_0_state(1);
    out_V_data_V_1_ack_in <= out_V_data_V_1_state(1);
    out_V_data_V_1_ack_out <= out_r_TREADY;

    out_V_data_V_1_data_out_assign_proc : process(out_V_data_V_1_payload_A, out_V_data_V_1_payload_B, out_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_V_data_V_1_sel)) then 
            out_V_data_V_1_data_out <= out_V_data_V_1_payload_B;
        else 
            out_V_data_V_1_data_out <= out_V_data_V_1_payload_A;
        end if; 
    end process;

    out_V_data_V_1_load_A <= (out_V_data_V_1_state_cmp_full and not(out_V_data_V_1_sel_wr));
    out_V_data_V_1_load_B <= (out_V_data_V_1_sel_wr and out_V_data_V_1_state_cmp_full);
    out_V_data_V_1_sel <= out_V_data_V_1_sel_rd;
    out_V_data_V_1_state_cmp_full <= '0' when (out_V_data_V_1_state = ap_const_lv2_1) else '1';

    out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond_i_fu_211_p2, ap_block_state6_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_i_fu_211_p2) and (ap_block_state6_io = ap_const_boolean_0))) then 
            out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_data_V_1_vld_out <= out_V_data_V_1_state(0);
    out_V_last_V_1_ack_in <= out_V_last_V_1_state(1);
    out_V_last_V_1_ack_out <= out_r_TREADY;

    out_V_last_V_1_data_out_assign_proc : process(out_V_last_V_1_payload_A, out_V_last_V_1_payload_B, out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_V_last_V_1_sel)) then 
            out_V_last_V_1_data_out <= out_V_last_V_1_payload_B;
        else 
            out_V_last_V_1_data_out <= out_V_last_V_1_payload_A;
        end if; 
    end process;

    out_V_last_V_1_load_A <= (out_V_last_V_1_state_cmp_full and not(out_V_last_V_1_sel_wr));
    out_V_last_V_1_load_B <= (out_V_last_V_1_sel_wr and out_V_last_V_1_state_cmp_full);
    out_V_last_V_1_sel <= out_V_last_V_1_sel_rd;
    out_V_last_V_1_state_cmp_full <= '0' when (out_V_last_V_1_state = ap_const_lv2_1) else '1';

    out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond_i_fu_211_p2, ap_block_state6_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_i_fu_211_p2) and (ap_block_state6_io = ap_const_boolean_0))) then 
            out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_last_V_1_vld_out <= out_V_last_V_1_state(0);
    out_r_TDATA <= out_V_data_V_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(out_V_data_V_1_state, ap_CS_fsm_state6, exitcond_i_fu_211_p2, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_i_fu_211_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_TDATA_blk_n <= out_V_data_V_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST <= out_V_last_V_1_data_out;
    out_r_TVALID <= out_V_last_V_1_state(0);
    p_Result_s_fu_227_p3 <= (ap_const_lv16_0 & p_1_i_reg_153);
    tmp_3_fu_223_p1 <= b_i_reg_165(7 - 1 downto 0);
    tmp_fu_188_p2 <= "1" when (a_reg_142 = ap_const_lv7_0) else "0";
end behav;
