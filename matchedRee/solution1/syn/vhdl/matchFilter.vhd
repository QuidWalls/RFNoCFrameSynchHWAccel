-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matchFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of matchFilter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matchFilter,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.152000,HLS_SYN_LAT=641,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=254,HLS_SYN_LUT=486}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_0_vld_in : STD_LOGIC;
    signal in_data_V_0_vld_out : STD_LOGIC;
    signal in_data_V_0_ack_in : STD_LOGIC;
    signal in_data_V_0_ack_out : STD_LOGIC;
    signal in_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_V_0_sel : STD_LOGIC;
    signal in_data_V_0_load_A : STD_LOGIC;
    signal in_data_V_0_load_B : STD_LOGIC;
    signal in_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_vld_in : STD_LOGIC;
    signal in_last_V_0_vld_out : STD_LOGIC;
    signal in_last_V_0_ack_in : STD_LOGIC;
    signal in_last_V_0_ack_out : STD_LOGIC;
    signal in_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_sel_rd : STD_LOGIC := '0';
    signal in_last_V_0_sel_wr : STD_LOGIC := '0';
    signal in_last_V_0_sel : STD_LOGIC;
    signal in_last_V_0_load_A : STD_LOGIC;
    signal in_last_V_0_load_B : STD_LOGIC;
    signal in_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_last_V_0_state_cmp_full : STD_LOGIC;
    signal out_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V_1_vld_in : STD_LOGIC;
    signal out_data_V_1_vld_out : STD_LOGIC;
    signal out_data_V_1_ack_in : STD_LOGIC;
    signal out_data_V_1_ack_out : STD_LOGIC;
    signal out_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_V_1_sel : STD_LOGIC;
    signal out_data_V_1_load_A : STD_LOGIC;
    signal out_data_V_1_load_B : STD_LOGIC;
    signal out_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_vld_in : STD_LOGIC;
    signal out_last_V_1_vld_out : STD_LOGIC;
    signal out_last_V_1_ack_in : STD_LOGIC;
    signal out_last_V_1_ack_out : STD_LOGIC;
    signal out_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_last_V_1_sel : STD_LOGIC;
    signal out_last_V_1_load_A : STD_LOGIC;
    signal out_last_V_1_load_B : STD_LOGIC;
    signal out_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_last_V_1_state_cmp_full : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_i_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal a_1_fu_200_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_1_reg_283 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffIn_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffIn_data_V_load_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal buffIn_last_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffIn_last_V_load_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal p_Result_s_fu_245_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempI_V_fu_268_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tempQ_V_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffIn_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffIn_data_V_ce0 : STD_LOGIC;
    signal buffIn_data_V_we0 : STD_LOGIC;
    signal buffIn_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffIn_last_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffIn_last_V_ce0 : STD_LOGIC;
    signal buffIn_last_V_we0 : STD_LOGIC;
    signal buffIn_last_V_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_reg_147 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Val2_3_reg_159 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_171 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_i_reg_183 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal p_Val2_2_fu_254_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_264_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component matchFilter_buffIbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matchFilter_buffIcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    buffIn_data_V_U : component matchFilter_buffIbkb
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffIn_data_V_address0,
        ce0 => buffIn_data_V_ce0,
        we0 => buffIn_data_V_we0,
        d0 => buffIn_data_V_d0,
        q0 => buffIn_data_V_q0);

    buffIn_last_V_U : component matchFilter_buffIcud
    generic map (
        DataWidth => 1,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffIn_last_V_address0,
        ce0 => buffIn_last_V_ce0,
        we0 => buffIn_last_V_we0,
        d0 => buffIn_last_V_d0,
        q0 => buffIn_last_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_V_0_ack_out = ap_const_logic_1) and (in_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_data_V_0_sel_rd <= not(in_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_V_0_ack_in = ap_const_logic_1) and (in_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_data_V_0_sel_wr <= not(in_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_V_0_state = ap_const_lv2_2) and (in_data_V_0_vld_in = ap_const_logic_0)) or ((in_data_V_0_state = ap_const_lv2_3) and (in_data_V_0_vld_in = ap_const_logic_0) and (in_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_data_V_0_state = ap_const_lv2_1) and (in_data_V_0_ack_out = ap_const_logic_0)) or ((in_data_V_0_state = ap_const_lv2_3) and (in_data_V_0_ack_out = ap_const_logic_0) and (in_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_V_0_vld_in = ap_const_logic_0) and (in_data_V_0_ack_out = ap_const_logic_1))) and not(((in_data_V_0_ack_out = ap_const_logic_0) and (in_data_V_0_vld_in = ap_const_logic_1))) and (in_data_V_0_state = ap_const_lv2_3)) or ((in_data_V_0_state = ap_const_lv2_1) and (in_data_V_0_ack_out = ap_const_logic_1)) or ((in_data_V_0_state = ap_const_lv2_2) and (in_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_last_V_0_ack_out = ap_const_logic_1) and (in_last_V_0_vld_out = ap_const_logic_1))) then 
                                        in_last_V_0_sel_rd <= not(in_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_last_V_0_ack_in = ap_const_logic_1) and (in_last_V_0_vld_in = ap_const_logic_1))) then 
                                        in_last_V_0_sel_wr <= not(in_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_last_V_0_state = ap_const_lv2_2) and (in_last_V_0_vld_in = ap_const_logic_0)) or ((in_last_V_0_state = ap_const_lv2_3) and (in_last_V_0_vld_in = ap_const_logic_0) and (in_last_V_0_ack_out = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_2;
                elsif ((((in_last_V_0_state = ap_const_lv2_1) and (in_last_V_0_ack_out = ap_const_logic_0)) or ((in_last_V_0_state = ap_const_lv2_3) and (in_last_V_0_ack_out = ap_const_logic_0) and (in_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_last_V_0_vld_in = ap_const_logic_0) and (in_last_V_0_ack_out = ap_const_logic_1))) and not(((in_last_V_0_ack_out = ap_const_logic_0) and (in_last_V_0_vld_in = ap_const_logic_1))) and (in_last_V_0_state = ap_const_lv2_3)) or ((in_last_V_0_state = ap_const_lv2_1) and (in_last_V_0_ack_out = ap_const_logic_1)) or ((in_last_V_0_state = ap_const_lv2_2) and (in_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_V_1_ack_out = ap_const_logic_1) and (out_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_data_V_1_sel_rd <= not(out_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_V_1_ack_in = ap_const_logic_1) and (out_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_data_V_1_sel_wr <= not(out_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_V_1_state = ap_const_lv2_2) and (out_data_V_1_vld_in = ap_const_logic_0)) or ((out_data_V_1_state = ap_const_lv2_3) and (out_data_V_1_vld_in = ap_const_logic_0) and (out_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_data_V_1_state = ap_const_lv2_1) and (out_data_V_1_ack_out = ap_const_logic_0)) or ((out_data_V_1_state = ap_const_lv2_3) and (out_data_V_1_ack_out = ap_const_logic_0) and (out_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_V_1_vld_in = ap_const_logic_0) and (out_data_V_1_ack_out = ap_const_logic_1))) and not(((out_data_V_1_ack_out = ap_const_logic_0) and (out_data_V_1_vld_in = ap_const_logic_1))) and (out_data_V_1_state = ap_const_lv2_3)) or ((out_data_V_1_state = ap_const_lv2_1) and (out_data_V_1_ack_out = ap_const_logic_1)) or ((out_data_V_1_state = ap_const_lv2_2) and (out_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_last_V_1_ack_out = ap_const_logic_1) and (out_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_last_V_1_sel_rd <= not(out_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_last_V_1_ack_in = ap_const_logic_1) and (out_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_last_V_1_sel_wr <= not(out_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_last_V_1_state = ap_const_lv2_2) and (out_last_V_1_vld_in = ap_const_logic_0)) or ((out_last_V_1_state = ap_const_lv2_3) and (out_last_V_1_vld_in = ap_const_logic_0) and (out_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_last_V_1_state = ap_const_lv2_1) and (out_last_V_1_ack_out = ap_const_logic_0)) or ((out_last_V_1_state = ap_const_lv2_3) and (out_last_V_1_ack_out = ap_const_logic_0) and (out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_last_V_1_vld_in = ap_const_logic_0) and (out_last_V_1_ack_out = ap_const_logic_1))) and not(((out_last_V_1_ack_out = ap_const_logic_0) and (out_last_V_1_vld_in = ap_const_logic_1))) and (out_last_V_1_state = ap_const_lv2_3)) or ((out_last_V_1_state = ap_const_lv2_1) and (out_last_V_1_ack_out = ap_const_logic_1)) or ((out_last_V_1_state = ap_const_lv2_2) and (out_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    a_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                a_reg_147 <= ap_const_lv7_7F;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                a_reg_147 <= a_1_reg_283;
            end if; 
        end if;
    end process;

    b_i_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                b_i_reg_183 <= b_reg_316;
            elsif (((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                b_i_reg_183 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_Val2_1_reg_171 <= tempI_V_fu_268_p2;
            elsif (((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_1_reg_171 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_Val2_3_reg_159 <= tempQ_V_fu_274_p2;
            elsif (((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_3_reg_159 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                a_1_reg_283 <= a_1_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                b_reg_316 <= b_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                buffIn_data_V_load_reg_298 <= buffIn_data_V_q0;
                buffIn_last_V_load_reg_303 <= buffIn_last_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_V_0_load_A = ap_const_logic_1)) then
                in_data_V_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_V_0_load_B = ap_const_logic_1)) then
                in_data_V_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_last_V_0_load_A = ap_const_logic_1)) then
                in_last_V_0_payload_A <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_last_V_0_load_B = ap_const_logic_1)) then
                in_last_V_0_payload_B <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_V_1_load_A = ap_const_logic_1)) then
                out_data_V_1_payload_A <= p_Result_s_fu_245_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_V_1_load_B = ap_const_logic_1)) then
                out_data_V_1_payload_B <= p_Result_s_fu_245_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_last_V_1_load_A = ap_const_logic_1)) then
                out_last_V_1_payload_A <= out_last_V_1_reg_308;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_last_V_1_load_B = ap_const_logic_1)) then
                out_last_V_1_payload_B <= out_last_V_1_reg_308;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                out_last_V_1_reg_308 <= in_last_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (in_data_V_0_vld_out, out_data_V_1_ack_in, out_last_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond_i_fu_228_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, tmp_fu_194_p2, ap_block_state6_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond_i_fu_228_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((exitcond_i_fu_228_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if ((not(((out_last_V_1_ack_in = ap_const_logic_0) or (out_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_1_fu_200_p2 <= std_logic_vector(unsigned(a_reg_147) + unsigned(ap_const_lv7_7F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state6_io_assign_proc : process(out_data_V_1_ack_in, exitcond_i_fu_228_p2)
    begin
                ap_block_state6_io <= ((exitcond_i_fu_228_p2 = ap_const_lv1_1) and (out_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(out_data_V_1_ack_in, out_last_V_1_ack_in)
    begin
                ap_block_state8 <= ((out_last_V_1_ack_in = ap_const_logic_0) or (out_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_fu_234_p2 <= std_logic_vector(unsigned(b_i_reg_183) + unsigned(ap_const_lv8_1));

    buffIn_data_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_4_fu_206_p1, tmp_s_fu_212_p1, tmp_2_i_fu_240_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffIn_data_V_address0 <= tmp_2_i_fu_240_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffIn_data_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_data_V_address0 <= tmp_s_fu_212_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffIn_data_V_address0 <= tmp_4_fu_206_p1(7 - 1 downto 0);
        else 
            buffIn_data_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    buffIn_data_V_ce0_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_block_state6_io, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            buffIn_data_V_ce0 <= ap_const_logic_1;
        else 
            buffIn_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffIn_data_V_d0_assign_proc : process(in_data_V_0_data_out, ap_CS_fsm_state5, buffIn_data_V_load_reg_298, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffIn_data_V_d0 <= in_data_V_0_data_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_data_V_d0 <= buffIn_data_V_load_reg_298;
        else 
            buffIn_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffIn_data_V_we0_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            buffIn_data_V_we0 <= ap_const_logic_1;
        else 
            buffIn_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffIn_last_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_4_fu_206_p1, tmp_s_fu_212_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffIn_last_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_last_V_address0 <= tmp_s_fu_212_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffIn_last_V_address0 <= tmp_4_fu_206_p1(7 - 1 downto 0);
        else 
            buffIn_last_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    buffIn_last_V_ce0_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            buffIn_last_V_ce0 <= ap_const_logic_1;
        else 
            buffIn_last_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffIn_last_V_d0_assign_proc : process(in_last_V_0_data_out, ap_CS_fsm_state5, buffIn_last_V_load_reg_303, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffIn_last_V_d0 <= in_last_V_0_data_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_last_V_d0 <= buffIn_last_V_load_reg_303;
        else 
            buffIn_last_V_d0 <= "X";
        end if; 
    end process;


    buffIn_last_V_we0_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            buffIn_last_V_we0 <= ap_const_logic_1;
        else 
            buffIn_last_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_228_p2 <= "1" when (b_i_reg_183 = ap_const_lv8_80) else "0";
    in_data_V_0_ack_in <= in_data_V_0_state(1);

    in_data_V_0_ack_out_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state5)
    begin
        if (((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_V_0_data_out_assign_proc : process(in_data_V_0_payload_A, in_data_V_0_payload_B, in_data_V_0_sel)
    begin
        if ((in_data_V_0_sel = ap_const_logic_1)) then 
            in_data_V_0_data_out <= in_data_V_0_payload_B;
        else 
            in_data_V_0_data_out <= in_data_V_0_payload_A;
        end if; 
    end process;

    in_data_V_0_load_A <= (in_data_V_0_state_cmp_full and not(in_data_V_0_sel_wr));
    in_data_V_0_load_B <= (in_data_V_0_state_cmp_full and in_data_V_0_sel_wr);
    in_data_V_0_sel <= in_data_V_0_sel_rd;
    in_data_V_0_state_cmp_full <= '0' when (in_data_V_0_state = ap_const_lv2_1) else '1';
    in_data_V_0_vld_in <= in_r_TVALID;
    in_data_V_0_vld_out <= in_data_V_0_state(0);
    in_last_V_0_ack_in <= in_last_V_0_state(1);

    in_last_V_0_ack_out_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state5)
    begin
        if (((in_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_last_V_0_data_out_assign_proc : process(in_last_V_0_payload_A, in_last_V_0_payload_B, in_last_V_0_sel)
    begin
        if ((in_last_V_0_sel = ap_const_logic_1)) then 
            in_last_V_0_data_out <= in_last_V_0_payload_B;
        else 
            in_last_V_0_data_out <= in_last_V_0_payload_A;
        end if; 
    end process;

    in_last_V_0_load_A <= (in_last_V_0_state_cmp_full and not(in_last_V_0_sel_wr));
    in_last_V_0_load_B <= (in_last_V_0_state_cmp_full and in_last_V_0_sel_wr);
    in_last_V_0_sel <= in_last_V_0_sel_rd;
    in_last_V_0_state_cmp_full <= '0' when (in_last_V_0_state = ap_const_lv2_1) else '1';
    in_last_V_0_vld_in <= in_r_TVALID;
    in_last_V_0_vld_out <= in_last_V_0_state(0);

    in_r_TDATA_blk_n_assign_proc : process(in_data_V_0_state, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_TDATA_blk_n <= in_data_V_0_state(0);
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= in_last_V_0_state(1);
    out_data_V_1_ack_in <= out_data_V_1_state(1);
    out_data_V_1_ack_out <= out_r_TREADY;

    out_data_V_1_data_out_assign_proc : process(out_data_V_1_payload_A, out_data_V_1_payload_B, out_data_V_1_sel)
    begin
        if ((out_data_V_1_sel = ap_const_logic_1)) then 
            out_data_V_1_data_out <= out_data_V_1_payload_B;
        else 
            out_data_V_1_data_out <= out_data_V_1_payload_A;
        end if; 
    end process;

    out_data_V_1_load_A <= (out_data_V_1_state_cmp_full and not(out_data_V_1_sel_wr));
    out_data_V_1_load_B <= (out_data_V_1_state_cmp_full and out_data_V_1_sel_wr);
    out_data_V_1_sel <= out_data_V_1_sel_rd;
    out_data_V_1_state_cmp_full <= '0' when (out_data_V_1_state = ap_const_lv2_1) else '1';

    out_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond_i_fu_228_p2, ap_block_state6_io)
    begin
        if (((exitcond_i_fu_228_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_V_1_vld_out <= out_data_V_1_state(0);
    out_last_V_1_ack_in <= out_last_V_1_state(1);
    out_last_V_1_ack_out <= out_r_TREADY;

    out_last_V_1_data_out_assign_proc : process(out_last_V_1_payload_A, out_last_V_1_payload_B, out_last_V_1_sel)
    begin
        if ((out_last_V_1_sel = ap_const_logic_1)) then 
            out_last_V_1_data_out <= out_last_V_1_payload_B;
        else 
            out_last_V_1_data_out <= out_last_V_1_payload_A;
        end if; 
    end process;

    out_last_V_1_load_A <= (out_last_V_1_state_cmp_full and not(out_last_V_1_sel_wr));
    out_last_V_1_load_B <= (out_last_V_1_state_cmp_full and out_last_V_1_sel_wr);
    out_last_V_1_sel <= out_last_V_1_sel_rd;
    out_last_V_1_state_cmp_full <= '0' when (out_last_V_1_state = ap_const_lv2_1) else '1';

    out_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state6, exitcond_i_fu_228_p2, ap_block_state6_io)
    begin
        if (((exitcond_i_fu_228_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_last_V_1_vld_out <= out_last_V_1_state(0);
    out_r_TDATA <= out_data_V_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(out_data_V_1_state, ap_CS_fsm_state6, exitcond_i_fu_228_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond_i_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            out_r_TDATA_blk_n <= out_data_V_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST <= out_last_V_1_data_out;
    out_r_TVALID <= out_last_V_1_state(0);
    p_Result_s_fu_245_p3 <= (p_Val2_1_reg_171 & p_Val2_3_reg_159);
    p_Val2_2_fu_254_p4 <= buffIn_data_V_q0(31 downto 16);
    p_Val2_4_fu_264_p1 <= buffIn_data_V_q0(16 - 1 downto 0);
    tempI_V_fu_268_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_171) + unsigned(p_Val2_2_fu_254_p4));
    tempQ_V_fu_274_p2 <= std_logic_vector(unsigned(p_Val2_3_reg_159) + unsigned(p_Val2_4_fu_264_p1));
    tmp_2_i_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_i_reg_183),64));
    tmp_4_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_1_fu_200_p2),64));
    tmp_fu_194_p2 <= "1" when (a_reg_147 = ap_const_lv7_0) else "0";
    tmp_s_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_147),64));
end behav;
