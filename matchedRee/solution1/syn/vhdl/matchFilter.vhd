-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matchFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of matchFilter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matchFilter,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.328000,HLS_SYN_LAT=514,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=464,HLS_SYN_LUT=451}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_0_vld_in : STD_LOGIC;
    signal in_data_V_0_vld_out : STD_LOGIC;
    signal in_data_V_0_ack_in : STD_LOGIC;
    signal in_data_V_0_ack_out : STD_LOGIC;
    signal in_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_V_0_sel : STD_LOGIC;
    signal in_data_V_0_load_A : STD_LOGIC;
    signal in_data_V_0_load_B : STD_LOGIC;
    signal in_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_vld_in : STD_LOGIC;
    signal in_last_V_0_vld_out : STD_LOGIC;
    signal in_last_V_0_ack_in : STD_LOGIC;
    signal in_last_V_0_ack_out : STD_LOGIC;
    signal in_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_sel_rd : STD_LOGIC := '0';
    signal in_last_V_0_sel_wr : STD_LOGIC := '0';
    signal in_last_V_0_sel : STD_LOGIC;
    signal in_last_V_0_load_A : STD_LOGIC;
    signal in_last_V_0_load_B : STD_LOGIC;
    signal in_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_last_V_0_state_cmp_full : STD_LOGIC;
    signal out_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V_1_vld_in : STD_LOGIC;
    signal out_data_V_1_vld_out : STD_LOGIC;
    signal out_data_V_1_ack_in : STD_LOGIC;
    signal out_data_V_1_ack_out : STD_LOGIC;
    signal out_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_V_1_sel : STD_LOGIC;
    signal out_data_V_1_load_A : STD_LOGIC;
    signal out_data_V_1_load_B : STD_LOGIC;
    signal out_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_vld_in : STD_LOGIC;
    signal out_last_V_1_vld_out : STD_LOGIC;
    signal out_last_V_1_ack_in : STD_LOGIC;
    signal out_last_V_1_ack_out : STD_LOGIC;
    signal out_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_last_V_1_sel : STD_LOGIC;
    signal out_last_V_1_load_A : STD_LOGIC;
    signal out_last_V_1_load_B : STD_LOGIC;
    signal out_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_last_V_1_state_cmp_full : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_i_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal a_cast2_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_cast2_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal a_1_fu_215_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_1_reg_422 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_445 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal p_Result_s_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempI_V_fu_401_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tempQ_V_fu_407_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffIn_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffIn_data_V_ce0 : STD_LOGIC;
    signal buffIn_data_V_we0 : STD_LOGIC;
    signal buffIn_data_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffIn_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffIn_last_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffIn_last_V_ce0 : STD_LOGIC;
    signal buffIn_last_V_we0 : STD_LOGIC;
    signal buffIn_last_V_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffIn_last_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_reg_159 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Val2_1_reg_170 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_182 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_i_reg_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_1_cast_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_i_cast1_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal tmp_3_fu_272_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_fu_254_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_i_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_282_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_fu_288_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_322_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_2_fu_304_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_3_fu_332_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_i_fu_338_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_3_i_fu_346_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_2_i_fu_296_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_trunc_i_fu_354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_9_fu_358_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_fu_371_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_389_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_3_fu_381_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_393_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component matchFilter_buffIbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matchFilter_buffIcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    buffIn_data_V_U : component matchFilter_buffIbkb
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffIn_data_V_address0,
        ce0 => buffIn_data_V_ce0,
        we0 => buffIn_data_V_we0,
        d0 => buffIn_data_V_d0,
        q0 => buffIn_data_V_q0);

    buffIn_last_V_U : component matchFilter_buffIcud
    generic map (
        DataWidth => 1,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffIn_last_V_address0,
        ce0 => buffIn_last_V_ce0,
        we0 => buffIn_last_V_we0,
        d0 => buffIn_last_V_d0,
        q0 => buffIn_last_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_data_V_0_ack_out) and (ap_const_logic_1 = in_data_V_0_vld_out))) then 
                                        in_data_V_0_sel_rd <= not(in_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_data_V_0_vld_in) and (ap_const_logic_1 = in_data_V_0_ack_in))) then 
                                        in_data_V_0_sel_wr <= not(in_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_data_V_0_vld_in) and (ap_const_logic_1 = in_data_V_0_ack_out) and (in_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_data_V_0_vld_in) and (in_data_V_0_state = ap_const_lv2_2)))) then 
                    in_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_data_V_0_vld_in) and (ap_const_logic_0 = in_data_V_0_ack_out) and (in_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_data_V_0_ack_out) and (in_data_V_0_state = ap_const_lv2_1)))) then 
                    in_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_data_V_0_vld_in) and (in_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = in_data_V_0_ack_out) and (in_data_V_0_state = ap_const_lv2_1)) or ((in_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = in_data_V_0_vld_in) and (ap_const_logic_0 = in_data_V_0_ack_out))) and not(((ap_const_logic_0 = in_data_V_0_vld_in) and (ap_const_logic_1 = in_data_V_0_ack_out)))))) then 
                    in_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_last_V_0_ack_out) and (ap_const_logic_1 = in_last_V_0_vld_out))) then 
                                        in_last_V_0_sel_rd <= not(in_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_last_V_0_vld_in) and (ap_const_logic_1 = in_last_V_0_ack_in))) then 
                                        in_last_V_0_sel_wr <= not(in_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_last_V_0_vld_in) and (ap_const_logic_1 = in_last_V_0_ack_out) and (ap_const_lv2_3 = in_last_V_0_state)) or ((ap_const_logic_0 = in_last_V_0_vld_in) and (ap_const_lv2_2 = in_last_V_0_state)))) then 
                    in_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_last_V_0_vld_in) and (ap_const_logic_0 = in_last_V_0_ack_out) and (ap_const_lv2_3 = in_last_V_0_state)) or ((ap_const_logic_0 = in_last_V_0_ack_out) and (ap_const_lv2_1 = in_last_V_0_state)))) then 
                    in_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_last_V_0_vld_in) and (ap_const_lv2_2 = in_last_V_0_state)) or ((ap_const_logic_1 = in_last_V_0_ack_out) and (ap_const_lv2_1 = in_last_V_0_state)) or ((ap_const_lv2_3 = in_last_V_0_state) and not(((ap_const_logic_1 = in_last_V_0_vld_in) and (ap_const_logic_0 = in_last_V_0_ack_out))) and not(((ap_const_logic_0 = in_last_V_0_vld_in) and (ap_const_logic_1 = in_last_V_0_ack_out)))))) then 
                    in_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_data_V_1_ack_out) and (ap_const_logic_1 = out_data_V_1_vld_out))) then 
                                        out_data_V_1_sel_rd <= not(out_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_data_V_1_vld_in) and (ap_const_logic_1 = out_data_V_1_ack_in))) then 
                                        out_data_V_1_sel_wr <= not(out_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_data_V_1_vld_in) and (ap_const_logic_1 = out_data_V_1_ack_out) and (ap_const_lv2_3 = out_data_V_1_state)) or ((ap_const_logic_0 = out_data_V_1_vld_in) and (ap_const_lv2_2 = out_data_V_1_state)))) then 
                    out_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_data_V_1_vld_in) and (ap_const_logic_0 = out_data_V_1_ack_out) and (ap_const_lv2_3 = out_data_V_1_state)) or ((ap_const_logic_0 = out_data_V_1_ack_out) and (ap_const_lv2_1 = out_data_V_1_state)))) then 
                    out_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_data_V_1_vld_in) and (ap_const_lv2_2 = out_data_V_1_state)) or ((ap_const_logic_1 = out_data_V_1_ack_out) and (ap_const_lv2_1 = out_data_V_1_state)) or ((ap_const_lv2_3 = out_data_V_1_state) and not(((ap_const_logic_1 = out_data_V_1_vld_in) and (ap_const_logic_0 = out_data_V_1_ack_out))) and not(((ap_const_logic_0 = out_data_V_1_vld_in) and (ap_const_logic_1 = out_data_V_1_ack_out)))))) then 
                    out_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_last_V_1_ack_out) and (ap_const_logic_1 = out_last_V_1_vld_out))) then 
                                        out_last_V_1_sel_rd <= not(out_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_last_V_1_vld_in) and (ap_const_logic_1 = out_last_V_1_ack_in))) then 
                                        out_last_V_1_sel_wr <= not(out_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_last_V_1_vld_in) and (ap_const_logic_1 = out_last_V_1_ack_out) and (ap_const_lv2_3 = out_last_V_1_state)) or ((ap_const_logic_0 = out_last_V_1_vld_in) and (ap_const_lv2_2 = out_last_V_1_state)))) then 
                    out_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_last_V_1_vld_in) and (ap_const_logic_0 = out_last_V_1_ack_out) and (ap_const_lv2_3 = out_last_V_1_state)) or ((ap_const_logic_0 = out_last_V_1_ack_out) and (ap_const_lv2_1 = out_last_V_1_state)))) then 
                    out_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_last_V_1_vld_in) and (ap_const_lv2_2 = out_last_V_1_state)) or ((ap_const_logic_1 = out_last_V_1_ack_out) and (ap_const_lv2_1 = out_last_V_1_state)) or ((ap_const_lv2_3 = out_last_V_1_state) and not(((ap_const_logic_1 = out_last_V_1_vld_in) and (ap_const_logic_0 = out_last_V_1_ack_out))) and not(((ap_const_logic_0 = out_last_V_1_vld_in) and (ap_const_logic_1 = out_last_V_1_ack_out)))))) then 
                    out_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    a_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                a_reg_159 <= ap_const_lv7_7F;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                a_reg_159 <= a_1_reg_422;
            end if; 
        end if;
    end process;

    b_i_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                b_i_reg_194 <= b_reg_445;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1))) then 
                b_i_reg_194 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_1_reg_170 <= tempQ_V_fu_407_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1))) then 
                p_Val2_1_reg_170 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_s_reg_182 <= tempI_V_fu_401_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1))) then 
                p_Val2_s_reg_182 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_209_p2))) then
                a_1_reg_422 <= a_1_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    a_cast2_reg_413(6 downto 0) <= a_cast2_fu_205_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_block_state5_io = ap_const_boolean_0))) then
                b_reg_445 <= b_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_data_V_0_load_A)) then
                in_data_V_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_data_V_0_load_B)) then
                in_data_V_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_last_V_0_load_A)) then
                in_last_V_0_payload_A <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_last_V_0_load_B)) then
                in_last_V_0_payload_B <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_data_V_1_load_A)) then
                out_data_V_1_payload_A <= p_Result_s_fu_366_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_data_V_1_load_B)) then
                out_data_V_1_payload_B <= p_Result_s_fu_366_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_last_V_1_load_A)) then
                out_last_V_1_payload_A <= out_last_V_1_reg_437;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_last_V_1_load_B)) then
                out_last_V_1_payload_B <= out_last_V_1_reg_437;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1))) then
                out_last_V_1_reg_437 <= in_last_V_0_data_out;
            end if;
        end if;
    end process;
    a_cast2_reg_413(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (in_data_V_0_vld_out, out_data_V_1_ack_in, out_last_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond_i_fu_242_p2, ap_CS_fsm_state7, ap_CS_fsm_state2, tmp_fu_209_p2, ap_block_state5_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_209_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_i_fu_242_p2) and (ap_block_state5_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_block_state5_io = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_fu_242_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = out_data_V_1_ack_in) or (ap_const_logic_0 = out_last_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    a_1_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_1_fu_215_p2),32));
    a_1_fu_215_p2 <= std_logic_vector(unsigned(a_reg_159) + unsigned(ap_const_lv7_7F));
    a_cast2_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_159),32));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state5_io_assign_proc : process(out_data_V_1_ack_in, exitcond_i_fu_242_p2)
    begin
                ap_block_state5_io <= ((ap_const_lv1_1 = exitcond_i_fu_242_p2) and (ap_const_logic_0 = out_data_V_1_ack_in));
    end process;


    ap_block_state7_assign_proc : process(out_data_V_1_ack_in, out_last_V_1_ack_in)
    begin
                ap_block_state7 <= ((ap_const_logic_0 = out_data_V_1_ack_in) or (ap_const_logic_0 = out_last_V_1_ack_in));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_fu_248_p2 <= std_logic_vector(unsigned(b_i_reg_194) + unsigned(ap_const_lv8_1));
    b_i_cast1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_i_reg_194),32));

    buffIn_data_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, a_cast2_reg_413, ap_CS_fsm_state2, ap_CS_fsm_state3, a_1_cast_fu_221_p1, b_i_cast1_fu_237_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffIn_data_V_address0 <= b_i_cast1_fu_237_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_data_V_address0 <= ap_const_lv32_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffIn_data_V_address0 <= a_cast2_reg_413(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffIn_data_V_address0 <= a_1_cast_fu_221_p1(7 - 1 downto 0);
        else 
            buffIn_data_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    buffIn_data_V_ce0_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_block_state5_io, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_block_state5_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffIn_data_V_ce0 <= ap_const_logic_1;
        else 
            buffIn_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffIn_data_V_d0_assign_proc : process(in_data_V_0_data_out, ap_CS_fsm_state4, buffIn_data_V_q0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_data_V_d0 <= in_data_V_0_data_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffIn_data_V_d0 <= buffIn_data_V_q0;
        else 
            buffIn_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffIn_data_V_we0_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffIn_data_V_we0 <= ap_const_logic_1;
        else 
            buffIn_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffIn_last_V_address0_assign_proc : process(ap_CS_fsm_state4, a_cast2_reg_413, ap_CS_fsm_state2, ap_CS_fsm_state3, a_1_cast_fu_221_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_last_V_address0 <= ap_const_lv32_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffIn_last_V_address0 <= a_cast2_reg_413(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffIn_last_V_address0 <= a_1_cast_fu_221_p1(7 - 1 downto 0);
        else 
            buffIn_last_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    buffIn_last_V_ce0_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffIn_last_V_ce0 <= ap_const_logic_1;
        else 
            buffIn_last_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffIn_last_V_d0_assign_proc : process(in_last_V_0_data_out, ap_CS_fsm_state4, buffIn_last_V_q0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffIn_last_V_d0 <= in_last_V_0_data_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffIn_last_V_d0 <= buffIn_last_V_q0;
        else 
            buffIn_last_V_d0 <= "X";
        end if; 
    end process;


    buffIn_last_V_we0_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffIn_last_V_we0 <= ap_const_logic_1;
        else 
            buffIn_last_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_242_p2 <= "1" when (b_i_reg_194 = ap_const_lv8_80) else "0";
    in_data_V_0_ack_in <= in_data_V_0_state(1);

    in_data_V_0_ack_out_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1))) then 
            in_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_V_0_data_out_assign_proc : process(in_data_V_0_payload_A, in_data_V_0_payload_B, in_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = in_data_V_0_sel)) then 
            in_data_V_0_data_out <= in_data_V_0_payload_B;
        else 
            in_data_V_0_data_out <= in_data_V_0_payload_A;
        end if; 
    end process;

    in_data_V_0_load_A <= (in_data_V_0_state_cmp_full and not(in_data_V_0_sel_wr));
    in_data_V_0_load_B <= (in_data_V_0_sel_wr and in_data_V_0_state_cmp_full);
    in_data_V_0_sel <= in_data_V_0_sel_rd;
    in_data_V_0_state_cmp_full <= '0' when (in_data_V_0_state = ap_const_lv2_1) else '1';
    in_data_V_0_vld_in <= in_r_TVALID;
    in_data_V_0_vld_out <= in_data_V_0_state(0);
    in_last_V_0_ack_in <= in_last_V_0_state(1);

    in_last_V_0_ack_out_assign_proc : process(in_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_data_V_0_vld_out = ap_const_logic_1))) then 
            in_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_last_V_0_data_out_assign_proc : process(in_last_V_0_payload_A, in_last_V_0_payload_B, in_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = in_last_V_0_sel)) then 
            in_last_V_0_data_out <= in_last_V_0_payload_B;
        else 
            in_last_V_0_data_out <= in_last_V_0_payload_A;
        end if; 
    end process;

    in_last_V_0_load_A <= (in_last_V_0_state_cmp_full and not(in_last_V_0_sel_wr));
    in_last_V_0_load_B <= (in_last_V_0_sel_wr and in_last_V_0_state_cmp_full);
    in_last_V_0_sel <= in_last_V_0_sel_rd;
    in_last_V_0_state_cmp_full <= '0' when (in_last_V_0_state = ap_const_lv2_1) else '1';
    in_last_V_0_vld_in <= in_r_TVALID;
    in_last_V_0_vld_out <= in_last_V_0_state(0);

    in_r_TDATA_blk_n_assign_proc : process(in_data_V_0_state, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_TDATA_blk_n <= in_data_V_0_state(0);
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= in_last_V_0_state(1);
        loc_V_1_trunc_i_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_3_i_fu_346_p3),16));

    out_data_V_1_ack_in <= out_data_V_1_state(1);
    out_data_V_1_ack_out <= out_r_TREADY;

    out_data_V_1_data_out_assign_proc : process(out_data_V_1_payload_A, out_data_V_1_payload_B, out_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_data_V_1_sel)) then 
            out_data_V_1_data_out <= out_data_V_1_payload_B;
        else 
            out_data_V_1_data_out <= out_data_V_1_payload_A;
        end if; 
    end process;

    out_data_V_1_load_A <= (out_data_V_1_state_cmp_full and not(out_data_V_1_sel_wr));
    out_data_V_1_load_B <= (out_data_V_1_sel_wr and out_data_V_1_state_cmp_full);
    out_data_V_1_sel <= out_data_V_1_sel_rd;
    out_data_V_1_state_cmp_full <= '0' when (out_data_V_1_state = ap_const_lv2_1) else '1';

    out_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state5, exitcond_i_fu_242_p2, ap_block_state5_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_i_fu_242_p2) and (ap_block_state5_io = ap_const_boolean_0))) then 
            out_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_V_1_vld_out <= out_data_V_1_state(0);
    out_last_V_1_ack_in <= out_last_V_1_state(1);
    out_last_V_1_ack_out <= out_r_TREADY;

    out_last_V_1_data_out_assign_proc : process(out_last_V_1_payload_A, out_last_V_1_payload_B, out_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_last_V_1_sel)) then 
            out_last_V_1_data_out <= out_last_V_1_payload_B;
        else 
            out_last_V_1_data_out <= out_last_V_1_payload_A;
        end if; 
    end process;

    out_last_V_1_load_A <= (out_last_V_1_state_cmp_full and not(out_last_V_1_sel_wr));
    out_last_V_1_load_B <= (out_last_V_1_sel_wr and out_last_V_1_state_cmp_full);
    out_last_V_1_sel <= out_last_V_1_sel_rd;
    out_last_V_1_state_cmp_full <= '0' when (out_last_V_1_state = ap_const_lv2_1) else '1';

    out_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state5, exitcond_i_fu_242_p2, ap_block_state5_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_i_fu_242_p2) and (ap_block_state5_io = ap_const_boolean_0))) then 
            out_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_last_V_1_vld_out <= out_last_V_1_state(0);
    out_r_TDATA <= out_data_V_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(out_data_V_1_state, ap_CS_fsm_state5, exitcond_i_fu_242_p2, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_i_fu_242_p2)) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_r_TDATA_blk_n <= out_data_V_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST <= out_last_V_1_data_out;
    out_r_TVALID <= out_last_V_1_state(0);
    p_1_i_fu_338_p3 <= 
        ret_V_2_fu_304_p4 when (tmp_i_fu_326_p2(0) = '1') else 
        ret_V_3_fu_332_p2;
    p_2_i_fu_296_p3 <= 
        p_i_fu_288_p3 when (tmp_2_fu_264_p3(0) = '1') else 
        ret_V_fu_254_p4;
    p_3_i_fu_346_p3 <= 
        p_1_i_fu_338_p3 when (tmp_4_fu_314_p3(0) = '1') else 
        ret_V_2_fu_304_p4;
        p_Result_s_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_9_fu_358_p3),32));

    p_Val2_3_fu_381_p3 <= (tmp_1_fu_371_p4 & ap_const_lv5_0);
    p_Val2_4_fu_393_p3 <= (tmp_6_fu_389_p1 & ap_const_lv5_0);
    p_i_fu_288_p3 <= 
        ret_V_fu_254_p4 when (tmp_8_i_fu_276_p2(0) = '1') else 
        ret_V_1_fu_282_p2;
    ret_V_1_fu_282_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ret_V_fu_254_p4));
    ret_V_2_fu_304_p4 <= p_Val2_1_reg_170(15 downto 5);
    ret_V_3_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ret_V_2_fu_304_p4));
    ret_V_fu_254_p4 <= p_Val2_s_reg_182(15 downto 5);
    tempI_V_fu_401_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_182) + unsigned(p_Val2_3_fu_381_p3));
    tempQ_V_fu_407_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_170) + unsigned(p_Val2_4_fu_393_p3));
    tmp_1_fu_371_p4 <= buffIn_data_V_q0(26 downto 16);
    tmp_2_fu_264_p3 <= p_Val2_s_reg_182(15 downto 15);
    tmp_3_fu_272_p1 <= p_Val2_s_reg_182(5 - 1 downto 0);
    tmp_4_fu_314_p3 <= p_Val2_1_reg_170(15 downto 15);
    tmp_5_fu_322_p1 <= p_Val2_1_reg_170(5 - 1 downto 0);
    tmp_6_fu_389_p1 <= buffIn_data_V_q0(11 - 1 downto 0);
    tmp_8_i_fu_276_p2 <= "1" when (tmp_3_fu_272_p1 = ap_const_lv5_0) else "0";
    tmp_fu_209_p2 <= "1" when (a_reg_159 = ap_const_lv7_0) else "0";
    tmp_i_9_fu_358_p3 <= (p_2_i_fu_296_p3 & loc_V_1_trunc_i_fu_354_p1);
    tmp_i_fu_326_p2 <= "1" when (tmp_5_fu_322_p1 = ap_const_lv5_0) else "0";
end behav;
