// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matchFilter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matchFilter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matchFilter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> matchFilter::ap_ST_fsm_state1 = "1";
const sc_lv<7> matchFilter::ap_ST_fsm_state2 = "10";
const sc_lv<7> matchFilter::ap_ST_fsm_state3 = "100";
const sc_lv<7> matchFilter::ap_ST_fsm_state4 = "1000";
const sc_lv<7> matchFilter::ap_ST_fsm_state5 = "10000";
const sc_lv<7> matchFilter::ap_ST_fsm_state6 = "100000";
const sc_lv<7> matchFilter::ap_ST_fsm_state7 = "1000000";
const sc_lv<1> matchFilter::ap_const_lv1_0 = "0";
const sc_lv<1> matchFilter::ap_const_lv1_1 = "1";
const sc_lv<2> matchFilter::ap_const_lv2_0 = "00";
const sc_lv<2> matchFilter::ap_const_lv2_2 = "10";
const sc_lv<2> matchFilter::ap_const_lv2_3 = "11";
const sc_lv<2> matchFilter::ap_const_lv2_1 = "1";
const sc_lv<32> matchFilter::ap_const_lv32_3 = "11";
const sc_lv<32> matchFilter::ap_const_lv32_4 = "100";
const sc_lv<32> matchFilter::ap_const_lv32_6 = "110";
const sc_lv<32> matchFilter::ap_const_lv32_1 = "1";
const bool matchFilter::ap_const_boolean_0 = false;
const sc_lv<32> matchFilter::ap_const_lv32_5 = "101";
const sc_lv<32> matchFilter::ap_const_lv32_2 = "10";
const sc_lv<7> matchFilter::ap_const_lv7_7F = "1111111";
const sc_lv<32> matchFilter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<16> matchFilter::ap_const_lv16_0 = "0000000000000000";
const sc_lv<8> matchFilter::ap_const_lv8_0 = "00000000";
const sc_lv<64> matchFilter::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> matchFilter::ap_const_lv7_0 = "0000000";
const sc_lv<8> matchFilter::ap_const_lv8_80 = "10000000";
const sc_lv<8> matchFilter::ap_const_lv8_1 = "1";
const sc_lv<32> matchFilter::ap_const_lv32_10 = "10000";
const sc_lv<32> matchFilter::ap_const_lv32_1F = "11111";
const bool matchFilter::ap_const_boolean_1 = true;

matchFilter::matchFilter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buffIn_data_V_U = new matchFilter_buffIbkb("buffIn_data_V_U");
    buffIn_data_V_U->clk(ap_clk);
    buffIn_data_V_U->reset(ap_rst_n_inv);
    buffIn_data_V_U->address0(buffIn_data_V_address0);
    buffIn_data_V_U->ce0(buffIn_data_V_ce0);
    buffIn_data_V_U->we0(buffIn_data_V_we0);
    buffIn_data_V_U->d0(buffIn_data_V_d0);
    buffIn_data_V_U->q0(buffIn_data_V_q0);
    buffIn_last_V_U = new matchFilter_buffIcud("buffIn_last_V_U");
    buffIn_last_V_U->clk(ap_clk);
    buffIn_last_V_U->reset(ap_rst_n_inv);
    buffIn_last_V_U->address0(buffIn_last_V_address0);
    buffIn_last_V_U->ce0(buffIn_last_V_ce0);
    buffIn_last_V_U->we0(buffIn_last_V_we0);
    buffIn_last_V_U->d0(buffIn_last_V_d0);
    buffIn_last_V_U->q0(buffIn_last_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_1_fu_202_p2);
    sensitive << ( a_reg_149 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( out_data_V_1_ack_in );
    sensitive << ( exitcond_i_fu_230_p2 );

    SC_METHOD(thread_ap_block_state7);
    sensitive << ( out_data_V_1_ack_in );
    sensitive << ( out_last_V_1_ack_in );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_b_fu_236_p2);
    sensitive << ( b_i_reg_185 );

    SC_METHOD(thread_buffIn_data_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_208_p1 );
    sensitive << ( tmp_s_fu_214_p1 );
    sensitive << ( tmp_2_i_fu_242_p1 );

    SC_METHOD(thread_buffIn_data_V_ce0);
    sensitive << ( in_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_buffIn_data_V_d0);
    sensitive << ( in_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( buffIn_data_V_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_buffIn_data_V_we0);
    sensitive << ( in_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_buffIn_last_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_208_p1 );
    sensitive << ( tmp_s_fu_214_p1 );

    SC_METHOD(thread_buffIn_last_V_ce0);
    sensitive << ( in_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_buffIn_last_V_d0);
    sensitive << ( in_last_V_0_data_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( buffIn_last_V_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_buffIn_last_V_we0);
    sensitive << ( in_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_exitcond_i_fu_230_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( b_i_reg_185 );

    SC_METHOD(thread_in_data_V_0_ack_in);
    sensitive << ( in_data_V_0_state );

    SC_METHOD(thread_in_data_V_0_ack_out);
    sensitive << ( in_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_data_V_0_data_out);
    sensitive << ( in_data_V_0_payload_A );
    sensitive << ( in_data_V_0_payload_B );
    sensitive << ( in_data_V_0_sel );

    SC_METHOD(thread_in_data_V_0_load_A);
    sensitive << ( in_data_V_0_sel_wr );
    sensitive << ( in_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_V_0_load_B);
    sensitive << ( in_data_V_0_sel_wr );
    sensitive << ( in_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_V_0_sel);
    sensitive << ( in_data_V_0_sel_rd );

    SC_METHOD(thread_in_data_V_0_state_cmp_full);
    sensitive << ( in_data_V_0_state );

    SC_METHOD(thread_in_data_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_data_V_0_vld_out);
    sensitive << ( in_data_V_0_state );

    SC_METHOD(thread_in_last_V_0_ack_in);
    sensitive << ( in_last_V_0_state );

    SC_METHOD(thread_in_last_V_0_ack_out);
    sensitive << ( in_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_last_V_0_data_out);
    sensitive << ( in_last_V_0_payload_A );
    sensitive << ( in_last_V_0_payload_B );
    sensitive << ( in_last_V_0_sel );

    SC_METHOD(thread_in_last_V_0_load_A);
    sensitive << ( in_last_V_0_sel_wr );
    sensitive << ( in_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_last_V_0_load_B);
    sensitive << ( in_last_V_0_sel_wr );
    sensitive << ( in_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_last_V_0_sel);
    sensitive << ( in_last_V_0_sel_rd );

    SC_METHOD(thread_in_last_V_0_state_cmp_full);
    sensitive << ( in_last_V_0_state );

    SC_METHOD(thread_in_last_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_last_V_0_vld_out);
    sensitive << ( in_last_V_0_state );

    SC_METHOD(thread_in_r_TDATA_blk_n);
    sensitive << ( in_data_V_0_state );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_r_TREADY);
    sensitive << ( in_last_V_0_state );

    SC_METHOD(thread_out_data_V_1_ack_in);
    sensitive << ( out_data_V_1_state );

    SC_METHOD(thread_out_data_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_data_V_1_data_out);
    sensitive << ( out_data_V_1_payload_A );
    sensitive << ( out_data_V_1_payload_B );
    sensitive << ( out_data_V_1_sel );

    SC_METHOD(thread_out_data_V_1_load_A);
    sensitive << ( out_data_V_1_sel_wr );
    sensitive << ( out_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_V_1_load_B);
    sensitive << ( out_data_V_1_sel_wr );
    sensitive << ( out_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_V_1_sel);
    sensitive << ( out_data_V_1_sel_rd );

    SC_METHOD(thread_out_data_V_1_state_cmp_full);
    sensitive << ( out_data_V_1_state );

    SC_METHOD(thread_out_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_i_fu_230_p2 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_out_data_V_1_vld_out);
    sensitive << ( out_data_V_1_state );

    SC_METHOD(thread_out_last_V_1_ack_in);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_out_last_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_last_V_1_data_out);
    sensitive << ( out_last_V_1_payload_A );
    sensitive << ( out_last_V_1_payload_B );
    sensitive << ( out_last_V_1_sel );

    SC_METHOD(thread_out_last_V_1_load_A);
    sensitive << ( out_last_V_1_sel_wr );
    sensitive << ( out_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_last_V_1_load_B);
    sensitive << ( out_last_V_1_sel_wr );
    sensitive << ( out_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_last_V_1_sel);
    sensitive << ( out_last_V_1_sel_rd );

    SC_METHOD(thread_out_last_V_1_state_cmp_full);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_out_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_i_fu_230_p2 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_out_last_V_1_vld_out);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( out_data_V_1_data_out );

    SC_METHOD(thread_out_r_TDATA_blk_n);
    sensitive << ( out_data_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_i_fu_230_p2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( out_last_V_1_data_out );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( out_last_V_1_state );

    SC_METHOD(thread_p_Result_s_fu_247_p3);
    sensitive << ( p_Val2_3_reg_161 );
    sensitive << ( p_Val2_1_reg_173 );

    SC_METHOD(thread_p_Val2_2_fu_256_p4);
    sensitive << ( buffIn_data_V_q0 );

    SC_METHOD(thread_p_Val2_4_fu_266_p1);
    sensitive << ( buffIn_data_V_q0 );

    SC_METHOD(thread_tempI_V_fu_270_p2);
    sensitive << ( p_Val2_1_reg_173 );
    sensitive << ( p_Val2_2_fu_256_p4 );

    SC_METHOD(thread_tempQ_V_fu_276_p2);
    sensitive << ( p_Val2_3_reg_161 );
    sensitive << ( p_Val2_4_fu_266_p1 );

    SC_METHOD(thread_tmp_2_i_fu_242_p1);
    sensitive << ( b_i_reg_185 );

    SC_METHOD(thread_tmp_4_fu_208_p1);
    sensitive << ( a_1_fu_202_p2 );

    SC_METHOD(thread_tmp_fu_196_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( a_reg_149 );

    SC_METHOD(thread_tmp_s_fu_214_p1);
    sensitive << ( a_reg_149 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( in_data_V_0_vld_out );
    sensitive << ( out_data_V_1_ack_in );
    sensitive << ( out_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_i_fu_230_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_196_p2 );
    sensitive << ( ap_block_state5_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    in_data_V_0_sel_rd = SC_LOGIC_0;
    in_data_V_0_sel_wr = SC_LOGIC_0;
    in_data_V_0_state = "00";
    in_last_V_0_sel_rd = SC_LOGIC_0;
    in_last_V_0_sel_wr = SC_LOGIC_0;
    in_last_V_0_state = "00";
    out_data_V_1_sel_rd = SC_LOGIC_0;
    out_data_V_1_sel_wr = SC_LOGIC_0;
    out_data_V_1_state = "00";
    out_last_V_1_sel_rd = SC_LOGIC_0;
    out_last_V_1_sel_wr = SC_LOGIC_0;
    out_last_V_1_state = "00";
    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matchFilter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_r_TDATA, "(port)in_r_TDATA");
    sc_trace(mVcdFile, in_r_TVALID, "(port)in_r_TVALID");
    sc_trace(mVcdFile, in_r_TREADY, "(port)in_r_TREADY");
    sc_trace(mVcdFile, in_r_TLAST, "(port)in_r_TLAST");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, in_data_V_0_data_out, "in_data_V_0_data_out");
    sc_trace(mVcdFile, in_data_V_0_vld_in, "in_data_V_0_vld_in");
    sc_trace(mVcdFile, in_data_V_0_vld_out, "in_data_V_0_vld_out");
    sc_trace(mVcdFile, in_data_V_0_ack_in, "in_data_V_0_ack_in");
    sc_trace(mVcdFile, in_data_V_0_ack_out, "in_data_V_0_ack_out");
    sc_trace(mVcdFile, in_data_V_0_payload_A, "in_data_V_0_payload_A");
    sc_trace(mVcdFile, in_data_V_0_payload_B, "in_data_V_0_payload_B");
    sc_trace(mVcdFile, in_data_V_0_sel_rd, "in_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_data_V_0_sel_wr, "in_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_data_V_0_sel, "in_data_V_0_sel");
    sc_trace(mVcdFile, in_data_V_0_load_A, "in_data_V_0_load_A");
    sc_trace(mVcdFile, in_data_V_0_load_B, "in_data_V_0_load_B");
    sc_trace(mVcdFile, in_data_V_0_state, "in_data_V_0_state");
    sc_trace(mVcdFile, in_data_V_0_state_cmp_full, "in_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_last_V_0_data_out, "in_last_V_0_data_out");
    sc_trace(mVcdFile, in_last_V_0_vld_in, "in_last_V_0_vld_in");
    sc_trace(mVcdFile, in_last_V_0_vld_out, "in_last_V_0_vld_out");
    sc_trace(mVcdFile, in_last_V_0_ack_in, "in_last_V_0_ack_in");
    sc_trace(mVcdFile, in_last_V_0_ack_out, "in_last_V_0_ack_out");
    sc_trace(mVcdFile, in_last_V_0_payload_A, "in_last_V_0_payload_A");
    sc_trace(mVcdFile, in_last_V_0_payload_B, "in_last_V_0_payload_B");
    sc_trace(mVcdFile, in_last_V_0_sel_rd, "in_last_V_0_sel_rd");
    sc_trace(mVcdFile, in_last_V_0_sel_wr, "in_last_V_0_sel_wr");
    sc_trace(mVcdFile, in_last_V_0_sel, "in_last_V_0_sel");
    sc_trace(mVcdFile, in_last_V_0_load_A, "in_last_V_0_load_A");
    sc_trace(mVcdFile, in_last_V_0_load_B, "in_last_V_0_load_B");
    sc_trace(mVcdFile, in_last_V_0_state, "in_last_V_0_state");
    sc_trace(mVcdFile, in_last_V_0_state_cmp_full, "in_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_data_V_1_data_out, "out_data_V_1_data_out");
    sc_trace(mVcdFile, out_data_V_1_vld_in, "out_data_V_1_vld_in");
    sc_trace(mVcdFile, out_data_V_1_vld_out, "out_data_V_1_vld_out");
    sc_trace(mVcdFile, out_data_V_1_ack_in, "out_data_V_1_ack_in");
    sc_trace(mVcdFile, out_data_V_1_ack_out, "out_data_V_1_ack_out");
    sc_trace(mVcdFile, out_data_V_1_payload_A, "out_data_V_1_payload_A");
    sc_trace(mVcdFile, out_data_V_1_payload_B, "out_data_V_1_payload_B");
    sc_trace(mVcdFile, out_data_V_1_sel_rd, "out_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_data_V_1_sel_wr, "out_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_data_V_1_sel, "out_data_V_1_sel");
    sc_trace(mVcdFile, out_data_V_1_load_A, "out_data_V_1_load_A");
    sc_trace(mVcdFile, out_data_V_1_load_B, "out_data_V_1_load_B");
    sc_trace(mVcdFile, out_data_V_1_state, "out_data_V_1_state");
    sc_trace(mVcdFile, out_data_V_1_state_cmp_full, "out_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_last_V_1_data_out, "out_last_V_1_data_out");
    sc_trace(mVcdFile, out_last_V_1_vld_in, "out_last_V_1_vld_in");
    sc_trace(mVcdFile, out_last_V_1_vld_out, "out_last_V_1_vld_out");
    sc_trace(mVcdFile, out_last_V_1_ack_in, "out_last_V_1_ack_in");
    sc_trace(mVcdFile, out_last_V_1_ack_out, "out_last_V_1_ack_out");
    sc_trace(mVcdFile, out_last_V_1_payload_A, "out_last_V_1_payload_A");
    sc_trace(mVcdFile, out_last_V_1_payload_B, "out_last_V_1_payload_B");
    sc_trace(mVcdFile, out_last_V_1_sel_rd, "out_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_last_V_1_sel_wr, "out_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_last_V_1_sel, "out_last_V_1_sel");
    sc_trace(mVcdFile, out_last_V_1_load_A, "out_last_V_1_load_A");
    sc_trace(mVcdFile, out_last_V_1_load_B, "out_last_V_1_load_B");
    sc_trace(mVcdFile, out_last_V_1_state, "out_last_V_1_state");
    sc_trace(mVcdFile, out_last_V_1_state_cmp_full, "out_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, in_r_TDATA_blk_n, "in_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, out_r_TDATA_blk_n, "out_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_i_fu_230_p2, "exitcond_i_fu_230_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, a_1_fu_202_p2, "a_1_fu_202_p2");
    sc_trace(mVcdFile, a_1_reg_285, "a_1_reg_285");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_196_p2, "tmp_fu_196_p2");
    sc_trace(mVcdFile, out_last_V_1_reg_300, "out_last_V_1_reg_300");
    sc_trace(mVcdFile, b_fu_236_p2, "b_fu_236_p2");
    sc_trace(mVcdFile, b_reg_308, "b_reg_308");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, p_Result_s_fu_247_p3, "p_Result_s_fu_247_p3");
    sc_trace(mVcdFile, tempI_V_fu_270_p2, "tempI_V_fu_270_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tempQ_V_fu_276_p2, "tempQ_V_fu_276_p2");
    sc_trace(mVcdFile, buffIn_data_V_address0, "buffIn_data_V_address0");
    sc_trace(mVcdFile, buffIn_data_V_ce0, "buffIn_data_V_ce0");
    sc_trace(mVcdFile, buffIn_data_V_we0, "buffIn_data_V_we0");
    sc_trace(mVcdFile, buffIn_data_V_d0, "buffIn_data_V_d0");
    sc_trace(mVcdFile, buffIn_data_V_q0, "buffIn_data_V_q0");
    sc_trace(mVcdFile, buffIn_last_V_address0, "buffIn_last_V_address0");
    sc_trace(mVcdFile, buffIn_last_V_ce0, "buffIn_last_V_ce0");
    sc_trace(mVcdFile, buffIn_last_V_we0, "buffIn_last_V_we0");
    sc_trace(mVcdFile, buffIn_last_V_d0, "buffIn_last_V_d0");
    sc_trace(mVcdFile, buffIn_last_V_q0, "buffIn_last_V_q0");
    sc_trace(mVcdFile, a_reg_149, "a_reg_149");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_Val2_3_reg_161, "p_Val2_3_reg_161");
    sc_trace(mVcdFile, p_Val2_1_reg_173, "p_Val2_1_reg_173");
    sc_trace(mVcdFile, b_i_reg_185, "b_i_reg_185");
    sc_trace(mVcdFile, tmp_4_fu_208_p1, "tmp_4_fu_208_p1");
    sc_trace(mVcdFile, tmp_s_fu_214_p1, "tmp_s_fu_214_p1");
    sc_trace(mVcdFile, tmp_2_i_fu_242_p1, "tmp_2_i_fu_242_p1");
    sc_trace(mVcdFile, ap_block_state7, "ap_block_state7");
    sc_trace(mVcdFile, p_Val2_2_fu_256_p4, "p_Val2_2_fu_256_p4");
    sc_trace(mVcdFile, p_Val2_4_fu_266_p1, "p_Val2_4_fu_266_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("matchFilter.hdltvin.dat");
    mHdltvoutHandle.open("matchFilter.hdltvout.dat");
}

matchFilter::~matchFilter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete buffIn_data_V_U;
    delete buffIn_last_V_U;
}

void matchFilter::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        a_reg_149 = ap_const_lv7_7F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_reg_149 = a_1_reg_285.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        b_i_reg_185 = b_reg_308.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1))) {
        b_i_reg_185 = ap_const_lv8_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_out.read()))) {
            in_data_V_0_sel_rd =  (sc_logic) (~in_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_in.read()))) {
            in_data_V_0_sel_wr =  (sc_logic) (~in_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_ack_out.read()))))) {
            in_data_V_0_state = ap_const_lv2_3;
        } else {
            in_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_out.read()))) {
            in_last_V_0_sel_rd =  (sc_logic) (~in_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_in.read()))) {
            in_last_V_0_sel_wr =  (sc_logic) (~in_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_last_V_0_state.read())))) {
            in_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_last_V_0_state.read())))) {
            in_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_ack_out.read()))))) {
            in_last_V_0_state = ap_const_lv2_3;
        } else {
            in_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_out.read()))) {
            out_data_V_1_sel_rd =  (sc_logic) (~out_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_in.read()))) {
            out_data_V_1_sel_wr =  (sc_logic) (~out_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_data_V_1_state.read())))) {
            out_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_V_1_state.read())))) {
            out_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_ack_out.read()))))) {
            out_data_V_1_state = ap_const_lv2_3;
        } else {
            out_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_out.read()))) {
            out_last_V_1_sel_rd =  (sc_logic) (~out_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_in.read()))) {
            out_last_V_1_sel_wr =  (sc_logic) (~out_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_last_V_1_state.read())))) {
            out_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_last_V_1_state.read())))) {
            out_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_ack_out.read()))))) {
            out_last_V_1_state = ap_const_lv2_3;
        } else {
            out_last_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        p_Val2_1_reg_173 = tempI_V_fu_270_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1))) {
        p_Val2_1_reg_173 = ap_const_lv16_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        p_Val2_3_reg_161 = tempQ_V_fu_276_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1))) {
        p_Val2_3_reg_161 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_196_p2.read()))) {
        a_1_reg_285 = a_1_fu_202_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_block_state5_io.read(), ap_const_boolean_0))) {
        b_reg_308 = b_fu_236_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_load_A.read())) {
        in_data_V_0_payload_A = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_load_B.read())) {
        in_data_V_0_payload_B = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_load_A.read())) {
        in_last_V_0_payload_A = in_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_load_B.read())) {
        in_last_V_0_payload_B = in_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_load_A.read())) {
        out_data_V_1_payload_A = p_Result_s_fu_247_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_load_B.read())) {
        out_data_V_1_payload_B = p_Result_s_fu_247_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_load_A.read())) {
        out_last_V_1_payload_A = out_last_V_1_reg_300.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_load_B.read())) {
        out_last_V_1_payload_B = out_last_V_1_reg_300.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1))) {
        out_last_V_1_reg_300 = in_last_V_0_data_out.read();
    }
}

void matchFilter::thread_a_1_fu_202_p2() {
    a_1_fu_202_p2 = (!a_reg_149.read().is_01() || !ap_const_lv7_7F.is_01())? sc_lv<7>(): (sc_biguint<7>(a_reg_149.read()) + sc_bigint<7>(ap_const_lv7_7F));
}

void matchFilter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matchFilter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matchFilter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matchFilter::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void matchFilter::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void matchFilter::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void matchFilter::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void matchFilter::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_230_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_in.read()));
}

void matchFilter::thread_ap_block_state7() {
    ap_block_state7 = (esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_in.read()));
}

void matchFilter::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void matchFilter::thread_b_fu_236_p2() {
    b_fu_236_p2 = (!b_i_reg_185.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(b_i_reg_185.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void matchFilter::thread_buffIn_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buffIn_data_V_address0 =  (sc_lv<7>) (tmp_2_i_fu_242_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffIn_data_V_address0 =  (sc_lv<7>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffIn_data_V_address0 =  (sc_lv<7>) (tmp_s_fu_214_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        buffIn_data_V_address0 =  (sc_lv<7>) (tmp_4_fu_208_p1.read());
    } else {
        buffIn_data_V_address0 = "XXXXXXX";
    }
}

void matchFilter::thread_buffIn_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_block_state5_io.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        buffIn_data_V_ce0 = ap_const_logic_1;
    } else {
        buffIn_data_V_ce0 = ap_const_logic_0;
    }
}

void matchFilter::thread_buffIn_data_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffIn_data_V_d0 = in_data_V_0_data_out.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffIn_data_V_d0 = buffIn_data_V_q0.read();
    } else {
        buffIn_data_V_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void matchFilter::thread_buffIn_data_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        buffIn_data_V_we0 = ap_const_logic_1;
    } else {
        buffIn_data_V_we0 = ap_const_logic_0;
    }
}

void matchFilter::thread_buffIn_last_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffIn_last_V_address0 =  (sc_lv<7>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffIn_last_V_address0 =  (sc_lv<7>) (tmp_s_fu_214_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        buffIn_last_V_address0 =  (sc_lv<7>) (tmp_4_fu_208_p1.read());
    } else {
        buffIn_last_V_address0 = "XXXXXXX";
    }
}

void matchFilter::thread_buffIn_last_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        buffIn_last_V_ce0 = ap_const_logic_1;
    } else {
        buffIn_last_V_ce0 = ap_const_logic_0;
    }
}

void matchFilter::thread_buffIn_last_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffIn_last_V_d0 = in_last_V_0_data_out.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffIn_last_V_d0 = buffIn_last_V_q0.read();
    } else {
        buffIn_last_V_d0 =  (sc_lv<1>) ("X");
    }
}

void matchFilter::thread_buffIn_last_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        buffIn_last_V_we0 = ap_const_logic_1;
    } else {
        buffIn_last_V_we0 = ap_const_logic_0;
    }
}

void matchFilter::thread_exitcond_i_fu_230_p2() {
    exitcond_i_fu_230_p2 = (!b_i_reg_185.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(b_i_reg_185.read() == ap_const_lv8_80);
}

void matchFilter::thread_in_data_V_0_ack_in() {
    in_data_V_0_ack_in = in_data_V_0_state.read()[1];
}

void matchFilter::thread_in_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_data_V_0_ack_out = ap_const_logic_0;
    }
}

void matchFilter::thread_in_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_V_0_sel.read())) {
        in_data_V_0_data_out = in_data_V_0_payload_B.read();
    } else {
        in_data_V_0_data_out = in_data_V_0_payload_A.read();
    }
}

void matchFilter::thread_in_data_V_0_load_A() {
    in_data_V_0_load_A = (in_data_V_0_state_cmp_full.read() & ~in_data_V_0_sel_wr.read());
}

void matchFilter::thread_in_data_V_0_load_B() {
    in_data_V_0_load_B = (in_data_V_0_sel_wr.read() & in_data_V_0_state_cmp_full.read());
}

void matchFilter::thread_in_data_V_0_sel() {
    in_data_V_0_sel = in_data_V_0_sel_rd.read();
}

void matchFilter::thread_in_data_V_0_state_cmp_full() {
    in_data_V_0_state_cmp_full =  (sc_logic) ((!in_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void matchFilter::thread_in_data_V_0_vld_in() {
    in_data_V_0_vld_in = in_r_TVALID.read();
}

void matchFilter::thread_in_data_V_0_vld_out() {
    in_data_V_0_vld_out = in_data_V_0_state.read()[0];
}

void matchFilter::thread_in_last_V_0_ack_in() {
    in_last_V_0_ack_in = in_last_V_0_state.read()[1];
}

void matchFilter::thread_in_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_last_V_0_ack_out = ap_const_logic_1;
    } else {
        in_last_V_0_ack_out = ap_const_logic_0;
    }
}

void matchFilter::thread_in_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_last_V_0_sel.read())) {
        in_last_V_0_data_out = in_last_V_0_payload_B.read();
    } else {
        in_last_V_0_data_out = in_last_V_0_payload_A.read();
    }
}

void matchFilter::thread_in_last_V_0_load_A() {
    in_last_V_0_load_A = (in_last_V_0_state_cmp_full.read() & ~in_last_V_0_sel_wr.read());
}

void matchFilter::thread_in_last_V_0_load_B() {
    in_last_V_0_load_B = (in_last_V_0_sel_wr.read() & in_last_V_0_state_cmp_full.read());
}

void matchFilter::thread_in_last_V_0_sel() {
    in_last_V_0_sel = in_last_V_0_sel_rd.read();
}

void matchFilter::thread_in_last_V_0_state_cmp_full() {
    in_last_V_0_state_cmp_full =  (sc_logic) ((!in_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void matchFilter::thread_in_last_V_0_vld_in() {
    in_last_V_0_vld_in = in_r_TVALID.read();
}

void matchFilter::thread_in_last_V_0_vld_out() {
    in_last_V_0_vld_out = in_last_V_0_state.read()[0];
}

void matchFilter::thread_in_r_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_r_TDATA_blk_n = in_data_V_0_state.read()[0];
    } else {
        in_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void matchFilter::thread_in_r_TREADY() {
    in_r_TREADY = in_last_V_0_state.read()[1];
}

void matchFilter::thread_out_data_V_1_ack_in() {
    out_data_V_1_ack_in = out_data_V_1_state.read()[1];
}

void matchFilter::thread_out_data_V_1_ack_out() {
    out_data_V_1_ack_out = out_r_TREADY.read();
}

void matchFilter::thread_out_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_V_1_sel.read())) {
        out_data_V_1_data_out = out_data_V_1_payload_B.read();
    } else {
        out_data_V_1_data_out = out_data_V_1_payload_A.read();
    }
}

void matchFilter::thread_out_data_V_1_load_A() {
    out_data_V_1_load_A = (out_data_V_1_state_cmp_full.read() & ~out_data_V_1_sel_wr.read());
}

void matchFilter::thread_out_data_V_1_load_B() {
    out_data_V_1_load_B = (out_data_V_1_sel_wr.read() & out_data_V_1_state_cmp_full.read());
}

void matchFilter::thread_out_data_V_1_sel() {
    out_data_V_1_sel = out_data_V_1_sel_rd.read();
}

void matchFilter::thread_out_data_V_1_state_cmp_full() {
    out_data_V_1_state_cmp_full =  (sc_logic) ((!out_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void matchFilter::thread_out_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_230_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state5_io.read(), ap_const_boolean_0))) {
        out_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_data_V_1_vld_in = ap_const_logic_0;
    }
}

void matchFilter::thread_out_data_V_1_vld_out() {
    out_data_V_1_vld_out = out_data_V_1_state.read()[0];
}

void matchFilter::thread_out_last_V_1_ack_in() {
    out_last_V_1_ack_in = out_last_V_1_state.read()[1];
}

void matchFilter::thread_out_last_V_1_ack_out() {
    out_last_V_1_ack_out = out_r_TREADY.read();
}

void matchFilter::thread_out_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_last_V_1_sel.read())) {
        out_last_V_1_data_out = out_last_V_1_payload_B.read();
    } else {
        out_last_V_1_data_out = out_last_V_1_payload_A.read();
    }
}

void matchFilter::thread_out_last_V_1_load_A() {
    out_last_V_1_load_A = (out_last_V_1_state_cmp_full.read() & ~out_last_V_1_sel_wr.read());
}

void matchFilter::thread_out_last_V_1_load_B() {
    out_last_V_1_load_B = (out_last_V_1_sel_wr.read() & out_last_V_1_state_cmp_full.read());
}

void matchFilter::thread_out_last_V_1_sel() {
    out_last_V_1_sel = out_last_V_1_sel_rd.read();
}

void matchFilter::thread_out_last_V_1_state_cmp_full() {
    out_last_V_1_state_cmp_full =  (sc_logic) ((!out_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void matchFilter::thread_out_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_230_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state5_io.read(), ap_const_boolean_0))) {
        out_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_last_V_1_vld_in = ap_const_logic_0;
    }
}

void matchFilter::thread_out_last_V_1_vld_out() {
    out_last_V_1_vld_out = out_last_V_1_state.read()[0];
}

void matchFilter::thread_out_r_TDATA() {
    out_r_TDATA = out_data_V_1_data_out.read();
}

void matchFilter::thread_out_r_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_230_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        out_r_TDATA_blk_n = out_data_V_1_state.read()[1];
    } else {
        out_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void matchFilter::thread_out_r_TLAST() {
    out_r_TLAST = out_last_V_1_data_out.read();
}

void matchFilter::thread_out_r_TVALID() {
    out_r_TVALID = out_last_V_1_state.read()[0];
}

void matchFilter::thread_p_Result_s_fu_247_p3() {
    p_Result_s_fu_247_p3 = esl_concat<16,16>(p_Val2_1_reg_173.read(), p_Val2_3_reg_161.read());
}

void matchFilter::thread_p_Val2_2_fu_256_p4() {
    p_Val2_2_fu_256_p4 = buffIn_data_V_q0.read().range(31, 16);
}

void matchFilter::thread_p_Val2_4_fu_266_p1() {
    p_Val2_4_fu_266_p1 = buffIn_data_V_q0.read().range(16-1, 0);
}

void matchFilter::thread_tempI_V_fu_270_p2() {
    tempI_V_fu_270_p2 = (!p_Val2_1_reg_173.read().is_01() || !p_Val2_2_fu_256_p4.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_Val2_1_reg_173.read()) + sc_biguint<16>(p_Val2_2_fu_256_p4.read()));
}

void matchFilter::thread_tempQ_V_fu_276_p2() {
    tempQ_V_fu_276_p2 = (!p_Val2_3_reg_161.read().is_01() || !p_Val2_4_fu_266_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_Val2_3_reg_161.read()) + sc_biguint<16>(p_Val2_4_fu_266_p1.read()));
}

void matchFilter::thread_tmp_2_i_fu_242_p1() {
    tmp_2_i_fu_242_p1 = esl_zext<64,8>(b_i_reg_185.read());
}

void matchFilter::thread_tmp_4_fu_208_p1() {
    tmp_4_fu_208_p1 = esl_zext<64,7>(a_1_fu_202_p2.read());
}

void matchFilter::thread_tmp_fu_196_p2() {
    tmp_fu_196_p2 = (!a_reg_149.read().is_01() || !ap_const_lv7_0.is_01())? sc_lv<1>(): sc_lv<1>(a_reg_149.read() == ap_const_lv7_0);
}

void matchFilter::thread_tmp_s_fu_214_p1() {
    tmp_s_fu_214_p1 = esl_zext<64,7>(a_reg_149.read());
}

void matchFilter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_196_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(in_data_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_230_p2.read()) && esl_seteq<1,1,1>(ap_block_state5_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_block_state5_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_230_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_last_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void matchFilter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TDATA\" :  \"" << in_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TVALID\" :  \"" << in_r_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_r_TREADY\" :  \"" << in_r_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TLAST\" :  \"" << in_r_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TDATA\" :  \"" << out_r_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TVALID\" :  \"" << out_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_TREADY\" :  \"" << out_r_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TLAST\" :  \"" << out_r_TLAST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

