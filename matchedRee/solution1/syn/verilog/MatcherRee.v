// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MatcherRee,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.223667,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=471,HLS_SYN_LUT=247}" *)

module MatcherRee (
        ap_clk,
        ap_rst_n,
        i_data_TDATA,
        i_data_TVALID,
        i_data_TREADY,
        i_data_TLAST,
        o_data_TDATA,
        o_data_TVALID,
        o_data_TREADY,
        o_data_TLAST,
        start_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] i_data_TDATA;
input   i_data_TVALID;
output   i_data_TREADY;
input  [0:0] i_data_TLAST;
output  [31:0] o_data_TDATA;
output   o_data_TVALID;
input   o_data_TREADY;
output  [0:0] o_data_TLAST;
input  [0:0] start_V;

reg    ap_rst_n_inv;
reg   [31:0] i_data_V_data_V_0_data_out;
wire    i_data_V_data_V_0_vld_in;
wire    i_data_V_data_V_0_vld_out;
wire    i_data_V_data_V_0_ack_in;
reg    i_data_V_data_V_0_ack_out;
reg   [31:0] i_data_V_data_V_0_payload_A;
reg   [31:0] i_data_V_data_V_0_payload_B;
reg    i_data_V_data_V_0_sel_rd;
reg    i_data_V_data_V_0_sel_wr;
wire    i_data_V_data_V_0_sel;
wire    i_data_V_data_V_0_load_A;
wire    i_data_V_data_V_0_load_B;
reg   [1:0] i_data_V_data_V_0_state;
wire    i_data_V_data_V_0_state_cmp_full;
wire    i_data_V_last_V_0_vld_in;
reg    i_data_V_last_V_0_ack_out;
reg   [1:0] i_data_V_last_V_0_state;
reg   [31:0] o_data_V_data_V_1_data_out;
reg    o_data_V_data_V_1_vld_in;
wire    o_data_V_data_V_1_vld_out;
wire    o_data_V_data_V_1_ack_in;
wire    o_data_V_data_V_1_ack_out;
reg   [31:0] o_data_V_data_V_1_payload_A;
reg   [31:0] o_data_V_data_V_1_payload_B;
reg    o_data_V_data_V_1_sel_rd;
reg    o_data_V_data_V_1_sel_wr;
wire    o_data_V_data_V_1_sel;
wire    o_data_V_data_V_1_load_A;
wire    o_data_V_data_V_1_load_B;
reg   [1:0] o_data_V_data_V_1_state;
wire    o_data_V_data_V_1_state_cmp_full;
wire   [0:0] o_data_V_last_V_1_data_out;
reg    o_data_V_last_V_1_vld_in;
wire    o_data_V_last_V_1_vld_out;
wire    o_data_V_last_V_1_ack_in;
wire    o_data_V_last_V_1_ack_out;
reg    o_data_V_last_V_1_sel_rd;
wire    o_data_V_last_V_1_sel;
reg   [1:0] o_data_V_last_V_1_state;
reg   [0:0] currentState;
reg   [15:0] buffQ_V_14;
reg   [15:0] buffQ_V_13;
reg   [15:0] buffQ_V_12;
reg   [15:0] buffQ_V_11;
reg   [15:0] buffQ_V_10;
reg   [15:0] buffQ_V_9;
reg   [15:0] buffQ_V_8;
reg   [15:0] buffQ_V_7;
reg   [15:0] buffQ_V_6;
reg   [15:0] buffQ_V_5;
reg   [15:0] buffQ_V_4;
reg   [15:0] buffQ_V_3;
reg   [15:0] buffQ_V_2;
reg   [15:0] buffQ_V_1;
reg   [15:0] buffQ_V_0;
reg    i_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] currentState_load_reg_474;
reg    o_data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_reg_pp0_iter1_currentState_load_reg_474;
wire   [0:0] start_V_read_read_fu_108_p2;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_flag00011001;
wire   [0:0] currentState_load_load_fu_133_p1;
wire   [31:0] tmp_data_V_fu_465_p1;
reg    ap_block_pp0_stage0_flag00011011;
wire   [15:0] tmp_5_fu_385_p3;
reg    ap_block_pp0_stage0_flag00001001;
wire   [10:0] tmp_1_fu_381_p1;
wire   [15:0] tmp1_fu_423_p2;
wire   [15:0] tmp2_fu_429_p2;
wire   [15:0] tmp4_fu_441_p2;
wire   [15:0] tmp5_fu_447_p2;
wire   [15:0] tmp_fu_435_p2;
wire   [15:0] tmp3_fu_453_p2;
wire   [15:0] p_Val2_6_5_fu_459_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 i_data_V_data_V_0_sel_rd = 1'b0;
#0 i_data_V_data_V_0_sel_wr = 1'b0;
#0 i_data_V_data_V_0_state = 2'd0;
#0 i_data_V_last_V_0_state = 2'd0;
#0 o_data_V_data_V_1_sel_rd = 1'b0;
#0 o_data_V_data_V_1_sel_wr = 1'b0;
#0 o_data_V_data_V_1_state = 2'd0;
#0 o_data_V_last_V_1_sel_rd = 1'b0;
#0 o_data_V_last_V_1_state = 2'd0;
#0 currentState = 1'd0;
#0 buffQ_V_14 = 16'd0;
#0 buffQ_V_13 = 16'd0;
#0 buffQ_V_12 = 16'd0;
#0 buffQ_V_11 = 16'd0;
#0 buffQ_V_10 = 16'd0;
#0 buffQ_V_9 = 16'd0;
#0 buffQ_V_8 = 16'd0;
#0 buffQ_V_7 = 16'd0;
#0 buffQ_V_6 = 16'd0;
#0 buffQ_V_5 = 16'd0;
#0 buffQ_V_4 = 16'd0;
#0 buffQ_V_3 = 16'd0;
#0 buffQ_V_2 = 16'd0;
#0 buffQ_V_1 = 16'd0;
#0 buffQ_V_0 = 16'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        currentState <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1) & (1'd0 == currentState_load_load_fu_133_p1) & (1'd1 == start_V_read_read_fu_108_p2))) begin
            currentState <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_data_V_0_ack_out) & (1'b1 == i_data_V_data_V_0_vld_out))) begin
            i_data_V_data_V_0_sel_rd <= ~i_data_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_data_V_0_vld_in) & (1'b1 == i_data_V_data_V_0_ack_in))) begin
            i_data_V_data_V_0_sel_wr <= ~i_data_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_V_data_V_0_vld_in) & (1'b1 == i_data_V_data_V_0_ack_out) & (i_data_V_data_V_0_state == 2'd3)) | ((1'b0 == i_data_V_data_V_0_vld_in) & (i_data_V_data_V_0_state == 2'd2)))) begin
            i_data_V_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_V_data_V_0_vld_in) & (1'b0 == i_data_V_data_V_0_ack_out) & (i_data_V_data_V_0_state == 2'd3)) | ((1'b0 == i_data_V_data_V_0_ack_out) & (i_data_V_data_V_0_state == 2'd1)))) begin
            i_data_V_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_V_data_V_0_vld_in) & (i_data_V_data_V_0_state == 2'd2)) | ((1'b1 == i_data_V_data_V_0_ack_out) & (i_data_V_data_V_0_state == 2'd1)) | ((i_data_V_data_V_0_state == 2'd3) & ~((1'b1 == i_data_V_data_V_0_vld_in) & (1'b0 == i_data_V_data_V_0_ack_out)) & ~((1'b0 == i_data_V_data_V_0_vld_in) & (1'b1 == i_data_V_data_V_0_ack_out))))) begin
            i_data_V_data_V_0_state <= 2'd3;
        end else begin
            i_data_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_V_last_V_0_vld_in) & (1'b1 == i_data_V_last_V_0_ack_out) & (2'd3 == i_data_V_last_V_0_state)) | ((1'b0 == i_data_V_last_V_0_vld_in) & (2'd2 == i_data_V_last_V_0_state)))) begin
            i_data_V_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_V_last_V_0_vld_in) & (1'b0 == i_data_V_last_V_0_ack_out) & (2'd3 == i_data_V_last_V_0_state)) | ((1'b0 == i_data_V_last_V_0_ack_out) & (2'd1 == i_data_V_last_V_0_state)))) begin
            i_data_V_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_V_last_V_0_vld_in) & (2'd2 == i_data_V_last_V_0_state)) | ((1'b1 == i_data_V_last_V_0_ack_out) & (2'd1 == i_data_V_last_V_0_state)) | ((2'd3 == i_data_V_last_V_0_state) & ~((1'b1 == i_data_V_last_V_0_vld_in) & (1'b0 == i_data_V_last_V_0_ack_out)) & ~((1'b0 == i_data_V_last_V_0_vld_in) & (1'b1 == i_data_V_last_V_0_ack_out))))) begin
            i_data_V_last_V_0_state <= 2'd3;
        end else begin
            i_data_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_data_V_1_ack_out) & (1'b1 == o_data_V_data_V_1_vld_out))) begin
            o_data_V_data_V_1_sel_rd <= ~o_data_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_data_V_1_vld_in) & (1'b1 == o_data_V_data_V_1_ack_in))) begin
            o_data_V_data_V_1_sel_wr <= ~o_data_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_V_data_V_1_vld_in) & (1'b1 == o_data_V_data_V_1_ack_out) & (2'd3 == o_data_V_data_V_1_state)) | ((1'b0 == o_data_V_data_V_1_vld_in) & (2'd2 == o_data_V_data_V_1_state)))) begin
            o_data_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_V_data_V_1_vld_in) & (1'b0 == o_data_V_data_V_1_ack_out) & (2'd3 == o_data_V_data_V_1_state)) | ((1'b0 == o_data_V_data_V_1_ack_out) & (2'd1 == o_data_V_data_V_1_state)))) begin
            o_data_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_V_data_V_1_vld_in) & (2'd2 == o_data_V_data_V_1_state)) | ((1'b1 == o_data_V_data_V_1_ack_out) & (2'd1 == o_data_V_data_V_1_state)) | ((2'd3 == o_data_V_data_V_1_state) & ~((1'b1 == o_data_V_data_V_1_vld_in) & (1'b0 == o_data_V_data_V_1_ack_out)) & ~((1'b0 == o_data_V_data_V_1_vld_in) & (1'b1 == o_data_V_data_V_1_ack_out))))) begin
            o_data_V_data_V_1_state <= 2'd3;
        end else begin
            o_data_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_last_V_1_ack_out) & (1'b1 == o_data_V_last_V_1_vld_out))) begin
            o_data_V_last_V_1_sel_rd <= ~o_data_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_V_last_V_1_vld_in) & (1'b1 == o_data_V_last_V_1_ack_out) & (2'd3 == o_data_V_last_V_1_state)) | ((1'b0 == o_data_V_last_V_1_vld_in) & (2'd2 == o_data_V_last_V_1_state)))) begin
            o_data_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_V_last_V_1_vld_in) & (1'b0 == o_data_V_last_V_1_ack_out) & (2'd3 == o_data_V_last_V_1_state)) | ((1'b0 == o_data_V_last_V_1_ack_out) & (2'd1 == o_data_V_last_V_1_state)))) begin
            o_data_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_V_last_V_1_vld_in) & (2'd2 == o_data_V_last_V_1_state)) | ((1'b1 == o_data_V_last_V_1_ack_out) & (2'd1 == o_data_V_last_V_1_state)) | ((2'd3 == o_data_V_last_V_1_state) & ~((1'b1 == o_data_V_last_V_1_vld_in) & (1'b0 == o_data_V_last_V_1_ack_out)) & ~((1'b0 == o_data_V_last_V_1_vld_in) & (1'b1 == o_data_V_last_V_1_ack_out))))) begin
            o_data_V_last_V_1_state <= 2'd3;
        end else begin
            o_data_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_currentState_load_reg_474 <= currentState_load_reg_474;
        currentState_load_reg_474 <= currentState;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_474) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        buffQ_V_0[15 : 5] <= tmp_5_fu_385_p3[15 : 5];
        buffQ_V_1[15 : 5] <= buffQ_V_0[15 : 5];
        buffQ_V_10[15 : 5] <= buffQ_V_9[15 : 5];
        buffQ_V_11[15 : 5] <= buffQ_V_10[15 : 5];
        buffQ_V_12[15 : 5] <= buffQ_V_11[15 : 5];
        buffQ_V_13[15 : 5] <= buffQ_V_12[15 : 5];
        buffQ_V_14[15 : 5] <= buffQ_V_13[15 : 5];
        buffQ_V_2[15 : 5] <= buffQ_V_1[15 : 5];
        buffQ_V_3[15 : 5] <= buffQ_V_2[15 : 5];
        buffQ_V_4[15 : 5] <= buffQ_V_3[15 : 5];
        buffQ_V_5[15 : 5] <= buffQ_V_4[15 : 5];
        buffQ_V_6[15 : 5] <= buffQ_V_5[15 : 5];
        buffQ_V_7[15 : 5] <= buffQ_V_6[15 : 5];
        buffQ_V_8[15 : 5] <= buffQ_V_7[15 : 5];
        buffQ_V_9[15 : 5] <= buffQ_V_8[15 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_data_V_0_load_A)) begin
        i_data_V_data_V_0_payload_A <= i_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_data_V_0_load_B)) begin
        i_data_V_data_V_0_payload_B <= i_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_data_V_1_load_A)) begin
        o_data_V_data_V_1_payload_A <= tmp_data_V_fu_465_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_data_V_1_load_B)) begin
        o_data_V_data_V_1_payload_B <= tmp_data_V_fu_465_p1;
    end
end

always @ (*) begin
    if (((1'b0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd1 == currentState_load_reg_474))) begin
        i_data_TDATA_blk_n = i_data_V_data_V_0_state[1'd0];
    end else begin
        i_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_474) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_V_data_V_0_ack_out = 1'b1;
    end else begin
        i_data_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_V_data_V_0_sel)) begin
        i_data_V_data_V_0_data_out = i_data_V_data_V_0_payload_B;
    end else begin
        i_data_V_data_V_0_data_out = i_data_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_474) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_V_last_V_0_ack_out = 1'b1;
    end else begin
        i_data_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd1 == currentState_load_reg_474)) | ((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_currentState_load_reg_474)))) begin
        o_data_TDATA_blk_n = o_data_V_data_V_1_state[1'd1];
    end else begin
        o_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_V_data_V_1_sel)) begin
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_B;
    end else begin
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_474) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        o_data_V_data_V_1_vld_in = 1'b1;
    end else begin
        o_data_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_474) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        o_data_V_last_V_1_vld_in = 1'b1;
    end else begin
        o_data_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_474) & (1'b0 == i_data_V_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter2) & ((1'b0 == o_data_V_data_V_1_ack_in) | (1'b0 == o_data_V_last_V_1_ack_in))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd1 == currentState_load_reg_474) & (1'b0 == i_data_V_data_V_0_vld_out)) | (1'b1 == ap_block_state2_io))) | ((1'b1 == ap_enable_reg_pp0_iter2) & ((1'b0 == o_data_V_data_V_1_ack_in) | (1'b0 == o_data_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd1 == currentState_load_reg_474) & (1'b0 == i_data_V_data_V_0_vld_out)) | (1'b1 == ap_block_state2_io))) | ((1'b1 == ap_enable_reg_pp0_iter2) & ((1'b0 == o_data_V_data_V_1_ack_in) | (1'b0 == o_data_V_last_V_1_ack_in) | (1'b1 == ap_block_state3_io))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((1'd1 == currentState_load_reg_474) & (1'b0 == o_data_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((1'd1 == currentState_load_reg_474) & (1'b0 == i_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state3_io = ((1'd1 == ap_reg_pp0_iter1_currentState_load_reg_474) & (1'b0 == o_data_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((1'b0 == o_data_V_data_V_1_ack_in) | (1'b0 == o_data_V_last_V_1_ack_in));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign currentState_load_load_fu_133_p1 = currentState;

assign i_data_TREADY = i_data_V_last_V_0_state[1'd1];

assign i_data_V_data_V_0_ack_in = i_data_V_data_V_0_state[1'd1];

assign i_data_V_data_V_0_load_A = (i_data_V_data_V_0_state_cmp_full & ~i_data_V_data_V_0_sel_wr);

assign i_data_V_data_V_0_load_B = (i_data_V_data_V_0_sel_wr & i_data_V_data_V_0_state_cmp_full);

assign i_data_V_data_V_0_sel = i_data_V_data_V_0_sel_rd;

assign i_data_V_data_V_0_state_cmp_full = ((i_data_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_V_data_V_0_vld_in = i_data_TVALID;

assign i_data_V_data_V_0_vld_out = i_data_V_data_V_0_state[1'd0];

assign i_data_V_last_V_0_vld_in = i_data_TVALID;

assign o_data_TDATA = o_data_V_data_V_1_data_out;

assign o_data_TLAST = o_data_V_last_V_1_data_out;

assign o_data_TVALID = o_data_V_last_V_1_state[1'd0];

assign o_data_V_data_V_1_ack_in = o_data_V_data_V_1_state[1'd1];

assign o_data_V_data_V_1_ack_out = o_data_TREADY;

assign o_data_V_data_V_1_load_A = (o_data_V_data_V_1_state_cmp_full & ~o_data_V_data_V_1_sel_wr);

assign o_data_V_data_V_1_load_B = (o_data_V_data_V_1_sel_wr & o_data_V_data_V_1_state_cmp_full);

assign o_data_V_data_V_1_sel = o_data_V_data_V_1_sel_rd;

assign o_data_V_data_V_1_state_cmp_full = ((o_data_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_V_data_V_1_vld_out = o_data_V_data_V_1_state[1'd0];

assign o_data_V_last_V_1_ack_in = o_data_V_last_V_1_state[1'd1];

assign o_data_V_last_V_1_ack_out = o_data_TREADY;

assign o_data_V_last_V_1_data_out = 1'd0;

assign o_data_V_last_V_1_sel = o_data_V_last_V_1_sel_rd;

assign o_data_V_last_V_1_vld_out = o_data_V_last_V_1_state[1'd0];

assign p_Val2_6_5_fu_459_p2 = (tmp_fu_435_p2 + tmp3_fu_453_p2);

assign start_V_read_read_fu_108_p2 = start_V;

assign tmp1_fu_423_p2 = (buffQ_V_1 + buffQ_V_0);

assign tmp2_fu_429_p2 = (buffQ_V_7 + buffQ_V_2);

assign tmp3_fu_453_p2 = (tmp4_fu_441_p2 + tmp5_fu_447_p2);

assign tmp4_fu_441_p2 = (buffQ_V_12 + buffQ_V_9);

assign tmp5_fu_447_p2 = (tmp_5_fu_385_p3 + buffQ_V_14);

assign tmp_1_fu_381_p1 = i_data_V_data_V_0_data_out[10:0];

assign tmp_5_fu_385_p3 = {{tmp_1_fu_381_p1}, {5'd0}};

assign tmp_data_V_fu_465_p1 = p_Val2_6_5_fu_459_p2;

assign tmp_fu_435_p2 = (tmp1_fu_423_p2 + tmp2_fu_429_p2);

always @ (posedge ap_clk) begin
    buffQ_V_14[4:0] <= 5'b00000;
    buffQ_V_13[4:0] <= 5'b00000;
    buffQ_V_12[4:0] <= 5'b00000;
    buffQ_V_11[4:0] <= 5'b00000;
    buffQ_V_10[4:0] <= 5'b00000;
    buffQ_V_9[4:0] <= 5'b00000;
    buffQ_V_8[4:0] <= 5'b00000;
    buffQ_V_7[4:0] <= 5'b00000;
    buffQ_V_6[4:0] <= 5'b00000;
    buffQ_V_5[4:0] <= 5'b00000;
    buffQ_V_4[4:0] <= 5'b00000;
    buffQ_V_3[4:0] <= 5'b00000;
    buffQ_V_2[4:0] <= 5'b00000;
    buffQ_V_1[4:0] <= 5'b00000;
    buffQ_V_0[4:0] <= 5'b00000;
end

endmodule //MatcherRee
