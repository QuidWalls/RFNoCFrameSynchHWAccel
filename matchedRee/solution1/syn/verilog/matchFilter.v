// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 
`include "matchFilter_buffIcud.v"
`include "matchFilter_buffIbkb.v"
(* CORE_GENERATION_INFO="matchFilter,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.152000,HLS_SYN_LAT=641,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=254,HLS_SYN_LUT=486}" *)

module matchFilter (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [0:0] in_r_TLAST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;

reg    ap_rst_n_inv;
reg   [31:0] in_data_V_0_data_out;
wire    in_data_V_0_vld_in;
wire    in_data_V_0_vld_out;
wire    in_data_V_0_ack_in;
reg    in_data_V_0_ack_out;
reg   [31:0] in_data_V_0_payload_A;
reg   [31:0] in_data_V_0_payload_B;
reg    in_data_V_0_sel_rd;
reg    in_data_V_0_sel_wr;
wire    in_data_V_0_sel;
wire    in_data_V_0_load_A;
wire    in_data_V_0_load_B;
reg   [1:0] in_data_V_0_state;
wire    in_data_V_0_state_cmp_full;
reg   [0:0] in_last_V_0_data_out;
wire    in_last_V_0_vld_in;
wire    in_last_V_0_vld_out;
wire    in_last_V_0_ack_in;
reg    in_last_V_0_ack_out;
reg   [0:0] in_last_V_0_payload_A;
reg   [0:0] in_last_V_0_payload_B;
reg    in_last_V_0_sel_rd;
reg    in_last_V_0_sel_wr;
wire    in_last_V_0_sel;
wire    in_last_V_0_load_A;
wire    in_last_V_0_load_B;
reg   [1:0] in_last_V_0_state;
wire    in_last_V_0_state_cmp_full;
reg   [31:0] out_data_V_1_data_out;
reg    out_data_V_1_vld_in;
wire    out_data_V_1_vld_out;
wire    out_data_V_1_ack_in;
wire    out_data_V_1_ack_out;
reg   [31:0] out_data_V_1_payload_A;
reg   [31:0] out_data_V_1_payload_B;
reg    out_data_V_1_sel_rd;
reg    out_data_V_1_sel_wr;
wire    out_data_V_1_sel;
wire    out_data_V_1_load_A;
wire    out_data_V_1_load_B;
reg   [1:0] out_data_V_1_state;
wire    out_data_V_1_state_cmp_full;
reg   [0:0] out_last_V_1_data_out;
reg    out_last_V_1_vld_in;
wire    out_last_V_1_vld_out;
wire    out_last_V_1_ack_in;
wire    out_last_V_1_ack_out;
reg   [0:0] out_last_V_1_payload_A;
reg   [0:0] out_last_V_1_payload_B;
reg    out_last_V_1_sel_rd;
reg    out_last_V_1_sel_wr;
wire    out_last_V_1_sel;
wire    out_last_V_1_load_A;
wire    out_last_V_1_load_B;
reg   [1:0] out_last_V_1_state;
wire    out_last_V_1_state_cmp_full;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state5;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_i_fu_228_p2;
wire    ap_CS_fsm_state8;
wire   [6:0] a_1_fu_200_p2;
reg   [6:0] a_1_reg_283;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_194_p2;
wire   [31:0] buffIn_data_V_q0;
reg   [31:0] buffIn_data_V_load_reg_298;
wire    ap_CS_fsm_state3;
wire   [0:0] buffIn_last_V_q0;
reg   [0:0] buffIn_last_V_load_reg_303;
reg   [0:0] out_last_V_1_reg_308;
wire   [7:0] b_fu_234_p2;
reg   [7:0] b_reg_316;
reg    ap_block_state6_io;
wire   [31:0] p_Result_s_fu_245_p3;
wire   [15:0] tempI_V_fu_268_p2;
wire    ap_CS_fsm_state7;
wire   [15:0] tempQ_V_fu_274_p2;
reg   [6:0] buffIn_data_V_address0;
reg    buffIn_data_V_ce0;
reg    buffIn_data_V_we0;
reg   [31:0] buffIn_data_V_d0;
reg   [6:0] buffIn_last_V_address0;
reg    buffIn_last_V_ce0;
reg    buffIn_last_V_we0;
reg   [0:0] buffIn_last_V_d0;
reg   [6:0] a_reg_147;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state1;
reg   [15:0] p_Val2_3_reg_159;
reg   [15:0] p_Val2_1_reg_171;
reg   [7:0] b_i_reg_183;
wire   [63:0] tmp_4_fu_206_p1;
wire   [63:0] tmp_s_fu_212_p1;
wire   [63:0] tmp_2_i_fu_240_p1;
reg    ap_block_state8;
wire   [15:0] p_Val2_2_fu_254_p4;
wire   [15:0] p_Val2_4_fu_264_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 in_data_V_0_sel_rd = 1'b0;
#0 in_data_V_0_sel_wr = 1'b0;
#0 in_data_V_0_state = 2'd0;
#0 in_last_V_0_sel_rd = 1'b0;
#0 in_last_V_0_sel_wr = 1'b0;
#0 in_last_V_0_state = 2'd0;
#0 out_data_V_1_sel_rd = 1'b0;
#0 out_data_V_1_sel_wr = 1'b0;
#0 out_data_V_1_state = 2'd0;
#0 out_last_V_1_sel_rd = 1'b0;
#0 out_last_V_1_sel_wr = 1'b0;
#0 out_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 8'd1;
end

matchFilter_buffIbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
buffIn_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffIn_data_V_address0),
    .ce0(buffIn_data_V_ce0),
    .we0(buffIn_data_V_we0),
    .d0(buffIn_data_V_d0),
    .q0(buffIn_data_V_q0)
);

matchFilter_buffIcud #(
    .DataWidth( 1 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
buffIn_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffIn_last_V_address0),
    .ce0(buffIn_last_V_ce0),
    .we0(buffIn_last_V_we0),
    .d0(buffIn_last_V_d0),
    .q0(buffIn_last_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_V_0_ack_out == 1'b1) & (in_data_V_0_vld_out == 1'b1))) begin
            in_data_V_0_sel_rd <= ~in_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_V_0_ack_in == 1'b1) & (in_data_V_0_vld_in == 1'b1))) begin
            in_data_V_0_sel_wr <= ~in_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_V_0_state == 2'd2) & (in_data_V_0_vld_in == 1'b0)) | ((in_data_V_0_state == 2'd3) & (in_data_V_0_vld_in == 1'b0) & (in_data_V_0_ack_out == 1'b1)))) begin
            in_data_V_0_state <= 2'd2;
        end else if ((((in_data_V_0_state == 2'd1) & (in_data_V_0_ack_out == 1'b0)) | ((in_data_V_0_state == 2'd3) & (in_data_V_0_ack_out == 1'b0) & (in_data_V_0_vld_in == 1'b1)))) begin
            in_data_V_0_state <= 2'd1;
        end else if (((~((in_data_V_0_vld_in == 1'b0) & (in_data_V_0_ack_out == 1'b1)) & ~((in_data_V_0_ack_out == 1'b0) & (in_data_V_0_vld_in == 1'b1)) & (in_data_V_0_state == 2'd3)) | ((in_data_V_0_state == 2'd1) & (in_data_V_0_ack_out == 1'b1)) | ((in_data_V_0_state == 2'd2) & (in_data_V_0_vld_in == 1'b1)))) begin
            in_data_V_0_state <= 2'd3;
        end else begin
            in_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_out == 1'b1) & (in_last_V_0_vld_out == 1'b1))) begin
            in_last_V_0_sel_rd <= ~in_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_in == 1'b1) & (in_last_V_0_vld_in == 1'b1))) begin
            in_last_V_0_sel_wr <= ~in_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)))) begin
            in_last_V_0_state <= 2'd2;
        end else if ((((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd1;
        end else if (((~((in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)) & ~((in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)) & (in_last_V_0_state == 2'd3)) | ((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b1)) | ((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd3;
        end else begin
            in_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_V_1_ack_out == 1'b1) & (out_data_V_1_vld_out == 1'b1))) begin
            out_data_V_1_sel_rd <= ~out_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_V_1_ack_in == 1'b1) & (out_data_V_1_vld_in == 1'b1))) begin
            out_data_V_1_sel_wr <= ~out_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_V_1_state == 2'd2) & (out_data_V_1_vld_in == 1'b0)) | ((out_data_V_1_state == 2'd3) & (out_data_V_1_vld_in == 1'b0) & (out_data_V_1_ack_out == 1'b1)))) begin
            out_data_V_1_state <= 2'd2;
        end else if ((((out_data_V_1_state == 2'd1) & (out_data_V_1_ack_out == 1'b0)) | ((out_data_V_1_state == 2'd3) & (out_data_V_1_ack_out == 1'b0) & (out_data_V_1_vld_in == 1'b1)))) begin
            out_data_V_1_state <= 2'd1;
        end else if (((~((out_data_V_1_vld_in == 1'b0) & (out_data_V_1_ack_out == 1'b1)) & ~((out_data_V_1_ack_out == 1'b0) & (out_data_V_1_vld_in == 1'b1)) & (out_data_V_1_state == 2'd3)) | ((out_data_V_1_state == 2'd1) & (out_data_V_1_ack_out == 1'b1)) | ((out_data_V_1_state == 2'd2) & (out_data_V_1_vld_in == 1'b1)))) begin
            out_data_V_1_state <= 2'd3;
        end else begin
            out_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_out == 1'b1) & (out_last_V_1_vld_out == 1'b1))) begin
            out_last_V_1_sel_rd <= ~out_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_in == 1'b1) & (out_last_V_1_vld_in == 1'b1))) begin
            out_last_V_1_sel_wr <= ~out_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)))) begin
            out_last_V_1_state <= 2'd2;
        end else if ((((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_ack_out == 1'b0) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd1;
        end else if (((~((out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)) & ~((out_last_V_1_ack_out == 1'b0) & (out_last_V_1_vld_in == 1'b1)) & (out_last_V_1_state == 2'd3)) | ((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b1)) | ((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd3;
        end else begin
            out_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        a_reg_147 <= 7'd127;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_reg_147 <= a_1_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_i_reg_183 <= b_reg_316;
    end else if (((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        b_i_reg_183 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_1_reg_171 <= tempI_V_fu_268_p2;
    end else if (((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_1_reg_171 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_3_reg_159 <= tempQ_V_fu_274_p2;
    end else if (((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_3_reg_159 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_1_reg_283 <= a_1_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
        b_reg_316 <= b_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffIn_data_V_load_reg_298 <= buffIn_data_V_q0;
        buffIn_last_V_load_reg_303 <= buffIn_last_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_V_0_load_A == 1'b1)) begin
        in_data_V_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_V_0_load_B == 1'b1)) begin
        in_data_V_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_A == 1'b1)) begin
        in_last_V_0_payload_A <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_B == 1'b1)) begin
        in_last_V_0_payload_B <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_V_1_load_A == 1'b1)) begin
        out_data_V_1_payload_A <= p_Result_s_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_V_1_load_B == 1'b1)) begin
        out_data_V_1_payload_B <= p_Result_s_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_A == 1'b1)) begin
        out_last_V_1_payload_A <= out_last_V_1_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_B == 1'b1)) begin
        out_last_V_1_payload_B <= out_last_V_1_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if (((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        out_last_V_1_reg_308 <= in_last_V_0_data_out;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffIn_data_V_address0 = tmp_2_i_fu_240_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffIn_data_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_data_V_address0 = tmp_s_fu_212_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffIn_data_V_address0 = tmp_4_fu_206_p1;
    end else begin
        buffIn_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        buffIn_data_V_ce0 = 1'b1;
    end else begin
        buffIn_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffIn_data_V_d0 = in_data_V_0_data_out;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_data_V_d0 = buffIn_data_V_load_reg_298;
    end else begin
        buffIn_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        buffIn_data_V_we0 = 1'b1;
    end else begin
        buffIn_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffIn_last_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_last_V_address0 = tmp_s_fu_212_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffIn_last_V_address0 = tmp_4_fu_206_p1;
    end else begin
        buffIn_last_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        buffIn_last_V_ce0 = 1'b1;
    end else begin
        buffIn_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffIn_last_V_d0 = in_last_V_0_data_out;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_last_V_d0 = buffIn_last_V_load_reg_303;
    end else begin
        buffIn_last_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        buffIn_last_V_we0 = 1'b1;
    end else begin
        buffIn_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        in_data_V_0_ack_out = 1'b1;
    end else begin
        in_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_V_0_sel == 1'b1)) begin
        in_data_V_0_data_out = in_data_V_0_payload_B;
    end else begin
        in_data_V_0_data_out = in_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        in_last_V_0_ack_out = 1'b1;
    end else begin
        in_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_last_V_0_sel == 1'b1)) begin
        in_last_V_0_data_out = in_last_V_0_payload_B;
    end else begin
        in_last_V_0_data_out = in_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_TDATA_blk_n = in_data_V_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_data_V_1_sel == 1'b1)) begin
        out_data_V_1_data_out = out_data_V_1_payload_B;
    end else begin
        out_data_V_1_data_out = out_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_228_p2 == 1'd1) & (1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
        out_data_V_1_vld_in = 1'b1;
    end else begin
        out_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_last_V_1_sel == 1'b1)) begin
        out_last_V_1_data_out = out_last_V_1_payload_B;
    end else begin
        out_last_V_1_data_out = out_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_228_p2 == 1'd1) & (1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
        out_last_V_1_vld_in = 1'b1;
    end else begin
        out_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((exitcond_i_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        out_r_TDATA_blk_n = out_data_V_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((in_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_i_fu_228_p2 == 1'd1) & (1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((exitcond_i_fu_228_p2 == 1'd0) & (1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if ((~((out_last_V_1_ack_in == 1'b0) | (out_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_fu_200_p2 = ($signed(a_reg_147) + $signed(7'd127));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state6_io = ((exitcond_i_fu_228_p2 == 1'd1) & (out_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((out_last_V_1_ack_in == 1'b0) | (out_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_fu_234_p2 = (b_i_reg_183 + 8'd1);

assign exitcond_i_fu_228_p2 = ((b_i_reg_183 == 8'd128) ? 1'b1 : 1'b0);

assign in_data_V_0_ack_in = in_data_V_0_state[1'd1];

assign in_data_V_0_load_A = (in_data_V_0_state_cmp_full & ~in_data_V_0_sel_wr);

assign in_data_V_0_load_B = (in_data_V_0_state_cmp_full & in_data_V_0_sel_wr);

assign in_data_V_0_sel = in_data_V_0_sel_rd;

assign in_data_V_0_state_cmp_full = ((in_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_V_0_vld_in = in_r_TVALID;

assign in_data_V_0_vld_out = in_data_V_0_state[1'd0];

assign in_last_V_0_ack_in = in_last_V_0_state[1'd1];

assign in_last_V_0_load_A = (in_last_V_0_state_cmp_full & ~in_last_V_0_sel_wr);

assign in_last_V_0_load_B = (in_last_V_0_state_cmp_full & in_last_V_0_sel_wr);

assign in_last_V_0_sel = in_last_V_0_sel_rd;

assign in_last_V_0_state_cmp_full = ((in_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_last_V_0_vld_in = in_r_TVALID;

assign in_last_V_0_vld_out = in_last_V_0_state[1'd0];

assign in_r_TREADY = in_last_V_0_state[1'd1];

assign out_data_V_1_ack_in = out_data_V_1_state[1'd1];

assign out_data_V_1_ack_out = out_r_TREADY;

assign out_data_V_1_load_A = (out_data_V_1_state_cmp_full & ~out_data_V_1_sel_wr);

assign out_data_V_1_load_B = (out_data_V_1_state_cmp_full & out_data_V_1_sel_wr);

assign out_data_V_1_sel = out_data_V_1_sel_rd;

assign out_data_V_1_state_cmp_full = ((out_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_V_1_vld_out = out_data_V_1_state[1'd0];

assign out_last_V_1_ack_in = out_last_V_1_state[1'd1];

assign out_last_V_1_ack_out = out_r_TREADY;

assign out_last_V_1_load_A = (out_last_V_1_state_cmp_full & ~out_last_V_1_sel_wr);

assign out_last_V_1_load_B = (out_last_V_1_state_cmp_full & out_last_V_1_sel_wr);

assign out_last_V_1_sel = out_last_V_1_sel_rd;

assign out_last_V_1_state_cmp_full = ((out_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_last_V_1_vld_out = out_last_V_1_state[1'd0];

assign out_r_TDATA = out_data_V_1_data_out;

assign out_r_TLAST = out_last_V_1_data_out;

assign out_r_TVALID = out_last_V_1_state[1'd0];

assign p_Result_s_fu_245_p3 = {{p_Val2_1_reg_171}, {p_Val2_3_reg_159}};

assign p_Val2_2_fu_254_p4 = {{buffIn_data_V_q0[31:16]}};

assign p_Val2_4_fu_264_p1 = buffIn_data_V_q0[15:0];

assign tempI_V_fu_268_p2 = (p_Val2_1_reg_171 + p_Val2_2_fu_254_p4);

assign tempQ_V_fu_274_p2 = (p_Val2_3_reg_159 + p_Val2_4_fu_264_p1);

assign tmp_2_i_fu_240_p1 = b_i_reg_183;

assign tmp_4_fu_206_p1 = a_1_fu_200_p2;

assign tmp_fu_194_p2 = ((a_reg_147 == 7'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_212_p1 = a_reg_147;

endmodule //matchFilter
