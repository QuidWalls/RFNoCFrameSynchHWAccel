// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matchFilter,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.328000,HLS_SYN_LAT=514,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=464,HLS_SYN_LUT=451}" *)

module matchFilter (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [0:0] in_r_TLAST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;

reg    ap_rst_n_inv;
reg   [31:0] in_data_V_0_data_out;
wire    in_data_V_0_vld_in;
wire    in_data_V_0_vld_out;
wire    in_data_V_0_ack_in;
reg    in_data_V_0_ack_out;
reg   [31:0] in_data_V_0_payload_A;
reg   [31:0] in_data_V_0_payload_B;
reg    in_data_V_0_sel_rd;
reg    in_data_V_0_sel_wr;
wire    in_data_V_0_sel;
wire    in_data_V_0_load_A;
wire    in_data_V_0_load_B;
reg   [1:0] in_data_V_0_state;
wire    in_data_V_0_state_cmp_full;
reg   [0:0] in_last_V_0_data_out;
wire    in_last_V_0_vld_in;
wire    in_last_V_0_vld_out;
wire    in_last_V_0_ack_in;
reg    in_last_V_0_ack_out;
reg   [0:0] in_last_V_0_payload_A;
reg   [0:0] in_last_V_0_payload_B;
reg    in_last_V_0_sel_rd;
reg    in_last_V_0_sel_wr;
wire    in_last_V_0_sel;
wire    in_last_V_0_load_A;
wire    in_last_V_0_load_B;
reg   [1:0] in_last_V_0_state;
wire    in_last_V_0_state_cmp_full;
reg   [31:0] out_data_V_1_data_out;
reg    out_data_V_1_vld_in;
wire    out_data_V_1_vld_out;
wire    out_data_V_1_ack_in;
wire    out_data_V_1_ack_out;
reg   [31:0] out_data_V_1_payload_A;
reg   [31:0] out_data_V_1_payload_B;
reg    out_data_V_1_sel_rd;
reg    out_data_V_1_sel_wr;
wire    out_data_V_1_sel;
wire    out_data_V_1_load_A;
wire    out_data_V_1_load_B;
reg   [1:0] out_data_V_1_state;
wire    out_data_V_1_state_cmp_full;
reg   [0:0] out_last_V_1_data_out;
reg    out_last_V_1_vld_in;
wire    out_last_V_1_vld_out;
wire    out_last_V_1_ack_in;
wire    out_last_V_1_ack_out;
reg   [0:0] out_last_V_1_payload_A;
reg   [0:0] out_last_V_1_payload_B;
reg    out_last_V_1_sel_rd;
reg    out_last_V_1_sel_wr;
wire    out_last_V_1_sel;
wire    out_last_V_1_load_A;
wire    out_last_V_1_load_B;
reg   [1:0] out_last_V_1_state;
wire    out_last_V_1_state_cmp_full;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_i_fu_242_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] a_cast2_fu_205_p1;
reg   [31:0] a_cast2_reg_413;
wire    ap_CS_fsm_state2;
wire   [6:0] a_1_fu_215_p2;
reg   [6:0] a_1_reg_422;
wire   [0:0] tmp_fu_209_p2;
reg   [0:0] out_last_V_1_reg_437;
wire   [7:0] b_fu_248_p2;
reg   [7:0] b_reg_445;
reg    ap_block_state5_io;
wire  signed [31:0] p_Result_s_fu_366_p1;
wire   [15:0] tempI_V_fu_401_p2;
wire    ap_CS_fsm_state6;
wire   [15:0] tempQ_V_fu_407_p2;
reg   [6:0] buffIn_data_V_address0;
reg    buffIn_data_V_ce0;
reg    buffIn_data_V_we0;
reg   [31:0] buffIn_data_V_d0;
wire   [31:0] buffIn_data_V_q0;
reg   [6:0] buffIn_last_V_address0;
reg    buffIn_last_V_ce0;
reg    buffIn_last_V_we0;
reg   [0:0] buffIn_last_V_d0;
wire   [0:0] buffIn_last_V_q0;
reg   [6:0] a_reg_159;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state1;
reg   [15:0] p_Val2_1_reg_170;
reg   [15:0] p_Val2_s_reg_182;
reg   [7:0] b_i_reg_194;
wire   [31:0] a_1_cast_fu_221_p1;
wire   [31:0] b_i_cast1_fu_237_p1;
reg    ap_block_state7;
wire   [4:0] tmp_3_fu_272_p1;
wire   [10:0] ret_V_fu_254_p4;
wire   [0:0] tmp_8_i_fu_276_p2;
wire   [10:0] ret_V_1_fu_282_p2;
wire   [0:0] tmp_2_fu_264_p3;
wire   [10:0] p_i_fu_288_p3;
wire   [4:0] tmp_5_fu_322_p1;
wire   [10:0] ret_V_2_fu_304_p4;
wire   [0:0] tmp_i_fu_326_p2;
wire   [10:0] ret_V_3_fu_332_p2;
wire   [0:0] tmp_4_fu_314_p3;
wire   [10:0] p_1_i_fu_338_p3;
wire   [10:0] p_3_i_fu_346_p3;
wire   [10:0] p_2_i_fu_296_p3;
wire  signed [15:0] loc_V_1_trunc_i_fu_354_p1;
wire   [26:0] tmp_i_9_fu_358_p3;
wire   [10:0] tmp_1_fu_371_p4;
wire   [10:0] tmp_6_fu_389_p1;
wire   [15:0] p_Val2_3_fu_381_p3;
wire   [15:0] p_Val2_4_fu_393_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 in_data_V_0_sel_rd = 1'b0;
#0 in_data_V_0_sel_wr = 1'b0;
#0 in_data_V_0_state = 2'd0;
#0 in_last_V_0_sel_rd = 1'b0;
#0 in_last_V_0_sel_wr = 1'b0;
#0 in_last_V_0_state = 2'd0;
#0 out_data_V_1_sel_rd = 1'b0;
#0 out_data_V_1_sel_wr = 1'b0;
#0 out_data_V_1_state = 2'd0;
#0 out_last_V_1_sel_rd = 1'b0;
#0 out_last_V_1_sel_wr = 1'b0;
#0 out_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 7'd1;
end

matchFilter_buffIbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
buffIn_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffIn_data_V_address0),
    .ce0(buffIn_data_V_ce0),
    .we0(buffIn_data_V_we0),
    .d0(buffIn_data_V_d0),
    .q0(buffIn_data_V_q0)
);

matchFilter_buffIcud #(
    .DataWidth( 1 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
buffIn_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffIn_last_V_address0),
    .ce0(buffIn_last_V_ce0),
    .we0(buffIn_last_V_we0),
    .d0(buffIn_last_V_d0),
    .q0(buffIn_last_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in_data_V_0_ack_out) & (1'b1 == in_data_V_0_vld_out))) begin
            in_data_V_0_sel_rd <= ~in_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in_data_V_0_vld_in) & (1'b1 == in_data_V_0_ack_in))) begin
            in_data_V_0_sel_wr <= ~in_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in_data_V_0_vld_in) & (1'b1 == in_data_V_0_ack_out) & (in_data_V_0_state == 2'd3)) | ((1'b0 == in_data_V_0_vld_in) & (in_data_V_0_state == 2'd2)))) begin
            in_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == in_data_V_0_vld_in) & (1'b0 == in_data_V_0_ack_out) & (in_data_V_0_state == 2'd3)) | ((1'b0 == in_data_V_0_ack_out) & (in_data_V_0_state == 2'd1)))) begin
            in_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == in_data_V_0_vld_in) & (in_data_V_0_state == 2'd2)) | ((1'b1 == in_data_V_0_ack_out) & (in_data_V_0_state == 2'd1)) | ((in_data_V_0_state == 2'd3) & ~((1'b1 == in_data_V_0_vld_in) & (1'b0 == in_data_V_0_ack_out)) & ~((1'b0 == in_data_V_0_vld_in) & (1'b1 == in_data_V_0_ack_out))))) begin
            in_data_V_0_state <= 2'd3;
        end else begin
            in_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in_last_V_0_ack_out) & (1'b1 == in_last_V_0_vld_out))) begin
            in_last_V_0_sel_rd <= ~in_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in_last_V_0_vld_in) & (1'b1 == in_last_V_0_ack_in))) begin
            in_last_V_0_sel_wr <= ~in_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in_last_V_0_vld_in) & (1'b1 == in_last_V_0_ack_out) & (2'd3 == in_last_V_0_state)) | ((1'b0 == in_last_V_0_vld_in) & (2'd2 == in_last_V_0_state)))) begin
            in_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == in_last_V_0_vld_in) & (1'b0 == in_last_V_0_ack_out) & (2'd3 == in_last_V_0_state)) | ((1'b0 == in_last_V_0_ack_out) & (2'd1 == in_last_V_0_state)))) begin
            in_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == in_last_V_0_vld_in) & (2'd2 == in_last_V_0_state)) | ((1'b1 == in_last_V_0_ack_out) & (2'd1 == in_last_V_0_state)) | ((2'd3 == in_last_V_0_state) & ~((1'b1 == in_last_V_0_vld_in) & (1'b0 == in_last_V_0_ack_out)) & ~((1'b0 == in_last_V_0_vld_in) & (1'b1 == in_last_V_0_ack_out))))) begin
            in_last_V_0_state <= 2'd3;
        end else begin
            in_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_data_V_1_ack_out) & (1'b1 == out_data_V_1_vld_out))) begin
            out_data_V_1_sel_rd <= ~out_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_data_V_1_vld_in) & (1'b1 == out_data_V_1_ack_in))) begin
            out_data_V_1_sel_wr <= ~out_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_data_V_1_vld_in) & (1'b1 == out_data_V_1_ack_out) & (2'd3 == out_data_V_1_state)) | ((1'b0 == out_data_V_1_vld_in) & (2'd2 == out_data_V_1_state)))) begin
            out_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_data_V_1_vld_in) & (1'b0 == out_data_V_1_ack_out) & (2'd3 == out_data_V_1_state)) | ((1'b0 == out_data_V_1_ack_out) & (2'd1 == out_data_V_1_state)))) begin
            out_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_data_V_1_vld_in) & (2'd2 == out_data_V_1_state)) | ((1'b1 == out_data_V_1_ack_out) & (2'd1 == out_data_V_1_state)) | ((2'd3 == out_data_V_1_state) & ~((1'b1 == out_data_V_1_vld_in) & (1'b0 == out_data_V_1_ack_out)) & ~((1'b0 == out_data_V_1_vld_in) & (1'b1 == out_data_V_1_ack_out))))) begin
            out_data_V_1_state <= 2'd3;
        end else begin
            out_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_last_V_1_ack_out) & (1'b1 == out_last_V_1_vld_out))) begin
            out_last_V_1_sel_rd <= ~out_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_last_V_1_vld_in) & (1'b1 == out_last_V_1_ack_in))) begin
            out_last_V_1_sel_wr <= ~out_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_last_V_1_vld_in) & (1'b1 == out_last_V_1_ack_out) & (2'd3 == out_last_V_1_state)) | ((1'b0 == out_last_V_1_vld_in) & (2'd2 == out_last_V_1_state)))) begin
            out_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_last_V_1_vld_in) & (1'b0 == out_last_V_1_ack_out) & (2'd3 == out_last_V_1_state)) | ((1'b0 == out_last_V_1_ack_out) & (2'd1 == out_last_V_1_state)))) begin
            out_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_last_V_1_vld_in) & (2'd2 == out_last_V_1_state)) | ((1'b1 == out_last_V_1_ack_out) & (2'd1 == out_last_V_1_state)) | ((2'd3 == out_last_V_1_state) & ~((1'b1 == out_last_V_1_vld_in) & (1'b0 == out_last_V_1_ack_out)) & ~((1'b0 == out_last_V_1_vld_in) & (1'b1 == out_last_V_1_ack_out))))) begin
            out_last_V_1_state <= 2'd3;
        end else begin
            out_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        a_reg_159 <= 7'd127;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_reg_159 <= a_1_reg_422;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_i_reg_194 <= b_reg_445;
    end else if (((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1))) begin
        b_i_reg_194 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_1_reg_170 <= tempQ_V_fu_407_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1))) begin
        p_Val2_1_reg_170 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_s_reg_182 <= tempI_V_fu_401_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1))) begin
        p_Val2_s_reg_182 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_209_p2))) begin
        a_1_reg_422 <= a_1_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_cast2_reg_413[6 : 0] <= a_cast2_fu_205_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (ap_block_state5_io == 1'b0))) begin
        b_reg_445 <= b_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_data_V_0_load_A)) begin
        in_data_V_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_data_V_0_load_B)) begin
        in_data_V_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_last_V_0_load_A)) begin
        in_last_V_0_payload_A <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_last_V_0_load_B)) begin
        in_last_V_0_payload_B <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_data_V_1_load_A)) begin
        out_data_V_1_payload_A <= p_Result_s_fu_366_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_data_V_1_load_B)) begin
        out_data_V_1_payload_B <= p_Result_s_fu_366_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_last_V_1_load_A)) begin
        out_last_V_1_payload_A <= out_last_V_1_reg_437;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_last_V_1_load_B)) begin
        out_last_V_1_payload_B <= out_last_V_1_reg_437;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1))) begin
        out_last_V_1_reg_437 <= in_last_V_0_data_out;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffIn_data_V_address0 = b_i_cast1_fu_237_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_data_V_address0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffIn_data_V_address0 = a_cast2_reg_413;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffIn_data_V_address0 = a_1_cast_fu_221_p1;
    end else begin
        buffIn_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (ap_block_state5_io == 1'b0)) | (1'b1 == ap_CS_fsm_state3))) begin
        buffIn_data_V_ce0 = 1'b1;
    end else begin
        buffIn_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_data_V_d0 = in_data_V_0_data_out;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffIn_data_V_d0 = buffIn_data_V_q0;
    end else begin
        buffIn_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        buffIn_data_V_we0 = 1'b1;
    end else begin
        buffIn_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_last_V_address0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffIn_last_V_address0 = a_cast2_reg_413;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffIn_last_V_address0 = a_1_cast_fu_221_p1;
    end else begin
        buffIn_last_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        buffIn_last_V_ce0 = 1'b1;
    end else begin
        buffIn_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_last_V_d0 = in_last_V_0_data_out;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffIn_last_V_d0 = buffIn_last_V_q0;
    end else begin
        buffIn_last_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        buffIn_last_V_we0 = 1'b1;
    end else begin
        buffIn_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1))) begin
        in_data_V_0_ack_out = 1'b1;
    end else begin
        in_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in_data_V_0_sel)) begin
        in_data_V_0_data_out = in_data_V_0_payload_B;
    end else begin
        in_data_V_0_data_out = in_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1))) begin
        in_last_V_0_ack_out = 1'b1;
    end else begin
        in_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in_last_V_0_sel)) begin
        in_last_V_0_data_out = in_last_V_0_payload_B;
    end else begin
        in_last_V_0_data_out = in_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_TDATA_blk_n = in_data_V_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out_data_V_1_sel)) begin
        out_data_V_1_data_out = out_data_V_1_payload_B;
    end else begin
        out_data_V_1_data_out = out_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_i_fu_242_p2) & (ap_block_state5_io == 1'b0))) begin
        out_data_V_1_vld_in = 1'b1;
    end else begin
        out_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == out_last_V_1_sel)) begin
        out_last_V_1_data_out = out_last_V_1_payload_B;
    end else begin
        out_last_V_1_data_out = out_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_i_fu_242_p2) & (ap_block_state5_io == 1'b0))) begin
        out_last_V_1_vld_in = 1'b1;
    end else begin
        out_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_i_fu_242_p2)) | (1'b1 == ap_CS_fsm_state7))) begin
        out_r_TDATA_blk_n = out_data_V_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_209_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (in_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_i_fu_242_p2) & (ap_block_state5_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b1 == ap_CS_fsm_state5) & (ap_block_state5_io == 1'b0) & (1'd0 == exitcond_i_fu_242_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ~((1'b0 == out_data_V_1_ack_in) | (1'b0 == out_last_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_cast_fu_221_p1 = a_1_fu_215_p2;

assign a_1_fu_215_p2 = ($signed(a_reg_159) + $signed(7'd127));

assign a_cast2_fu_205_p1 = a_reg_159;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state5_io = ((1'd1 == exitcond_i_fu_242_p2) & (1'b0 == out_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state7 = ((1'b0 == out_data_V_1_ack_in) | (1'b0 == out_last_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_fu_248_p2 = (b_i_reg_194 + 8'd1);

assign b_i_cast1_fu_237_p1 = b_i_reg_194;

assign exitcond_i_fu_242_p2 = ((b_i_reg_194 == 8'd128) ? 1'b1 : 1'b0);

assign in_data_V_0_ack_in = in_data_V_0_state[1'd1];

assign in_data_V_0_load_A = (in_data_V_0_state_cmp_full & ~in_data_V_0_sel_wr);

assign in_data_V_0_load_B = (in_data_V_0_sel_wr & in_data_V_0_state_cmp_full);

assign in_data_V_0_sel = in_data_V_0_sel_rd;

assign in_data_V_0_state_cmp_full = ((in_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_V_0_vld_in = in_r_TVALID;

assign in_data_V_0_vld_out = in_data_V_0_state[1'd0];

assign in_last_V_0_ack_in = in_last_V_0_state[1'd1];

assign in_last_V_0_load_A = (in_last_V_0_state_cmp_full & ~in_last_V_0_sel_wr);

assign in_last_V_0_load_B = (in_last_V_0_sel_wr & in_last_V_0_state_cmp_full);

assign in_last_V_0_sel = in_last_V_0_sel_rd;

assign in_last_V_0_state_cmp_full = ((in_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_last_V_0_vld_in = in_r_TVALID;

assign in_last_V_0_vld_out = in_last_V_0_state[1'd0];

assign in_r_TREADY = in_last_V_0_state[1'd1];

assign loc_V_1_trunc_i_fu_354_p1 = $signed(p_3_i_fu_346_p3);

assign out_data_V_1_ack_in = out_data_V_1_state[1'd1];

assign out_data_V_1_ack_out = out_r_TREADY;

assign out_data_V_1_load_A = (out_data_V_1_state_cmp_full & ~out_data_V_1_sel_wr);

assign out_data_V_1_load_B = (out_data_V_1_sel_wr & out_data_V_1_state_cmp_full);

assign out_data_V_1_sel = out_data_V_1_sel_rd;

assign out_data_V_1_state_cmp_full = ((out_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_V_1_vld_out = out_data_V_1_state[1'd0];

assign out_last_V_1_ack_in = out_last_V_1_state[1'd1];

assign out_last_V_1_ack_out = out_r_TREADY;

assign out_last_V_1_load_A = (out_last_V_1_state_cmp_full & ~out_last_V_1_sel_wr);

assign out_last_V_1_load_B = (out_last_V_1_sel_wr & out_last_V_1_state_cmp_full);

assign out_last_V_1_sel = out_last_V_1_sel_rd;

assign out_last_V_1_state_cmp_full = ((out_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_last_V_1_vld_out = out_last_V_1_state[1'd0];

assign out_r_TDATA = out_data_V_1_data_out;

assign out_r_TLAST = out_last_V_1_data_out;

assign out_r_TVALID = out_last_V_1_state[1'd0];

assign p_1_i_fu_338_p3 = ((tmp_i_fu_326_p2[0:0] === 1'b1) ? ret_V_2_fu_304_p4 : ret_V_3_fu_332_p2);

assign p_2_i_fu_296_p3 = ((tmp_2_fu_264_p3[0:0] === 1'b1) ? p_i_fu_288_p3 : ret_V_fu_254_p4);

assign p_3_i_fu_346_p3 = ((tmp_4_fu_314_p3[0:0] === 1'b1) ? p_1_i_fu_338_p3 : ret_V_2_fu_304_p4);

assign p_Result_s_fu_366_p1 = $signed(tmp_i_9_fu_358_p3);

assign p_Val2_3_fu_381_p3 = {{tmp_1_fu_371_p4}, {5'd0}};

assign p_Val2_4_fu_393_p3 = {{tmp_6_fu_389_p1}, {5'd0}};

assign p_i_fu_288_p3 = ((tmp_8_i_fu_276_p2[0:0] === 1'b1) ? ret_V_fu_254_p4 : ret_V_1_fu_282_p2);

assign ret_V_1_fu_282_p2 = (11'd1 + ret_V_fu_254_p4);

assign ret_V_2_fu_304_p4 = {{p_Val2_1_reg_170[15:5]}};

assign ret_V_3_fu_332_p2 = (11'd1 + ret_V_2_fu_304_p4);

assign ret_V_fu_254_p4 = {{p_Val2_s_reg_182[15:5]}};

assign tempI_V_fu_401_p2 = (p_Val2_s_reg_182 + p_Val2_3_fu_381_p3);

assign tempQ_V_fu_407_p2 = (p_Val2_1_reg_170 + p_Val2_4_fu_393_p3);

assign tmp_1_fu_371_p4 = {{buffIn_data_V_q0[26:16]}};

assign tmp_2_fu_264_p3 = p_Val2_s_reg_182[32'd15];

assign tmp_3_fu_272_p1 = p_Val2_s_reg_182[4:0];

assign tmp_4_fu_314_p3 = p_Val2_1_reg_170[32'd15];

assign tmp_5_fu_322_p1 = p_Val2_1_reg_170[4:0];

assign tmp_6_fu_389_p1 = buffIn_data_V_q0[10:0];

assign tmp_8_i_fu_276_p2 = ((tmp_3_fu_272_p1 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_fu_209_p2 = ((a_reg_159 == 7'd0) ? 1'b1 : 1'b0);

assign tmp_i_9_fu_358_p3 = {{p_2_i_fu_296_p3}, {loc_V_1_trunc_i_fu_354_p1}};

assign tmp_i_fu_326_p2 = ((tmp_5_fu_322_p1 == 5'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    a_cast2_reg_413[31:7] <= 25'b0000000000000000000000000;
end

endmodule //matchFilter
