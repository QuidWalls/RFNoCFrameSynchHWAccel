// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matchFilter,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.325667,HLS_SYN_LAT=897,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=2436,HLS_SYN_LUT=1011}" *)

module matchFilter (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [0:0] in_r_TLAST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;

reg    ap_rst_n_inv;
reg   [31:0] in_V_data_V_0_data_out;
wire    in_V_data_V_0_vld_in;
wire    in_V_data_V_0_vld_out;
wire    in_V_data_V_0_ack_in;
reg    in_V_data_V_0_ack_out;
reg   [31:0] in_V_data_V_0_payload_A;
reg   [31:0] in_V_data_V_0_payload_B;
reg    in_V_data_V_0_sel_rd;
reg    in_V_data_V_0_sel_wr;
wire    in_V_data_V_0_sel;
wire    in_V_data_V_0_load_A;
wire    in_V_data_V_0_load_B;
reg   [1:0] in_V_data_V_0_state;
wire    in_V_data_V_0_state_cmp_full;
reg   [0:0] in_V_last_V_0_data_out;
wire    in_V_last_V_0_vld_in;
wire    in_V_last_V_0_vld_out;
wire    in_V_last_V_0_ack_in;
reg    in_V_last_V_0_ack_out;
reg   [0:0] in_V_last_V_0_payload_A;
reg   [0:0] in_V_last_V_0_payload_B;
reg    in_V_last_V_0_sel_rd;
reg    in_V_last_V_0_sel_wr;
wire    in_V_last_V_0_sel;
wire    in_V_last_V_0_load_A;
wire    in_V_last_V_0_load_B;
reg   [1:0] in_V_last_V_0_state;
wire    in_V_last_V_0_state_cmp_full;
reg   [31:0] out_V_data_V_1_data_out;
reg    out_V_data_V_1_vld_in;
wire    out_V_data_V_1_vld_out;
wire    out_V_data_V_1_ack_in;
wire    out_V_data_V_1_ack_out;
reg   [31:0] out_V_data_V_1_payload_A;
reg   [31:0] out_V_data_V_1_payload_B;
reg    out_V_data_V_1_sel_rd;
reg    out_V_data_V_1_sel_wr;
wire    out_V_data_V_1_sel;
wire    out_V_data_V_1_load_A;
wire    out_V_data_V_1_load_B;
reg   [1:0] out_V_data_V_1_state;
wire    out_V_data_V_1_state_cmp_full;
reg   [0:0] out_V_last_V_1_data_out;
reg    out_V_last_V_1_vld_in;
wire    out_V_last_V_1_vld_out;
wire    out_V_last_V_1_ack_in;
wire    out_V_last_V_1_ack_out;
reg   [0:0] out_V_last_V_1_payload_A;
reg   [0:0] out_V_last_V_1_payload_B;
reg    out_V_last_V_1_sel_rd;
reg    out_V_last_V_1_sel_wr;
wire    out_V_last_V_1_sel;
wire    out_V_last_V_1_load_A;
wire    out_V_last_V_1_load_B;
reg   [1:0] out_V_last_V_1_state;
wire    out_V_last_V_1_state_cmp_full;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_i_fu_229_p2;
wire    ap_CS_fsm_state10;
reg   [31:0] tmp_data_V_reg_545;
reg   [0:0] tmp_last_V_reg_550;
wire   [31:0] a_cast2_fu_202_p1;
reg   [31:0] a_cast2_reg_556;
wire    ap_CS_fsm_state3;
wire   [6:0] a_1_fu_212_p2;
reg   [6:0] a_1_reg_565;
wire   [0:0] tmp_fu_206_p2;
wire   [31:0] buffIn_data_V_q0;
reg   [31:0] buffIn_data_V_load_reg_580;
wire    ap_CS_fsm_state4;
wire   [7:0] b_fu_235_p2;
reg   [7:0] b_reg_588;
reg    ap_block_state6_io;
wire   [6:0] tmp_3_fu_241_p1;
reg   [6:0] tmp_3_reg_598;
wire   [31:0] p_Result_s_fu_245_p3;
wire    ap_CS_fsm_state7;
wire  signed [15:0] tmp_1_fu_268_p130;
wire  signed [15:0] grp_fu_529_p3;
wire    ap_CS_fsm_state9;
wire  signed [15:0] grp_fu_537_p3;
reg   [6:0] buffIn_data_V_address0;
reg    buffIn_data_V_ce0;
reg    buffIn_data_V_we0;
reg   [31:0] buffIn_data_V_d0;
reg   [6:0] buffIn_last_V_address0;
reg    buffIn_last_V_ce0;
reg    buffIn_last_V_we0;
reg   [0:0] buffIn_last_V_d0;
wire   [0:0] buffIn_last_V_q0;
reg   [6:0] a_reg_148;
wire    ap_CS_fsm_state5;
reg   [15:0] p_i_reg_159;
reg   [15:0] p_1_i_reg_171;
reg   [7:0] b_i_reg_183;
wire   [31:0] a_1_cast_fu_218_p1;
wire   [31:0] b_i_cast1_fu_224_p1;
reg    ap_block_state10;
wire  signed [15:0] grp_fu_529_p1;
wire  signed [15:0] grp_fu_537_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 in_V_data_V_0_sel_rd = 1'b0;
#0 in_V_data_V_0_sel_wr = 1'b0;
#0 in_V_data_V_0_state = 2'd0;
#0 in_V_last_V_0_sel_rd = 1'b0;
#0 in_V_last_V_0_sel_wr = 1'b0;
#0 in_V_last_V_0_state = 2'd0;
#0 out_V_data_V_1_sel_rd = 1'b0;
#0 out_V_data_V_1_sel_wr = 1'b0;
#0 out_V_data_V_1_state = 2'd0;
#0 out_V_last_V_1_sel_rd = 1'b0;
#0 out_V_last_V_1_sel_wr = 1'b0;
#0 out_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 10'd1;
end

matchFilter_buffIbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
buffIn_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffIn_data_V_address0),
    .ce0(buffIn_data_V_ce0),
    .we0(buffIn_data_V_we0),
    .d0(buffIn_data_V_d0),
    .q0(buffIn_data_V_q0)
);

matchFilter_buffIcud #(
    .DataWidth( 1 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
buffIn_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffIn_last_V_address0),
    .ce0(buffIn_last_V_ce0),
    .we0(buffIn_last_V_we0),
    .d0(buffIn_last_V_d0),
    .q0(buffIn_last_V_q0)
);

matchFilter_mux_1dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .din65_WIDTH( 16 ),
    .din66_WIDTH( 16 ),
    .din67_WIDTH( 16 ),
    .din68_WIDTH( 16 ),
    .din69_WIDTH( 16 ),
    .din70_WIDTH( 16 ),
    .din71_WIDTH( 16 ),
    .din72_WIDTH( 16 ),
    .din73_WIDTH( 16 ),
    .din74_WIDTH( 16 ),
    .din75_WIDTH( 16 ),
    .din76_WIDTH( 16 ),
    .din77_WIDTH( 16 ),
    .din78_WIDTH( 16 ),
    .din79_WIDTH( 16 ),
    .din80_WIDTH( 16 ),
    .din81_WIDTH( 16 ),
    .din82_WIDTH( 16 ),
    .din83_WIDTH( 16 ),
    .din84_WIDTH( 16 ),
    .din85_WIDTH( 16 ),
    .din86_WIDTH( 16 ),
    .din87_WIDTH( 16 ),
    .din88_WIDTH( 16 ),
    .din89_WIDTH( 16 ),
    .din90_WIDTH( 16 ),
    .din91_WIDTH( 16 ),
    .din92_WIDTH( 16 ),
    .din93_WIDTH( 16 ),
    .din94_WIDTH( 16 ),
    .din95_WIDTH( 16 ),
    .din96_WIDTH( 16 ),
    .din97_WIDTH( 16 ),
    .din98_WIDTH( 16 ),
    .din99_WIDTH( 16 ),
    .din100_WIDTH( 16 ),
    .din101_WIDTH( 16 ),
    .din102_WIDTH( 16 ),
    .din103_WIDTH( 16 ),
    .din104_WIDTH( 16 ),
    .din105_WIDTH( 16 ),
    .din106_WIDTH( 16 ),
    .din107_WIDTH( 16 ),
    .din108_WIDTH( 16 ),
    .din109_WIDTH( 16 ),
    .din110_WIDTH( 16 ),
    .din111_WIDTH( 16 ),
    .din112_WIDTH( 16 ),
    .din113_WIDTH( 16 ),
    .din114_WIDTH( 16 ),
    .din115_WIDTH( 16 ),
    .din116_WIDTH( 16 ),
    .din117_WIDTH( 16 ),
    .din118_WIDTH( 16 ),
    .din119_WIDTH( 16 ),
    .din120_WIDTH( 16 ),
    .din121_WIDTH( 16 ),
    .din122_WIDTH( 16 ),
    .din123_WIDTH( 16 ),
    .din124_WIDTH( 16 ),
    .din125_WIDTH( 16 ),
    .din126_WIDTH( 16 ),
    .din127_WIDTH( 16 ),
    .din128_WIDTH( 16 ),
    .din129_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
matchFilter_mux_1dEe_U0(
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(16'd0),
    .din9(16'd0),
    .din10(16'd0),
    .din11(16'd0),
    .din12(16'd0),
    .din13(16'd0),
    .din14(16'd0),
    .din15(16'd0),
    .din16(16'd0),
    .din17(16'd0),
    .din18(16'd0),
    .din19(16'd0),
    .din20(16'd0),
    .din21(16'd0),
    .din22(16'd0),
    .din23(16'd0),
    .din24(16'd0),
    .din25(16'd0),
    .din26(16'd0),
    .din27(16'd0),
    .din28(16'd0),
    .din29(16'd0),
    .din30(16'd0),
    .din31(16'd0),
    .din32(16'd0),
    .din33(16'd0),
    .din34(16'd0),
    .din35(16'd0),
    .din36(16'd0),
    .din37(16'd0),
    .din38(16'd0),
    .din39(16'd0),
    .din40(16'd0),
    .din41(16'd0),
    .din42(16'd0),
    .din43(16'd0),
    .din44(16'd0),
    .din45(16'd0),
    .din46(16'd0),
    .din47(16'd0),
    .din48(16'd0),
    .din49(16'd0),
    .din50(16'd0),
    .din51(16'd0),
    .din52(16'd0),
    .din53(16'd0),
    .din54(16'd0),
    .din55(16'd0),
    .din56(16'd0),
    .din57(16'd0),
    .din58(16'd0),
    .din59(16'd0),
    .din60(16'd0),
    .din61(16'd0),
    .din62(16'd0),
    .din63(16'd0),
    .din64(16'd0),
    .din65(16'd1),
    .din66(16'd0),
    .din67(16'd0),
    .din68(16'd0),
    .din69(16'd0),
    .din70(16'd0),
    .din71(16'd0),
    .din72(16'd0),
    .din73(16'd0),
    .din74(16'd0),
    .din75(16'd0),
    .din76(16'd0),
    .din77(16'd0),
    .din78(16'd0),
    .din79(16'd0),
    .din80(16'd0),
    .din81(16'd0),
    .din82(16'd0),
    .din83(16'd0),
    .din84(16'd0),
    .din85(16'd0),
    .din86(16'd0),
    .din87(16'd0),
    .din88(16'd0),
    .din89(16'd0),
    .din90(16'd0),
    .din91(16'd0),
    .din92(16'd0),
    .din93(16'd0),
    .din94(16'd0),
    .din95(16'd0),
    .din96(16'd0),
    .din97(16'd0),
    .din98(16'd0),
    .din99(16'd0),
    .din100(16'd0),
    .din101(16'd0),
    .din102(16'd0),
    .din103(16'd0),
    .din104(16'd0),
    .din105(16'd0),
    .din106(16'd0),
    .din107(16'd0),
    .din108(16'd0),
    .din109(16'd0),
    .din110(16'd0),
    .din111(16'd0),
    .din112(16'd0),
    .din113(16'd0),
    .din114(16'd0),
    .din115(16'd0),
    .din116(16'd0),
    .din117(16'd0),
    .din118(16'd0),
    .din119(16'd0),
    .din120(16'd0),
    .din121(16'd0),
    .din122(16'd0),
    .din123(16'd0),
    .din124(16'd0),
    .din125(16'd0),
    .din126(16'd0),
    .din127(16'd0),
    .din128(16'd0),
    .din129(tmp_3_reg_598),
    .dout(tmp_1_fu_268_p130)
);

matchFilter_mac_meOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matchFilter_mac_meOg_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_1_fu_268_p130),
    .din1(grp_fu_529_p1),
    .din2(p_i_reg_159),
    .ce(1'b1),
    .dout(grp_fu_529_p3)
);

matchFilter_mac_meOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matchFilter_mac_meOg_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_1_fu_268_p130),
    .din1(grp_fu_537_p1),
    .din2(p_1_i_reg_171),
    .ce(1'b1),
    .dout(grp_fu_537_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in_V_data_V_0_ack_out) & (1'b1 == in_V_data_V_0_vld_out))) begin
            in_V_data_V_0_sel_rd <= ~in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in_V_data_V_0_vld_in) & (1'b1 == in_V_data_V_0_ack_in))) begin
            in_V_data_V_0_sel_wr <= ~in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in_V_data_V_0_vld_in) & (1'b1 == in_V_data_V_0_ack_out) & (in_V_data_V_0_state == 2'd3)) | ((1'b0 == in_V_data_V_0_vld_in) & (in_V_data_V_0_state == 2'd2)))) begin
            in_V_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == in_V_data_V_0_vld_in) & (1'b0 == in_V_data_V_0_ack_out) & (in_V_data_V_0_state == 2'd3)) | ((1'b0 == in_V_data_V_0_ack_out) & (in_V_data_V_0_state == 2'd1)))) begin
            in_V_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == in_V_data_V_0_vld_in) & (in_V_data_V_0_state == 2'd2)) | ((1'b1 == in_V_data_V_0_ack_out) & (in_V_data_V_0_state == 2'd1)) | ((in_V_data_V_0_state == 2'd3) & ~((1'b1 == in_V_data_V_0_vld_in) & (1'b0 == in_V_data_V_0_ack_out)) & ~((1'b0 == in_V_data_V_0_vld_in) & (1'b1 == in_V_data_V_0_ack_out))))) begin
            in_V_data_V_0_state <= 2'd3;
        end else begin
            in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in_V_last_V_0_ack_out) & (1'b1 == in_V_last_V_0_vld_out))) begin
            in_V_last_V_0_sel_rd <= ~in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in_V_last_V_0_vld_in) & (1'b1 == in_V_last_V_0_ack_in))) begin
            in_V_last_V_0_sel_wr <= ~in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in_V_last_V_0_vld_in) & (1'b1 == in_V_last_V_0_ack_out) & (2'd3 == in_V_last_V_0_state)) | ((1'b0 == in_V_last_V_0_vld_in) & (2'd2 == in_V_last_V_0_state)))) begin
            in_V_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == in_V_last_V_0_vld_in) & (1'b0 == in_V_last_V_0_ack_out) & (2'd3 == in_V_last_V_0_state)) | ((1'b0 == in_V_last_V_0_ack_out) & (2'd1 == in_V_last_V_0_state)))) begin
            in_V_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == in_V_last_V_0_vld_in) & (2'd2 == in_V_last_V_0_state)) | ((1'b1 == in_V_last_V_0_ack_out) & (2'd1 == in_V_last_V_0_state)) | ((2'd3 == in_V_last_V_0_state) & ~((1'b1 == in_V_last_V_0_vld_in) & (1'b0 == in_V_last_V_0_ack_out)) & ~((1'b0 == in_V_last_V_0_vld_in) & (1'b1 == in_V_last_V_0_ack_out))))) begin
            in_V_last_V_0_state <= 2'd3;
        end else begin
            in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_V_data_V_1_ack_out) & (1'b1 == out_V_data_V_1_vld_out))) begin
            out_V_data_V_1_sel_rd <= ~out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_V_data_V_1_vld_in) & (1'b1 == out_V_data_V_1_ack_in))) begin
            out_V_data_V_1_sel_wr <= ~out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_V_data_V_1_vld_in) & (1'b1 == out_V_data_V_1_ack_out) & (2'd3 == out_V_data_V_1_state)) | ((1'b0 == out_V_data_V_1_vld_in) & (2'd2 == out_V_data_V_1_state)))) begin
            out_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_V_data_V_1_vld_in) & (1'b0 == out_V_data_V_1_ack_out) & (2'd3 == out_V_data_V_1_state)) | ((1'b0 == out_V_data_V_1_ack_out) & (2'd1 == out_V_data_V_1_state)))) begin
            out_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_V_data_V_1_vld_in) & (2'd2 == out_V_data_V_1_state)) | ((1'b1 == out_V_data_V_1_ack_out) & (2'd1 == out_V_data_V_1_state)) | ((2'd3 == out_V_data_V_1_state) & ~((1'b1 == out_V_data_V_1_vld_in) & (1'b0 == out_V_data_V_1_ack_out)) & ~((1'b0 == out_V_data_V_1_vld_in) & (1'b1 == out_V_data_V_1_ack_out))))) begin
            out_V_data_V_1_state <= 2'd3;
        end else begin
            out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_V_last_V_1_ack_out) & (1'b1 == out_V_last_V_1_vld_out))) begin
            out_V_last_V_1_sel_rd <= ~out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_V_last_V_1_vld_in) & (1'b1 == out_V_last_V_1_ack_in))) begin
            out_V_last_V_1_sel_wr <= ~out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_V_last_V_1_vld_in) & (1'b1 == out_V_last_V_1_ack_out) & (2'd3 == out_V_last_V_1_state)) | ((1'b0 == out_V_last_V_1_vld_in) & (2'd2 == out_V_last_V_1_state)))) begin
            out_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_V_last_V_1_vld_in) & (1'b0 == out_V_last_V_1_ack_out) & (2'd3 == out_V_last_V_1_state)) | ((1'b0 == out_V_last_V_1_ack_out) & (2'd1 == out_V_last_V_1_state)))) begin
            out_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_V_last_V_1_vld_in) & (2'd2 == out_V_last_V_1_state)) | ((1'b1 == out_V_last_V_1_ack_out) & (2'd1 == out_V_last_V_1_state)) | ((2'd3 == out_V_last_V_1_state) & ~((1'b1 == out_V_last_V_1_vld_in) & (1'b0 == out_V_last_V_1_ack_out)) & ~((1'b0 == out_V_last_V_1_vld_in) & (1'b1 == out_V_last_V_1_ack_out))))) begin
            out_V_last_V_1_state <= 2'd3;
        end else begin
            out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_reg_148 <= a_1_reg_565;
    end else if (((1'b1 == ap_CS_fsm_state2) & (in_V_data_V_0_vld_out == 1'b1))) begin
        a_reg_148 <= 7'd127;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        b_i_reg_183 <= b_reg_588;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2))) begin
        b_i_reg_183 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_1_i_reg_171 <= grp_fu_537_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2))) begin
        p_1_i_reg_171 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_i_reg_159 <= grp_fu_529_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2))) begin
        p_i_reg_159 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_206_p2))) begin
        a_1_reg_565 <= a_1_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_cast2_reg_556[6 : 0] <= a_cast2_fu_202_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0))) begin
        b_reg_588 <= b_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_data_V_load_reg_580 <= buffIn_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_V_data_V_0_load_A)) begin
        in_V_data_V_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_V_data_V_0_load_B)) begin
        in_V_data_V_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_V_last_V_0_load_A)) begin
        in_V_last_V_0_payload_A <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_V_last_V_0_load_B)) begin
        in_V_last_V_0_payload_B <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_data_V_1_load_A)) begin
        out_V_data_V_1_payload_A <= p_Result_s_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_data_V_1_load_B)) begin
        out_V_data_V_1_payload_B <= p_Result_s_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_last_V_1_load_A)) begin
        out_V_last_V_1_payload_A <= tmp_last_V_reg_550;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_last_V_1_load_B)) begin
        out_V_last_V_1_payload_B <= tmp_last_V_reg_550;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0) & (1'd0 == exitcond_i_fu_229_p2))) begin
        tmp_3_reg_598 <= tmp_3_fu_241_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_V_data_V_0_vld_out == 1'b1))) begin
        tmp_data_V_reg_545 <= in_V_data_V_0_data_out;
        tmp_last_V_reg_550 <= in_V_last_V_0_data_out;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffIn_data_V_address0 = b_i_cast1_fu_224_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffIn_data_V_address0 = a_cast2_reg_556;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2))) begin
        buffIn_data_V_address0 = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_206_p2))) begin
        buffIn_data_V_address0 = a_1_cast_fu_218_p1;
    end else begin
        buffIn_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_206_p2)) | ((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0)) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2)))) begin
        buffIn_data_V_ce0 = 1'b1;
    end else begin
        buffIn_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffIn_data_V_d0 = buffIn_data_V_load_reg_580;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2))) begin
        buffIn_data_V_d0 = tmp_data_V_reg_545;
    end else begin
        buffIn_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2)))) begin
        buffIn_data_V_we0 = 1'b1;
    end else begin
        buffIn_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_last_V_address0 = a_cast2_reg_556;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2))) begin
        buffIn_last_V_address0 = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_206_p2))) begin
        buffIn_last_V_address0 = a_1_cast_fu_218_p1;
    end else begin
        buffIn_last_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_206_p2)) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2)))) begin
        buffIn_last_V_ce0 = 1'b1;
    end else begin
        buffIn_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffIn_last_V_d0 = buffIn_last_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2))) begin
        buffIn_last_V_d0 = tmp_last_V_reg_550;
    end else begin
        buffIn_last_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2)))) begin
        buffIn_last_V_we0 = 1'b1;
    end else begin
        buffIn_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_V_data_V_0_vld_out == 1'b1))) begin
        in_V_data_V_0_ack_out = 1'b1;
    end else begin
        in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in_V_data_V_0_sel)) begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_B;
    end else begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_V_data_V_0_vld_out == 1'b1))) begin
        in_V_last_V_0_ack_out = 1'b1;
    end else begin
        in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in_V_last_V_0_sel)) begin
        in_V_last_V_0_data_out = in_V_last_V_0_payload_B;
    end else begin
        in_V_last_V_0_data_out = in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_TDATA_blk_n = in_V_data_V_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out_V_data_V_1_sel)) begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B;
    end else begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_i_fu_229_p2) & (ap_block_state6_io == 1'b0))) begin
        out_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == out_V_last_V_1_sel)) begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_B;
    end else begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_i_fu_229_p2) & (ap_block_state6_io == 1'b0))) begin
        out_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_i_fu_229_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        out_r_TDATA_blk_n = out_V_data_V_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (in_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_206_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_i_fu_229_p2) & (ap_block_state6_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0) & (1'd0 == exitcond_i_fu_229_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & ~((1'b0 == out_V_data_V_1_ack_in) | (1'b0 == out_V_last_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_cast_fu_218_p1 = a_1_fu_212_p2;

assign a_1_fu_212_p2 = ($signed(a_reg_148) + $signed(7'd127));

assign a_cast2_fu_202_p1 = a_reg_148;

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10 = ((1'b0 == out_V_data_V_1_ack_in) | (1'b0 == out_V_last_V_1_ack_in));
end

always @ (*) begin
    ap_block_state6_io = ((1'd1 == exitcond_i_fu_229_p2) & (1'b0 == out_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_fu_235_p2 = (b_i_reg_183 + 8'd1);

assign b_i_cast1_fu_224_p1 = b_i_reg_183;

assign exitcond_i_fu_229_p2 = ((b_i_reg_183 == 8'd128) ? 1'b1 : 1'b0);

assign grp_fu_529_p1 = {{buffIn_data_V_q0[31:16]}};

assign grp_fu_537_p1 = buffIn_data_V_q0[15:0];

assign in_V_data_V_0_ack_in = in_V_data_V_0_state[1'd1];

assign in_V_data_V_0_load_A = (in_V_data_V_0_state_cmp_full & ~in_V_data_V_0_sel_wr);

assign in_V_data_V_0_load_B = (in_V_data_V_0_sel_wr & in_V_data_V_0_state_cmp_full);

assign in_V_data_V_0_sel = in_V_data_V_0_sel_rd;

assign in_V_data_V_0_state_cmp_full = ((in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_data_V_0_vld_in = in_r_TVALID;

assign in_V_data_V_0_vld_out = in_V_data_V_0_state[1'd0];

assign in_V_last_V_0_ack_in = in_V_last_V_0_state[1'd1];

assign in_V_last_V_0_load_A = (in_V_last_V_0_state_cmp_full & ~in_V_last_V_0_sel_wr);

assign in_V_last_V_0_load_B = (in_V_last_V_0_sel_wr & in_V_last_V_0_state_cmp_full);

assign in_V_last_V_0_sel = in_V_last_V_0_sel_rd;

assign in_V_last_V_0_state_cmp_full = ((in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_last_V_0_vld_in = in_r_TVALID;

assign in_V_last_V_0_vld_out = in_V_last_V_0_state[1'd0];

assign in_r_TREADY = in_V_last_V_0_state[1'd1];

assign out_V_data_V_1_ack_in = out_V_data_V_1_state[1'd1];

assign out_V_data_V_1_ack_out = out_r_TREADY;

assign out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full & ~out_V_data_V_1_sel_wr);

assign out_V_data_V_1_load_B = (out_V_data_V_1_sel_wr & out_V_data_V_1_state_cmp_full);

assign out_V_data_V_1_sel = out_V_data_V_1_sel_rd;

assign out_V_data_V_1_state_cmp_full = ((out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_data_V_1_vld_out = out_V_data_V_1_state[1'd0];

assign out_V_last_V_1_ack_in = out_V_last_V_1_state[1'd1];

assign out_V_last_V_1_ack_out = out_r_TREADY;

assign out_V_last_V_1_load_A = (out_V_last_V_1_state_cmp_full & ~out_V_last_V_1_sel_wr);

assign out_V_last_V_1_load_B = (out_V_last_V_1_sel_wr & out_V_last_V_1_state_cmp_full);

assign out_V_last_V_1_sel = out_V_last_V_1_sel_rd;

assign out_V_last_V_1_state_cmp_full = ((out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_last_V_1_vld_out = out_V_last_V_1_state[1'd0];

assign out_r_TDATA = out_V_data_V_1_data_out;

assign out_r_TLAST = out_V_last_V_1_data_out;

assign out_r_TVALID = out_V_last_V_1_state[1'd0];

assign p_Result_s_fu_245_p3 = {{p_i_reg_159}, {p_1_i_reg_171}};

assign tmp_3_fu_241_p1 = b_i_reg_183[6:0];

assign tmp_fu_206_p2 = ((a_reg_148 == 7'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    a_cast2_reg_556[31:7] <= 25'b0000000000000000000000000;
end

endmodule //matchFilter
