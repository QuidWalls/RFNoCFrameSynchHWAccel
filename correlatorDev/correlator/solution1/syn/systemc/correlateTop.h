// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _correlateTop_HH_
#define _correlateTop_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct correlateTop : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > i_data_data_V_TDATA;
    sc_in< sc_logic > i_data_data_V_TVALID;
    sc_out< sc_logic > i_data_data_V_TREADY;
    sc_in< sc_lv<1> > i_data_last_V_TLAST;
    sc_in< sc_logic > i_data_last_V_TVALID;
    sc_out< sc_logic > i_data_last_V_TREADY;
    sc_in< sc_lv<32> > o_data_data_V_TDATA;
    sc_in< sc_logic > o_data_data_V_TVALID;
    sc_out< sc_logic > o_data_data_V_TREADY;
    sc_in< sc_lv<1> > o_data_last_V_TLAST;
    sc_in< sc_logic > o_data_last_V_TVALID;
    sc_out< sc_logic > o_data_last_V_TREADY;
    sc_in< sc_lv<1> > start_V;
    sc_in< sc_lv<4> > phaseClass_V;


    // Module declarations
    correlateTop(sc_module_name name);
    SC_HAS_PROCESS(correlateTop);

    ~correlateTop();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > i_data_data_V_0_vld_in;
    sc_signal< sc_logic > i_data_data_V_0_vld_out;
    sc_signal< sc_logic > i_data_data_V_0_ack_out;
    sc_signal< sc_lv<2> > i_data_data_V_0_state;
    sc_signal< sc_logic > i_data_last_V_0_vld_in;
    sc_signal< sc_logic > i_data_last_V_0_ack_out;
    sc_signal< sc_lv<2> > i_data_last_V_0_state;
    sc_signal< sc_logic > o_data_data_V_0_vld_in;
    sc_signal< sc_logic > o_data_data_V_0_ack_out;
    sc_signal< sc_lv<2> > o_data_data_V_0_state;
    sc_signal< sc_logic > o_data_last_V_0_vld_in;
    sc_signal< sc_logic > o_data_last_V_0_ack_out;
    sc_signal< sc_lv<2> > o_data_last_V_0_state;
    sc_signal< sc_lv<1> > currentState;
    sc_signal< sc_lv<32> > loadCount_V;
    sc_signal< sc_logic > i_data_data_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > start_V_read_read_fu_76_p2;
    sc_signal< sc_lv<1> > start_V_read_reg_212;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > currentState_load_load_fu_94_p1;
    sc_signal< sc_lv<1> > currentState_load_reg_216;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<32> > tmp_2_fu_124_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_311;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_311();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_currentState_load_load_fu_94_p1();
    void thread_i_data_data_V_0_ack_out();
    void thread_i_data_data_V_0_vld_in();
    void thread_i_data_data_V_0_vld_out();
    void thread_i_data_data_V_TDATA_blk_n();
    void thread_i_data_data_V_TREADY();
    void thread_i_data_last_V_0_ack_out();
    void thread_i_data_last_V_0_vld_in();
    void thread_i_data_last_V_TREADY();
    void thread_o_data_data_V_0_ack_out();
    void thread_o_data_data_V_0_vld_in();
    void thread_o_data_data_V_TREADY();
    void thread_o_data_last_V_0_ack_out();
    void thread_o_data_last_V_0_vld_in();
    void thread_o_data_last_V_TREADY();
    void thread_start_V_read_read_fu_76_p2();
    void thread_tmp_2_fu_124_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
