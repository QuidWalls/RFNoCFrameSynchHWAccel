// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "correlator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic correlator::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic correlator::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> correlator::ap_ST_fsm_pp0_stage0 = "1";
const bool correlator::ap_const_boolean_1 = true;
const sc_lv<1> correlator::ap_const_lv1_0 = "0";
const sc_lv<1> correlator::ap_const_lv1_1 = "1";
const sc_lv<2> correlator::ap_const_lv2_0 = "00";
const sc_lv<2> correlator::ap_const_lv2_2 = "10";
const sc_lv<2> correlator::ap_const_lv2_3 = "11";
const sc_lv<2> correlator::ap_const_lv2_1 = "1";
const sc_lv<16> correlator::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> correlator::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool correlator::ap_const_boolean_0 = false;
const sc_lv<4> correlator::ap_const_lv4_0 = "0000";
const sc_lv<32> correlator::ap_const_lv32_F = "1111";
const sc_lv<32> correlator::ap_const_lv32_1 = "1";

correlator::correlator(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op12_read_state1 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( i_data_TVALID );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( i_data_TVALID );
    sensitive << ( ap_predicate_op12_read_state1 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( ap_predicate_op328_write_state2 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( ap_predicate_op352_write_state3 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_predicate_op12_read_state1);
    sensitive << ( currentState );
    sensitive << ( tmp_nbreadreq_fu_424_p4 );

    SC_METHOD(thread_ap_predicate_op328_write_state2);
    sensitive << ( currentState_load_reg_2004 );
    sensitive << ( tmp_reg_2008 );
    sensitive << ( phaseClass_V_read_reg_1996 );

    SC_METHOD(thread_ap_predicate_op352_write_state3);
    sensitive << ( ap_reg_pp0_iter1_currentState_load_reg_2004 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_2008 );
    sensitive << ( ap_reg_pp0_iter1_phaseClass_V_read_reg_1996 );

    SC_METHOD(thread_ap_reset_idle_pp0);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_currentState_load_load_fu_458_p1);
    sensitive << ( currentState );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_i_data_TDATA_blk_n);
    sensitive << ( i_data_TVALID );
    sensitive << ( currentState );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_424_p4 );

    SC_METHOD(thread_i_data_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_o_data_TDATA);
    sensitive << ( o_data_V_data_V_1_data_out );

    SC_METHOD(thread_o_data_TDATA_blk_n);
    sensitive << ( o_data_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( currentState_load_reg_2004 );
    sensitive << ( tmp_reg_2008 );
    sensitive << ( phaseClass_V_read_reg_1996 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_currentState_load_reg_2004 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_2008 );
    sensitive << ( ap_reg_pp0_iter1_phaseClass_V_read_reg_1996 );

    SC_METHOD(thread_o_data_TLAST);
    sensitive << ( o_data_V_last_V_1_data_out );

    SC_METHOD(thread_o_data_TVALID);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_o_data_V_data_V_1_ack_in);
    sensitive << ( o_data_V_data_V_1_state );

    SC_METHOD(thread_o_data_V_data_V_1_ack_out);
    sensitive << ( o_data_TREADY );

    SC_METHOD(thread_o_data_V_data_V_1_data_out);
    sensitive << ( o_data_V_data_V_1_payload_A );
    sensitive << ( o_data_V_data_V_1_payload_B );
    sensitive << ( o_data_V_data_V_1_sel );

    SC_METHOD(thread_o_data_V_data_V_1_load_A);
    sensitive << ( o_data_V_data_V_1_sel_wr );
    sensitive << ( o_data_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_data_V_1_load_B);
    sensitive << ( o_data_V_data_V_1_sel_wr );
    sensitive << ( o_data_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_data_V_1_sel);
    sensitive << ( o_data_V_data_V_1_sel_rd );

    SC_METHOD(thread_o_data_V_data_V_1_state_cmp_full);
    sensitive << ( o_data_V_data_V_1_state );

    SC_METHOD(thread_o_data_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op328_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_o_data_V_data_V_1_vld_out);
    sensitive << ( o_data_V_data_V_1_state );

    SC_METHOD(thread_o_data_V_last_V_1_ack_in);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_o_data_V_last_V_1_ack_out);
    sensitive << ( o_data_TREADY );

    SC_METHOD(thread_o_data_V_last_V_1_data_out);
    sensitive << ( o_data_V_last_V_1_payload_A );
    sensitive << ( o_data_V_last_V_1_payload_B );
    sensitive << ( o_data_V_last_V_1_sel );

    SC_METHOD(thread_o_data_V_last_V_1_load_A);
    sensitive << ( o_data_V_last_V_1_sel_wr );
    sensitive << ( o_data_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_last_V_1_load_B);
    sensitive << ( o_data_V_last_V_1_sel_wr );
    sensitive << ( o_data_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_last_V_1_sel);
    sensitive << ( o_data_V_last_V_1_sel_rd );

    SC_METHOD(thread_o_data_V_last_V_1_state_cmp_full);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_o_data_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op328_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_o_data_V_last_V_1_vld_out);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_p_Result_s_fu_1967_p5);
    sensitive << ( p_Val2_3_4_fu_1949_p2 );

    SC_METHOD(thread_p_Val2_3_4_fu_1949_p2);
    sensitive << ( tmp9_fu_1943_p2 );
    sensitive << ( tmp6_fu_1926_p2 );

    SC_METHOD(thread_start_V_read_read_fu_418_p2);
    sensitive << ( start_V );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp1_fu_1932_p2);
    sensitive << ( phaseClass0_V_12 );
    sensitive << ( phaseClass0_V_9 );

    SC_METHOD(thread_tmp2_fu_1938_p2);
    sensitive << ( phaseClass0_V_14 );
    sensitive << ( tmp_1_reg_2017 );

    SC_METHOD(thread_tmp6_fu_1926_p2);
    sensitive << ( tmp8_fu_1920_p2 );
    sensitive << ( tmp7_fu_1914_p2 );

    SC_METHOD(thread_tmp7_fu_1914_p2);
    sensitive << ( phaseClass0_V_1 );
    sensitive << ( phaseClass0_V_0 );

    SC_METHOD(thread_tmp8_fu_1920_p2);
    sensitive << ( phaseClass0_V_7 );
    sensitive << ( phaseClass0_V_2 );

    SC_METHOD(thread_tmp9_fu_1943_p2);
    sensitive << ( tmp2_fu_1938_p2 );
    sensitive << ( tmp1_fu_1932_p2 );

    SC_METHOD(thread_tmp_1_fu_470_p1);
    sensitive << ( i_data_TDATA );

    SC_METHOD(thread_tmp_nbreadreq_fu_424_p4);
    sensitive << ( i_data_TVALID );

    SC_METHOD(thread_tmp_s_fu_1984_p2);
    sensitive << ( loadCount_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    o_data_V_data_V_1_sel_rd = SC_LOGIC_0;
    o_data_V_data_V_1_sel_wr = SC_LOGIC_0;
    o_data_V_data_V_1_state = "00";
    o_data_V_last_V_1_sel_rd = SC_LOGIC_0;
    o_data_V_last_V_1_sel_wr = SC_LOGIC_0;
    o_data_V_last_V_1_state = "00";
    currentState = "0";
    phaseClass0_V_14 = "0000000000000000";
    phaseClass0_V_13 = "0000000000000000";
    phaseClass0_V_12 = "0000000000000000";
    phaseClass0_V_11 = "0000000000000000";
    phaseClass0_V_10 = "0000000000000000";
    phaseClass0_V_9 = "0000000000000000";
    phaseClass0_V_8 = "0000000000000000";
    phaseClass0_V_7 = "0000000000000000";
    phaseClass0_V_6 = "0000000000000000";
    phaseClass0_V_5 = "0000000000000000";
    phaseClass0_V_4 = "0000000000000000";
    phaseClass0_V_3 = "0000000000000000";
    phaseClass0_V_2 = "0000000000000000";
    phaseClass0_V_1 = "0000000000000000";
    phaseClass0_V_0 = "0000000000000000";
    loadCount_V = "00000000000000000000000000000000";
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "correlator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, i_data_TDATA, "(port)i_data_TDATA");
    sc_trace(mVcdFile, i_data_TVALID, "(port)i_data_TVALID");
    sc_trace(mVcdFile, i_data_TREADY, "(port)i_data_TREADY");
    sc_trace(mVcdFile, i_data_TLAST, "(port)i_data_TLAST");
    sc_trace(mVcdFile, o_data_TDATA, "(port)o_data_TDATA");
    sc_trace(mVcdFile, o_data_TVALID, "(port)o_data_TVALID");
    sc_trace(mVcdFile, o_data_TREADY, "(port)o_data_TREADY");
    sc_trace(mVcdFile, o_data_TLAST, "(port)o_data_TLAST");
    sc_trace(mVcdFile, start_V, "(port)start_V");
    sc_trace(mVcdFile, phaseClass_V, "(port)phaseClass_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, o_data_V_data_V_1_data_out, "o_data_V_data_V_1_data_out");
    sc_trace(mVcdFile, o_data_V_data_V_1_vld_in, "o_data_V_data_V_1_vld_in");
    sc_trace(mVcdFile, o_data_V_data_V_1_vld_out, "o_data_V_data_V_1_vld_out");
    sc_trace(mVcdFile, o_data_V_data_V_1_ack_in, "o_data_V_data_V_1_ack_in");
    sc_trace(mVcdFile, o_data_V_data_V_1_ack_out, "o_data_V_data_V_1_ack_out");
    sc_trace(mVcdFile, o_data_V_data_V_1_payload_A, "o_data_V_data_V_1_payload_A");
    sc_trace(mVcdFile, o_data_V_data_V_1_payload_B, "o_data_V_data_V_1_payload_B");
    sc_trace(mVcdFile, o_data_V_data_V_1_sel_rd, "o_data_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, o_data_V_data_V_1_sel_wr, "o_data_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, o_data_V_data_V_1_sel, "o_data_V_data_V_1_sel");
    sc_trace(mVcdFile, o_data_V_data_V_1_load_A, "o_data_V_data_V_1_load_A");
    sc_trace(mVcdFile, o_data_V_data_V_1_load_B, "o_data_V_data_V_1_load_B");
    sc_trace(mVcdFile, o_data_V_data_V_1_state, "o_data_V_data_V_1_state");
    sc_trace(mVcdFile, o_data_V_data_V_1_state_cmp_full, "o_data_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, o_data_V_last_V_1_data_out, "o_data_V_last_V_1_data_out");
    sc_trace(mVcdFile, o_data_V_last_V_1_vld_in, "o_data_V_last_V_1_vld_in");
    sc_trace(mVcdFile, o_data_V_last_V_1_vld_out, "o_data_V_last_V_1_vld_out");
    sc_trace(mVcdFile, o_data_V_last_V_1_ack_in, "o_data_V_last_V_1_ack_in");
    sc_trace(mVcdFile, o_data_V_last_V_1_ack_out, "o_data_V_last_V_1_ack_out");
    sc_trace(mVcdFile, o_data_V_last_V_1_payload_A, "o_data_V_last_V_1_payload_A");
    sc_trace(mVcdFile, o_data_V_last_V_1_payload_B, "o_data_V_last_V_1_payload_B");
    sc_trace(mVcdFile, o_data_V_last_V_1_sel_rd, "o_data_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, o_data_V_last_V_1_sel_wr, "o_data_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, o_data_V_last_V_1_sel, "o_data_V_last_V_1_sel");
    sc_trace(mVcdFile, o_data_V_last_V_1_load_A, "o_data_V_last_V_1_load_A");
    sc_trace(mVcdFile, o_data_V_last_V_1_load_B, "o_data_V_last_V_1_load_B");
    sc_trace(mVcdFile, o_data_V_last_V_1_state, "o_data_V_last_V_1_state");
    sc_trace(mVcdFile, o_data_V_last_V_1_state_cmp_full, "o_data_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, currentState, "currentState");
    sc_trace(mVcdFile, phaseClass0_V_14, "phaseClass0_V_14");
    sc_trace(mVcdFile, phaseClass0_V_13, "phaseClass0_V_13");
    sc_trace(mVcdFile, phaseClass0_V_12, "phaseClass0_V_12");
    sc_trace(mVcdFile, phaseClass0_V_11, "phaseClass0_V_11");
    sc_trace(mVcdFile, phaseClass0_V_10, "phaseClass0_V_10");
    sc_trace(mVcdFile, phaseClass0_V_9, "phaseClass0_V_9");
    sc_trace(mVcdFile, phaseClass0_V_8, "phaseClass0_V_8");
    sc_trace(mVcdFile, phaseClass0_V_7, "phaseClass0_V_7");
    sc_trace(mVcdFile, phaseClass0_V_6, "phaseClass0_V_6");
    sc_trace(mVcdFile, phaseClass0_V_5, "phaseClass0_V_5");
    sc_trace(mVcdFile, phaseClass0_V_4, "phaseClass0_V_4");
    sc_trace(mVcdFile, phaseClass0_V_3, "phaseClass0_V_3");
    sc_trace(mVcdFile, phaseClass0_V_2, "phaseClass0_V_2");
    sc_trace(mVcdFile, phaseClass0_V_1, "phaseClass0_V_1");
    sc_trace(mVcdFile, phaseClass0_V_0, "phaseClass0_V_0");
    sc_trace(mVcdFile, loadCount_V, "loadCount_V");
    sc_trace(mVcdFile, i_data_TDATA_blk_n, "i_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, currentState_load_load_fu_458_p1, "currentState_load_load_fu_458_p1");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_424_p4, "tmp_nbreadreq_fu_424_p4");
    sc_trace(mVcdFile, o_data_TDATA_blk_n, "o_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, currentState_load_reg_2004, "currentState_load_reg_2004");
    sc_trace(mVcdFile, tmp_reg_2008, "tmp_reg_2008");
    sc_trace(mVcdFile, phaseClass_V_read_reg_1996, "phaseClass_V_read_reg_1996");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_currentState_load_reg_2004, "ap_reg_pp0_iter1_currentState_load_reg_2004");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_reg_2008, "ap_reg_pp0_iter1_tmp_reg_2008");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_phaseClass_V_read_reg_1996, "ap_reg_pp0_iter1_phaseClass_V_read_reg_1996");
    sc_trace(mVcdFile, ap_predicate_op12_read_state1, "ap_predicate_op12_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_predicate_op328_write_state2, "ap_predicate_op328_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_predicate_op352_write_state3, "ap_predicate_op352_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, start_V_read_read_fu_418_p2, "start_V_read_read_fu_418_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_2012, "tmp_last_V_reg_2012");
    sc_trace(mVcdFile, tmp_1_fu_470_p1, "tmp_1_fu_470_p1");
    sc_trace(mVcdFile, tmp_1_reg_2017, "tmp_1_reg_2017");
    sc_trace(mVcdFile, p_Result_s_fu_1967_p5, "p_Result_s_fu_1967_p5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, p_Val2_3_4_fu_1949_p2, "p_Val2_3_4_fu_1949_p2");
    sc_trace(mVcdFile, tmp_s_fu_1984_p2, "tmp_s_fu_1984_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp8_fu_1920_p2, "tmp8_fu_1920_p2");
    sc_trace(mVcdFile, tmp7_fu_1914_p2, "tmp7_fu_1914_p2");
    sc_trace(mVcdFile, tmp2_fu_1938_p2, "tmp2_fu_1938_p2");
    sc_trace(mVcdFile, tmp1_fu_1932_p2, "tmp1_fu_1932_p2");
    sc_trace(mVcdFile, tmp9_fu_1943_p2, "tmp9_fu_1943_p2");
    sc_trace(mVcdFile, tmp6_fu_1926_p2, "tmp6_fu_1926_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("correlator.hdltvin.dat");
    mHdltvoutHandle.open("correlator.hdltvout.dat");
}

correlator::~correlator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void correlator::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        currentState = ap_const_lv1_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, currentState_load_load_fu_458_p1.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, start_V_read_read_fu_418_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, currentState.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
            currentState = ap_const_lv1_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        loadCount_V = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_currentState_load_reg_2004.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_tmp_reg_2008.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            loadCount_V = tmp_s_fu_1984_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_out.read()))) {
            o_data_V_data_V_1_sel_rd =  (sc_logic) (~o_data_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_in.read()))) {
            o_data_V_data_V_1_sel_wr =  (sc_logic) (~o_data_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            o_data_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            o_data_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(o_data_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()))))) {
            o_data_V_data_V_1_state = ap_const_lv2_3;
        } else {
            o_data_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_out.read()))) {
            o_data_V_last_V_1_sel_rd =  (sc_logic) (~o_data_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_in.read()))) {
            o_data_V_last_V_1_sel_wr =  (sc_logic) (~o_data_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, o_data_V_last_V_1_state.read())))) {
            o_data_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_V_last_V_1_state.read())))) {
            o_data_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, o_data_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()))))) {
            o_data_V_last_V_1_state = ap_const_lv2_3;
        } else {
            o_data_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_0 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_0 = tmp_1_reg_2017.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_1 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_1 = phaseClass0_V_0.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_10 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_10 = phaseClass0_V_9.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_11 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_11 = phaseClass0_V_10.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_12 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_12 = phaseClass0_V_11.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_13 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_13 = phaseClass0_V_12.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_14 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_14 = phaseClass0_V_13.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_2 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_2 = phaseClass0_V_1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_3 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_3 = phaseClass0_V_2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_4 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_4 = phaseClass0_V_3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_5 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_5 = phaseClass0_V_4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_6 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_6 = phaseClass0_V_5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_7 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_7 = phaseClass0_V_6.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_8 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_8 = phaseClass0_V_7.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phaseClass0_V_9 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            phaseClass0_V_9 = phaseClass0_V_8.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_currentState_load_reg_2004 = currentState_load_reg_2004.read();
        ap_reg_pp0_iter1_phaseClass_V_read_reg_1996 = phaseClass_V_read_reg_1996.read();
        ap_reg_pp0_iter1_tmp_reg_2008 = tmp_reg_2008.read();
        currentState_load_reg_2004 = currentState.read();
        phaseClass_V_read_reg_1996 = phaseClass_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_load_A.read())) {
        o_data_V_data_V_1_payload_A = p_Result_s_fu_1967_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_load_B.read())) {
        o_data_V_data_V_1_payload_B = p_Result_s_fu_1967_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_load_A.read())) {
        o_data_V_last_V_1_payload_A = tmp_last_V_reg_2012.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_load_B.read())) {
        o_data_V_last_V_1_payload_B = tmp_last_V_reg_2012.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_2017 = tmp_1_fu_470_p1.read();
        tmp_last_V_reg_2012 = i_data_TLAST.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, currentState.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_2008 = tmp_nbreadreq_fu_424_p4.read();
    }
}

void correlator::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void correlator::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void correlator::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()))));
}

void correlator::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))));
}

void correlator::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))));
}

void correlator::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, i_data_TVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read()));
}

void correlator::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()));
}

void correlator::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void correlator::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op352_write_state3.read()));
}

void correlator::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()));
}

void correlator::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void correlator::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void correlator::thread_ap_predicate_op12_read_state1() {
    ap_predicate_op12_read_state1 = (esl_seteq<1,1,1>(ap_const_lv1_1, currentState.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_424_p4.read()));
}

void correlator::thread_ap_predicate_op328_write_state2() {
    ap_predicate_op328_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_2004.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_2008.read()) && esl_seteq<1,4,4>(phaseClass_V_read_reg_1996.read(), ap_const_lv4_0));
}

void correlator::thread_ap_predicate_op352_write_state3() {
    ap_predicate_op352_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_currentState_load_reg_2004.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_tmp_reg_2008.read()) && esl_seteq<1,4,4>(ap_const_lv4_0, ap_reg_pp0_iter1_phaseClass_V_read_reg_1996.read()));
}

void correlator::thread_ap_reset_idle_pp0() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void correlator::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void correlator::thread_currentState_load_load_fu_458_p1() {
    currentState_load_load_fu_458_p1 = currentState.read();
}

void correlator::thread_i_data_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentState.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_424_p4.read()))) {
        i_data_TDATA_blk_n = i_data_TVALID.read();
    } else {
        i_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void correlator::thread_i_data_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_data_TREADY = ap_const_logic_1;
    } else {
        i_data_TREADY = ap_const_logic_0;
    }
}

void correlator::thread_o_data_TDATA() {
    o_data_TDATA = o_data_V_data_V_1_data_out.read();
}

void correlator::thread_o_data_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_2004.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_2008.read()) && 
          esl_seteq<1,4,4>(phaseClass_V_read_reg_1996.read(), ap_const_lv4_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_currentState_load_reg_2004.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_tmp_reg_2008.read()) && 
          esl_seteq<1,4,4>(ap_const_lv4_0, ap_reg_pp0_iter1_phaseClass_V_read_reg_1996.read())))) {
        o_data_TDATA_blk_n = o_data_V_data_V_1_state.read()[1];
    } else {
        o_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void correlator::thread_o_data_TLAST() {
    o_data_TLAST = o_data_V_last_V_1_data_out.read();
}

void correlator::thread_o_data_TVALID() {
    o_data_TVALID = o_data_V_last_V_1_state.read()[0];
}

void correlator::thread_o_data_V_data_V_1_ack_in() {
    o_data_V_data_V_1_ack_in = o_data_V_data_V_1_state.read()[1];
}

void correlator::thread_o_data_V_data_V_1_ack_out() {
    o_data_V_data_V_1_ack_out = o_data_TREADY.read();
}

void correlator::thread_o_data_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_sel.read())) {
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_B.read();
    } else {
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_A.read();
    }
}

void correlator::thread_o_data_V_data_V_1_load_A() {
    o_data_V_data_V_1_load_A = (o_data_V_data_V_1_state_cmp_full.read() & ~o_data_V_data_V_1_sel_wr.read());
}

void correlator::thread_o_data_V_data_V_1_load_B() {
    o_data_V_data_V_1_load_B = (o_data_V_data_V_1_sel_wr.read() & o_data_V_data_V_1_state_cmp_full.read());
}

void correlator::thread_o_data_V_data_V_1_sel() {
    o_data_V_data_V_1_sel = o_data_V_data_V_1_sel_rd.read();
}

void correlator::thread_o_data_V_data_V_1_state_cmp_full() {
    o_data_V_data_V_1_state_cmp_full =  (sc_logic) ((!o_data_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(o_data_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void correlator::thread_o_data_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        o_data_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        o_data_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void correlator::thread_o_data_V_data_V_1_vld_out() {
    o_data_V_data_V_1_vld_out = o_data_V_data_V_1_state.read()[0];
}

void correlator::thread_o_data_V_last_V_1_ack_in() {
    o_data_V_last_V_1_ack_in = o_data_V_last_V_1_state.read()[1];
}

void correlator::thread_o_data_V_last_V_1_ack_out() {
    o_data_V_last_V_1_ack_out = o_data_TREADY.read();
}

void correlator::thread_o_data_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_sel.read())) {
        o_data_V_last_V_1_data_out = o_data_V_last_V_1_payload_B.read();
    } else {
        o_data_V_last_V_1_data_out = o_data_V_last_V_1_payload_A.read();
    }
}

void correlator::thread_o_data_V_last_V_1_load_A() {
    o_data_V_last_V_1_load_A = (o_data_V_last_V_1_state_cmp_full.read() & ~o_data_V_last_V_1_sel_wr.read());
}

void correlator::thread_o_data_V_last_V_1_load_B() {
    o_data_V_last_V_1_load_B = (o_data_V_last_V_1_sel_wr.read() & o_data_V_last_V_1_state_cmp_full.read());
}

void correlator::thread_o_data_V_last_V_1_sel() {
    o_data_V_last_V_1_sel = o_data_V_last_V_1_sel_rd.read();
}

void correlator::thread_o_data_V_last_V_1_state_cmp_full() {
    o_data_V_last_V_1_state_cmp_full =  (sc_logic) ((!o_data_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(o_data_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void correlator::thread_o_data_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op328_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        o_data_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        o_data_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void correlator::thread_o_data_V_last_V_1_vld_out() {
    o_data_V_last_V_1_vld_out = o_data_V_last_V_1_state.read()[0];
}

void correlator::thread_p_Result_s_fu_1967_p5() {
    p_Result_s_fu_1967_p5 = esl_partset<32,32,16,32,32>(ap_const_lv32_0, p_Val2_3_4_fu_1949_p2.read(), ap_const_lv32_0, ap_const_lv32_F);
}

void correlator::thread_p_Val2_3_4_fu_1949_p2() {
    p_Val2_3_4_fu_1949_p2 = (!tmp9_fu_1943_p2.read().is_01() || !tmp6_fu_1926_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp9_fu_1943_p2.read()) + sc_biguint<16>(tmp6_fu_1926_p2.read()));
}

void correlator::thread_start_V_read_read_fu_418_p2() {
    start_V_read_read_fu_418_p2 = start_V.read();
}

void correlator::thread_tmp1_fu_1932_p2() {
    tmp1_fu_1932_p2 = (!phaseClass0_V_12.read().is_01() || !phaseClass0_V_9.read().is_01())? sc_lv<16>(): (sc_biguint<16>(phaseClass0_V_12.read()) + sc_biguint<16>(phaseClass0_V_9.read()));
}

void correlator::thread_tmp2_fu_1938_p2() {
    tmp2_fu_1938_p2 = (!phaseClass0_V_14.read().is_01() || !tmp_1_reg_2017.read().is_01())? sc_lv<16>(): (sc_biguint<16>(phaseClass0_V_14.read()) + sc_biguint<16>(tmp_1_reg_2017.read()));
}

void correlator::thread_tmp6_fu_1926_p2() {
    tmp6_fu_1926_p2 = (!tmp8_fu_1920_p2.read().is_01() || !tmp7_fu_1914_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp8_fu_1920_p2.read()) + sc_biguint<16>(tmp7_fu_1914_p2.read()));
}

void correlator::thread_tmp7_fu_1914_p2() {
    tmp7_fu_1914_p2 = (!phaseClass0_V_1.read().is_01() || !phaseClass0_V_0.read().is_01())? sc_lv<16>(): (sc_biguint<16>(phaseClass0_V_1.read()) + sc_biguint<16>(phaseClass0_V_0.read()));
}

void correlator::thread_tmp8_fu_1920_p2() {
    tmp8_fu_1920_p2 = (!phaseClass0_V_2.read().is_01() || !phaseClass0_V_7.read().is_01())? sc_lv<16>(): (sc_biguint<16>(phaseClass0_V_2.read()) + sc_biguint<16>(phaseClass0_V_7.read()));
}

void correlator::thread_tmp9_fu_1943_p2() {
    tmp9_fu_1943_p2 = (!tmp2_fu_1938_p2.read().is_01() || !tmp1_fu_1932_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp2_fu_1938_p2.read()) + sc_biguint<16>(tmp1_fu_1932_p2.read()));
}

void correlator::thread_tmp_1_fu_470_p1() {
    tmp_1_fu_470_p1 = i_data_TDATA.read().range(16-1, 0);
}

void correlator::thread_tmp_nbreadreq_fu_424_p4() {
    tmp_nbreadreq_fu_424_p4 =  (sc_lv<1>) ((i_data_TVALID.read()));
}

void correlator::thread_tmp_s_fu_1984_p2() {
    tmp_s_fu_1984_p2 = (!loadCount_V.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(loadCount_V.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void correlator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void correlator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_TDATA\" :  \"" << i_data_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_TVALID\" :  \"" << i_data_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"i_data_TREADY\" :  \"" << i_data_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_TLAST\" :  \"" << i_data_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_TDATA\" :  \"" << o_data_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_TVALID\" :  \"" << o_data_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"o_data_TREADY\" :  \"" << o_data_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_TLAST\" :  \"" << o_data_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"start_V\" :  \"" << start_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"phaseClass_V\" :  \"" << phaseClass_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

