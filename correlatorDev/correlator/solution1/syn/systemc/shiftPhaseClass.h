// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shiftPhaseClass_HH_
#define _shiftPhaseClass_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct shiftPhaseClass : public sc_module {
    // Port declarations 56
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > newValue_V;
    sc_in< sc_lv<4> > phaseClass_V;
    sc_in< sc_lv<16> > cor_phaseClass0_V_14_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_14_o;
    sc_out< sc_logic > cor_phaseClass0_V_14_o_ap_vld;
    sc_out< sc_lv<16> > cor_phaseClass0_V_15;
    sc_out< sc_logic > cor_phaseClass0_V_15_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_13_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_13_o;
    sc_out< sc_logic > cor_phaseClass0_V_13_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_12_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_12_o;
    sc_out< sc_logic > cor_phaseClass0_V_12_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_11_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_11_o;
    sc_out< sc_logic > cor_phaseClass0_V_11_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_10_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_10_o;
    sc_out< sc_logic > cor_phaseClass0_V_10_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_9_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_9_o;
    sc_out< sc_logic > cor_phaseClass0_V_9_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_8_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_8_o;
    sc_out< sc_logic > cor_phaseClass0_V_8_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_7_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_7_o;
    sc_out< sc_logic > cor_phaseClass0_V_7_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_6_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_6_o;
    sc_out< sc_logic > cor_phaseClass0_V_6_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_5_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_5_o;
    sc_out< sc_logic > cor_phaseClass0_V_5_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_4_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_4_o;
    sc_out< sc_logic > cor_phaseClass0_V_4_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_3_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_3_o;
    sc_out< sc_logic > cor_phaseClass0_V_3_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_2_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_2_o;
    sc_out< sc_logic > cor_phaseClass0_V_2_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_1_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_1_o;
    sc_out< sc_logic > cor_phaseClass0_V_1_o_ap_vld;
    sc_in< sc_lv<16> > cor_phaseClass0_V_0_i;
    sc_out< sc_lv<16> > cor_phaseClass0_V_0_o;
    sc_out< sc_logic > cor_phaseClass0_V_0_o_ap_vld;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    shiftPhaseClass(sc_module_name name);
    SC_HAS_PROCESS(shiftPhaseClass);

    ~shiftPhaseClass();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > phaseClass_V_read_read_fu_372_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cor_phaseClass0_V_0_o();
    void thread_cor_phaseClass0_V_0_o_ap_vld();
    void thread_cor_phaseClass0_V_10_o();
    void thread_cor_phaseClass0_V_10_o_ap_vld();
    void thread_cor_phaseClass0_V_11_o();
    void thread_cor_phaseClass0_V_11_o_ap_vld();
    void thread_cor_phaseClass0_V_12_o();
    void thread_cor_phaseClass0_V_12_o_ap_vld();
    void thread_cor_phaseClass0_V_13_o();
    void thread_cor_phaseClass0_V_13_o_ap_vld();
    void thread_cor_phaseClass0_V_14_o();
    void thread_cor_phaseClass0_V_14_o_ap_vld();
    void thread_cor_phaseClass0_V_15();
    void thread_cor_phaseClass0_V_15_ap_vld();
    void thread_cor_phaseClass0_V_1_o();
    void thread_cor_phaseClass0_V_1_o_ap_vld();
    void thread_cor_phaseClass0_V_2_o();
    void thread_cor_phaseClass0_V_2_o_ap_vld();
    void thread_cor_phaseClass0_V_3_o();
    void thread_cor_phaseClass0_V_3_o_ap_vld();
    void thread_cor_phaseClass0_V_4_o();
    void thread_cor_phaseClass0_V_4_o_ap_vld();
    void thread_cor_phaseClass0_V_5_o();
    void thread_cor_phaseClass0_V_5_o_ap_vld();
    void thread_cor_phaseClass0_V_6_o();
    void thread_cor_phaseClass0_V_6_o_ap_vld();
    void thread_cor_phaseClass0_V_7_o();
    void thread_cor_phaseClass0_V_7_o_ap_vld();
    void thread_cor_phaseClass0_V_8_o();
    void thread_cor_phaseClass0_V_8_o_ap_vld();
    void thread_cor_phaseClass0_V_9_o();
    void thread_cor_phaseClass0_V_9_o_ap_vld();
    void thread_phaseClass_V_read_read_fu_372_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
