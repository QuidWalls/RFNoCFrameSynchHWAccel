// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "correlateTop.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic correlateTop::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic correlateTop::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> correlateTop::ap_ST_fsm_pp0_stage0 = "1";
const bool correlateTop::ap_const_boolean_1 = true;
const sc_lv<1> correlateTop::ap_const_lv1_0 = "0";
const sc_lv<1> correlateTop::ap_const_lv1_1 = "1";
const sc_lv<2> correlateTop::ap_const_lv2_0 = "00";
const sc_lv<2> correlateTop::ap_const_lv2_2 = "10";
const sc_lv<2> correlateTop::ap_const_lv2_3 = "11";
const sc_lv<2> correlateTop::ap_const_lv2_1 = "1";
const sc_lv<32> correlateTop::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool correlateTop::ap_const_boolean_0 = false;
const sc_lv<32> correlateTop::ap_const_lv32_1 = "1";

correlateTop::correlateTop(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( i_data_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( i_data_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( i_data_data_V_0_vld_out );

    SC_METHOD(thread_ap_condition_311);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_reset_idle_pp0);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_currentState_load_load_fu_94_p1);
    sensitive << ( currentState );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_i_data_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_data_data_V_0_vld_in);
    sensitive << ( i_data_data_V_TVALID );

    SC_METHOD(thread_i_data_data_V_0_vld_out);
    sensitive << ( i_data_data_V_0_state );

    SC_METHOD(thread_i_data_data_V_TDATA_blk_n);
    sensitive << ( i_data_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_i_data_data_V_TREADY);
    sensitive << ( i_data_data_V_0_state );

    SC_METHOD(thread_i_data_last_V_0_ack_out);

    SC_METHOD(thread_i_data_last_V_0_vld_in);
    sensitive << ( i_data_last_V_TVALID );

    SC_METHOD(thread_i_data_last_V_TREADY);
    sensitive << ( i_data_last_V_0_state );

    SC_METHOD(thread_o_data_data_V_0_ack_out);

    SC_METHOD(thread_o_data_data_V_0_vld_in);
    sensitive << ( o_data_data_V_TVALID );

    SC_METHOD(thread_o_data_data_V_TREADY);
    sensitive << ( o_data_data_V_0_state );

    SC_METHOD(thread_o_data_last_V_0_ack_out);

    SC_METHOD(thread_o_data_last_V_0_vld_in);
    sensitive << ( o_data_last_V_TVALID );

    SC_METHOD(thread_o_data_last_V_TREADY);
    sensitive << ( o_data_last_V_0_state );

    SC_METHOD(thread_start_V_read_read_fu_76_p2);
    sensitive << ( start_V );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_2_fu_124_p2);
    sensitive << ( loadCount_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    i_data_data_V_0_state = "00";
    i_data_last_V_0_state = "00";
    o_data_data_V_0_state = "00";
    o_data_last_V_0_state = "00";
    currentState = "0";
    loadCount_V = "00000000000000000000000000000000";
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "correlateTop_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, i_data_data_V_TDATA, "(port)i_data_data_V_TDATA");
    sc_trace(mVcdFile, i_data_data_V_TVALID, "(port)i_data_data_V_TVALID");
    sc_trace(mVcdFile, i_data_data_V_TREADY, "(port)i_data_data_V_TREADY");
    sc_trace(mVcdFile, i_data_last_V_TLAST, "(port)i_data_last_V_TLAST");
    sc_trace(mVcdFile, i_data_last_V_TVALID, "(port)i_data_last_V_TVALID");
    sc_trace(mVcdFile, i_data_last_V_TREADY, "(port)i_data_last_V_TREADY");
    sc_trace(mVcdFile, o_data_data_V_TDATA, "(port)o_data_data_V_TDATA");
    sc_trace(mVcdFile, o_data_data_V_TVALID, "(port)o_data_data_V_TVALID");
    sc_trace(mVcdFile, o_data_data_V_TREADY, "(port)o_data_data_V_TREADY");
    sc_trace(mVcdFile, o_data_last_V_TLAST, "(port)o_data_last_V_TLAST");
    sc_trace(mVcdFile, o_data_last_V_TVALID, "(port)o_data_last_V_TVALID");
    sc_trace(mVcdFile, o_data_last_V_TREADY, "(port)o_data_last_V_TREADY");
    sc_trace(mVcdFile, start_V, "(port)start_V");
    sc_trace(mVcdFile, phaseClass_V, "(port)phaseClass_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, i_data_data_V_0_vld_in, "i_data_data_V_0_vld_in");
    sc_trace(mVcdFile, i_data_data_V_0_vld_out, "i_data_data_V_0_vld_out");
    sc_trace(mVcdFile, i_data_data_V_0_ack_out, "i_data_data_V_0_ack_out");
    sc_trace(mVcdFile, i_data_data_V_0_state, "i_data_data_V_0_state");
    sc_trace(mVcdFile, i_data_last_V_0_vld_in, "i_data_last_V_0_vld_in");
    sc_trace(mVcdFile, i_data_last_V_0_ack_out, "i_data_last_V_0_ack_out");
    sc_trace(mVcdFile, i_data_last_V_0_state, "i_data_last_V_0_state");
    sc_trace(mVcdFile, o_data_data_V_0_vld_in, "o_data_data_V_0_vld_in");
    sc_trace(mVcdFile, o_data_data_V_0_ack_out, "o_data_data_V_0_ack_out");
    sc_trace(mVcdFile, o_data_data_V_0_state, "o_data_data_V_0_state");
    sc_trace(mVcdFile, o_data_last_V_0_vld_in, "o_data_last_V_0_vld_in");
    sc_trace(mVcdFile, o_data_last_V_0_ack_out, "o_data_last_V_0_ack_out");
    sc_trace(mVcdFile, o_data_last_V_0_state, "o_data_last_V_0_state");
    sc_trace(mVcdFile, currentState, "currentState");
    sc_trace(mVcdFile, loadCount_V, "loadCount_V");
    sc_trace(mVcdFile, i_data_data_V_TDATA_blk_n, "i_data_data_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, start_V_read_read_fu_76_p2, "start_V_read_read_fu_76_p2");
    sc_trace(mVcdFile, start_V_read_reg_212, "start_V_read_reg_212");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, currentState_load_load_fu_94_p1, "currentState_load_load_fu_94_p1");
    sc_trace(mVcdFile, currentState_load_reg_216, "currentState_load_reg_216");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, tmp_2_fu_124_p2, "tmp_2_fu_124_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_311, "ap_condition_311");
#endif

    }
    mHdltvinHandle.open("correlateTop.hdltvin.dat");
    mHdltvoutHandle.open("correlateTop.hdltvout.dat");
}

correlateTop::~correlateTop() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void correlateTop::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        currentState = ap_const_lv1_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, currentState_load_load_fu_94_p1.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, start_V_read_read_fu_76_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_load_fu_94_p1.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
            currentState = ap_const_lv1_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        i_data_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, i_data_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, i_data_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(i_data_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, i_data_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(i_data_data_V_0_state.read(), ap_const_lv2_2)))) {
            i_data_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, i_data_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, i_data_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(i_data_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, i_data_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(i_data_data_V_0_state.read(), ap_const_lv2_1)))) {
            i_data_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, i_data_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(i_data_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, i_data_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(i_data_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(i_data_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, i_data_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, i_data_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, i_data_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, i_data_data_V_0_ack_out.read()))))) {
            i_data_data_V_0_state = ap_const_lv2_3;
        } else {
            i_data_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        i_data_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, i_data_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, i_data_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, i_data_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, i_data_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, i_data_last_V_0_state.read())))) {
            i_data_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, i_data_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, i_data_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, i_data_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, i_data_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, i_data_last_V_0_state.read())))) {
            i_data_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, i_data_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, i_data_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, i_data_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, i_data_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, i_data_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, i_data_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, i_data_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, i_data_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, i_data_last_V_0_ack_out.read()))))) {
            i_data_last_V_0_state = ap_const_lv2_3;
        } else {
            i_data_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        loadCount_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_311.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_216.read())) {
                loadCount_V = tmp_2_fu_124_p2.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, currentState_load_reg_216.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, start_V_read_reg_212.read()))) {
                loadCount_V = ap_const_lv32_0;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, o_data_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, o_data_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, o_data_data_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, o_data_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, o_data_data_V_0_state.read())))) {
            o_data_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, o_data_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, o_data_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, o_data_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_data_V_0_state.read())))) {
            o_data_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, o_data_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, o_data_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_data_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, o_data_data_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, o_data_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, o_data_data_V_0_ack_out.read()))))) {
            o_data_data_V_0_state = ap_const_lv2_3;
        } else {
            o_data_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, o_data_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, o_data_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, o_data_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, o_data_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, o_data_last_V_0_state.read())))) {
            o_data_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, o_data_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, o_data_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, o_data_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_last_V_0_state.read())))) {
            o_data_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, o_data_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, o_data_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, o_data_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, o_data_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, o_data_last_V_0_ack_out.read()))))) {
            o_data_last_V_0_state = ap_const_lv2_3;
        } else {
            o_data_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        currentState_load_reg_216 = currentState.read();
        start_V_read_reg_212 = start_V.read();
    }
}

void correlateTop::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void correlateTop::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void correlateTop::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, i_data_data_V_0_vld_out.read()));
}

void correlateTop::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, i_data_data_V_0_vld_out.read()));
}

void correlateTop::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void correlateTop::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = esl_seteq<1,1,1>(ap_const_logic_0, i_data_data_V_0_vld_out.read());
}

void correlateTop::thread_ap_condition_311() {
    ap_condition_311 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void correlateTop::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void correlateTop::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void correlateTop::thread_ap_reset_idle_pp0() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void correlateTop::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void correlateTop::thread_currentState_load_load_fu_94_p1() {
    currentState_load_load_fu_94_p1 = currentState.read();
}

void correlateTop::thread_i_data_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_data_data_V_0_ack_out = ap_const_logic_1;
    } else {
        i_data_data_V_0_ack_out = ap_const_logic_0;
    }
}

void correlateTop::thread_i_data_data_V_0_vld_in() {
    i_data_data_V_0_vld_in = i_data_data_V_TVALID.read();
}

void correlateTop::thread_i_data_data_V_0_vld_out() {
    i_data_data_V_0_vld_out = i_data_data_V_0_state.read()[0];
}

void correlateTop::thread_i_data_data_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        i_data_data_V_TDATA_blk_n = i_data_data_V_0_state.read()[0];
    } else {
        i_data_data_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void correlateTop::thread_i_data_data_V_TREADY() {
    i_data_data_V_TREADY = i_data_data_V_0_state.read()[1];
}

void correlateTop::thread_i_data_last_V_0_ack_out() {
    i_data_last_V_0_ack_out = ap_const_logic_0;
}

void correlateTop::thread_i_data_last_V_0_vld_in() {
    i_data_last_V_0_vld_in = i_data_last_V_TVALID.read();
}

void correlateTop::thread_i_data_last_V_TREADY() {
    i_data_last_V_TREADY = i_data_last_V_0_state.read()[1];
}

void correlateTop::thread_o_data_data_V_0_ack_out() {
    o_data_data_V_0_ack_out = ap_const_logic_0;
}

void correlateTop::thread_o_data_data_V_0_vld_in() {
    o_data_data_V_0_vld_in = o_data_data_V_TVALID.read();
}

void correlateTop::thread_o_data_data_V_TREADY() {
    o_data_data_V_TREADY = o_data_data_V_0_state.read()[1];
}

void correlateTop::thread_o_data_last_V_0_ack_out() {
    o_data_last_V_0_ack_out = ap_const_logic_0;
}

void correlateTop::thread_o_data_last_V_0_vld_in() {
    o_data_last_V_0_vld_in = o_data_last_V_TVALID.read();
}

void correlateTop::thread_o_data_last_V_TREADY() {
    o_data_last_V_TREADY = o_data_last_V_0_state.read()[1];
}

void correlateTop::thread_start_V_read_read_fu_76_p2() {
    start_V_read_read_fu_76_p2 = start_V.read();
}

void correlateTop::thread_tmp_2_fu_124_p2() {
    tmp_2_fu_124_p2 = (!ap_const_lv32_1.is_01() || !loadCount_V.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(loadCount_V.read()));
}

void correlateTop::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void correlateTop::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_data_V_TDATA\" :  \"" << i_data_data_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_data_V_TVALID\" :  \"" << i_data_data_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"i_data_data_V_TREADY\" :  \"" << i_data_data_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_last_V_TLAST\" :  \"" << i_data_last_V_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_last_V_TVALID\" :  \"" << i_data_last_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"i_data_last_V_TREADY\" :  \"" << i_data_last_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"o_data_data_V_TDATA\" :  \"" << o_data_data_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"o_data_data_V_TVALID\" :  \"" << o_data_data_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_data_V_TREADY\" :  \"" << o_data_data_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"o_data_last_V_TLAST\" :  \"" << o_data_last_V_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"o_data_last_V_TVALID\" :  \"" << o_data_last_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_last_V_TREADY\" :  \"" << o_data_last_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"start_V\" :  \"" << start_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"phaseClass_V\" :  \"" << phaseClass_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

