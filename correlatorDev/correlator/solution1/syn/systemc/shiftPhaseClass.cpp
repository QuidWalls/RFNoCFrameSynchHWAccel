// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "shiftPhaseClass.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic shiftPhaseClass::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic shiftPhaseClass::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> shiftPhaseClass::ap_ST_fsm_state1 = "1";
const sc_lv<32> shiftPhaseClass::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> shiftPhaseClass::ap_const_lv4_0 = "0000";
const bool shiftPhaseClass::ap_const_boolean_1 = true;

shiftPhaseClass::shiftPhaseClass(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_cor_phaseClass0_V_0_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( newValue_V );
    sensitive << ( cor_phaseClass0_V_0_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_0_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_10_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_10_i );
    sensitive << ( cor_phaseClass0_V_9_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_10_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_11_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_11_i );
    sensitive << ( cor_phaseClass0_V_10_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_11_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_12_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_12_i );
    sensitive << ( cor_phaseClass0_V_11_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_12_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_13_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_13_i );
    sensitive << ( cor_phaseClass0_V_12_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_13_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_14_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_14_i );
    sensitive << ( cor_phaseClass0_V_13_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_14_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_15);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_14_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_15_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_1_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_1_i );
    sensitive << ( cor_phaseClass0_V_0_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_1_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_2_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_2_i );
    sensitive << ( cor_phaseClass0_V_1_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_2_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_3_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_3_i );
    sensitive << ( cor_phaseClass0_V_2_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_3_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_4_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_4_i );
    sensitive << ( cor_phaseClass0_V_3_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_4_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_5_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_5_i );
    sensitive << ( cor_phaseClass0_V_4_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_5_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_6_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_6_i );
    sensitive << ( cor_phaseClass0_V_5_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_6_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_7_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_7_i );
    sensitive << ( cor_phaseClass0_V_6_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_7_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_8_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_8_i );
    sensitive << ( cor_phaseClass0_V_7_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_8_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_9_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cor_phaseClass0_V_9_i );
    sensitive << ( cor_phaseClass0_V_8_i );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_cor_phaseClass0_V_9_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( phaseClass_V_read_read_fu_372_p2 );

    SC_METHOD(thread_phaseClass_V_read_read_fu_372_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( phaseClass_V );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );

    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "shiftPhaseClass_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, newValue_V, "(port)newValue_V");
    sc_trace(mVcdFile, phaseClass_V, "(port)phaseClass_V");
    sc_trace(mVcdFile, cor_phaseClass0_V_14_i, "(port)cor_phaseClass0_V_14_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_14_o, "(port)cor_phaseClass0_V_14_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_14_o_ap_vld, "(port)cor_phaseClass0_V_14_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_15, "(port)cor_phaseClass0_V_15");
    sc_trace(mVcdFile, cor_phaseClass0_V_15_ap_vld, "(port)cor_phaseClass0_V_15_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_13_i, "(port)cor_phaseClass0_V_13_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_13_o, "(port)cor_phaseClass0_V_13_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_13_o_ap_vld, "(port)cor_phaseClass0_V_13_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_12_i, "(port)cor_phaseClass0_V_12_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_12_o, "(port)cor_phaseClass0_V_12_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_12_o_ap_vld, "(port)cor_phaseClass0_V_12_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_11_i, "(port)cor_phaseClass0_V_11_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_11_o, "(port)cor_phaseClass0_V_11_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_11_o_ap_vld, "(port)cor_phaseClass0_V_11_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_10_i, "(port)cor_phaseClass0_V_10_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_10_o, "(port)cor_phaseClass0_V_10_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_10_o_ap_vld, "(port)cor_phaseClass0_V_10_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_9_i, "(port)cor_phaseClass0_V_9_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_9_o, "(port)cor_phaseClass0_V_9_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_9_o_ap_vld, "(port)cor_phaseClass0_V_9_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_8_i, "(port)cor_phaseClass0_V_8_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_8_o, "(port)cor_phaseClass0_V_8_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_8_o_ap_vld, "(port)cor_phaseClass0_V_8_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_7_i, "(port)cor_phaseClass0_V_7_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_7_o, "(port)cor_phaseClass0_V_7_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_7_o_ap_vld, "(port)cor_phaseClass0_V_7_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_6_i, "(port)cor_phaseClass0_V_6_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_6_o, "(port)cor_phaseClass0_V_6_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_6_o_ap_vld, "(port)cor_phaseClass0_V_6_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_5_i, "(port)cor_phaseClass0_V_5_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_5_o, "(port)cor_phaseClass0_V_5_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_5_o_ap_vld, "(port)cor_phaseClass0_V_5_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_4_i, "(port)cor_phaseClass0_V_4_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_4_o, "(port)cor_phaseClass0_V_4_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_4_o_ap_vld, "(port)cor_phaseClass0_V_4_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_3_i, "(port)cor_phaseClass0_V_3_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_3_o, "(port)cor_phaseClass0_V_3_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_3_o_ap_vld, "(port)cor_phaseClass0_V_3_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_2_i, "(port)cor_phaseClass0_V_2_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_2_o, "(port)cor_phaseClass0_V_2_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_2_o_ap_vld, "(port)cor_phaseClass0_V_2_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_1_i, "(port)cor_phaseClass0_V_1_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_1_o, "(port)cor_phaseClass0_V_1_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_1_o_ap_vld, "(port)cor_phaseClass0_V_1_o_ap_vld");
    sc_trace(mVcdFile, cor_phaseClass0_V_0_i, "(port)cor_phaseClass0_V_0_i");
    sc_trace(mVcdFile, cor_phaseClass0_V_0_o, "(port)cor_phaseClass0_V_0_o");
    sc_trace(mVcdFile, cor_phaseClass0_V_0_o_ap_vld, "(port)cor_phaseClass0_V_0_o_ap_vld");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, phaseClass_V_read_read_fu_372_p2, "phaseClass_V_read_read_fu_372_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

shiftPhaseClass::~shiftPhaseClass() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void shiftPhaseClass::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void shiftPhaseClass::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void shiftPhaseClass::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_0_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_0_o = newValue_V.read();
    } else {
        cor_phaseClass0_V_0_o = cor_phaseClass0_V_0_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_0_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_0_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_0_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_10_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_10_o = cor_phaseClass0_V_9_i.read();
    } else {
        cor_phaseClass0_V_10_o = cor_phaseClass0_V_10_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_10_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_10_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_10_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_11_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_11_o = cor_phaseClass0_V_10_i.read();
    } else {
        cor_phaseClass0_V_11_o = cor_phaseClass0_V_11_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_11_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_11_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_11_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_12_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_12_o = cor_phaseClass0_V_11_i.read();
    } else {
        cor_phaseClass0_V_12_o = cor_phaseClass0_V_12_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_12_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_12_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_12_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_13_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_13_o = cor_phaseClass0_V_12_i.read();
    } else {
        cor_phaseClass0_V_13_o = cor_phaseClass0_V_13_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_13_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_13_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_13_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_14_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_14_o = cor_phaseClass0_V_13_i.read();
    } else {
        cor_phaseClass0_V_14_o = cor_phaseClass0_V_14_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_14_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_14_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_14_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_15() {
    cor_phaseClass0_V_15 = cor_phaseClass0_V_14_i.read();
}

void shiftPhaseClass::thread_cor_phaseClass0_V_15_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_15_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_15_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_1_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_1_o = cor_phaseClass0_V_0_i.read();
    } else {
        cor_phaseClass0_V_1_o = cor_phaseClass0_V_1_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_1_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_1_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_1_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_2_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_2_o = cor_phaseClass0_V_1_i.read();
    } else {
        cor_phaseClass0_V_2_o = cor_phaseClass0_V_2_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_2_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_2_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_2_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_3_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_3_o = cor_phaseClass0_V_2_i.read();
    } else {
        cor_phaseClass0_V_3_o = cor_phaseClass0_V_3_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_3_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_3_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_3_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_4_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_4_o = cor_phaseClass0_V_3_i.read();
    } else {
        cor_phaseClass0_V_4_o = cor_phaseClass0_V_4_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_4_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_4_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_4_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_5_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_5_o = cor_phaseClass0_V_4_i.read();
    } else {
        cor_phaseClass0_V_5_o = cor_phaseClass0_V_5_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_5_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_5_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_5_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_6_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_6_o = cor_phaseClass0_V_5_i.read();
    } else {
        cor_phaseClass0_V_6_o = cor_phaseClass0_V_6_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_6_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_6_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_6_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_7_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_7_o = cor_phaseClass0_V_6_i.read();
    } else {
        cor_phaseClass0_V_7_o = cor_phaseClass0_V_7_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_7_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_7_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_7_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_8_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_8_o = cor_phaseClass0_V_7_i.read();
    } else {
        cor_phaseClass0_V_8_o = cor_phaseClass0_V_8_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_8_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_8_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_8_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_9_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_9_o = cor_phaseClass0_V_8_i.read();
    } else {
        cor_phaseClass0_V_9_o = cor_phaseClass0_V_9_i.read();
    }
}

void shiftPhaseClass::thread_cor_phaseClass0_V_9_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,4,4>(phaseClass_V_read_read_fu_372_p2.read(), ap_const_lv4_0))) {
        cor_phaseClass0_V_9_o_ap_vld = ap_const_logic_1;
    } else {
        cor_phaseClass0_V_9_o_ap_vld = ap_const_logic_0;
    }
}

void shiftPhaseClass::thread_phaseClass_V_read_read_fu_372_p2() {
    phaseClass_V_read_read_fu_372_p2 = phaseClass_V.read();
}

void shiftPhaseClass::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

