// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _correlator_HH_
#define _correlator_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "correlator_mux_25bkb.h"

namespace ap_rtl {

struct correlator : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > i_data_TDATA;
    sc_in< sc_logic > i_data_TVALID;
    sc_out< sc_logic > i_data_TREADY;
    sc_in< sc_lv<1> > i_data_TLAST;
    sc_in< sc_lv<32> > o_data_TDATA;
    sc_in< sc_logic > o_data_TVALID;
    sc_out< sc_logic > o_data_TREADY;
    sc_in< sc_lv<1> > o_data_TLAST;
    sc_in< sc_lv<1> > start_V;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<8> > ap_var_for_const1;


    // Module declarations
    correlator(sc_module_name name);
    SC_HAS_PROCESS(correlator);

    ~correlator();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    correlator_mux_25bkbcorrelator_mux_25bkb_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > o_data_V_last_V_0_vld_in;
    sc_signal< sc_logic > o_data_V_last_V_0_ack_out;
    sc_signal< sc_lv<2> > o_data_V_last_V_0_state;
    sc_signal< sc_lv<1> > currentState;
    sc_signal< sc_logic > i_data_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > currentState_load_load_fu_76_p1;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_58_p4;
    sc_signal< bool > ap_predicate_op23_read_state1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > start_V_read_read_fu_52_p2;
    sc_signal< sc_lv<32> > empty_3_fu_86_p258;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_predicate_op23_read_state1();
    void thread_ap_rst_n_inv();
    void thread_currentState_load_load_fu_76_p1();
    void thread_i_data_TDATA_blk_n();
    void thread_i_data_TREADY();
    void thread_o_data_TREADY();
    void thread_o_data_V_last_V_0_ack_out();
    void thread_o_data_V_last_V_0_vld_in();
    void thread_start_V_read_read_fu_52_p2();
    void thread_tmp_nbreadreq_fu_58_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
