// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="correlateTop,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.870000,HLS_SYN_LAT=5,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1950,HLS_SYN_LUT=1429}" *)

module correlateTop (
        ap_clk,
        ap_rst_n,
        i_data_TDATA,
        i_data_TVALID,
        i_data_TREADY,
        i_data_TLAST,
        o_data_TDATA,
        o_data_TVALID,
        o_data_TREADY,
        o_data_TLAST,
        start_V,
        phaseClass_V
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input  [31:0] i_data_TDATA;
input   i_data_TVALID;
output   i_data_TREADY;
input  [0:0] i_data_TLAST;
output  [31:0] o_data_TDATA;
output   o_data_TVALID;
input   o_data_TREADY;
output  [0:0] o_data_TLAST;
input  [0:0] start_V;
input  [3:0] phaseClass_V;

reg    ap_rst_n_inv;
wire    i_data_data_V_0_vld_in;
wire    i_data_data_V_0_vld_out;
reg    i_data_data_V_0_ack_out;
reg   [1:0] i_data_data_V_0_state;
reg   [0:0] i_data_last_V_0_data_out;
wire    i_data_last_V_0_vld_in;
wire    i_data_last_V_0_vld_out;
wire    i_data_last_V_0_ack_in;
reg    i_data_last_V_0_ack_out;
reg   [0:0] i_data_last_V_0_payload_A;
reg   [0:0] i_data_last_V_0_payload_B;
reg    i_data_last_V_0_sel_rd;
reg    i_data_last_V_0_sel_wr;
wire    i_data_last_V_0_sel;
wire    i_data_last_V_0_load_A;
wire    i_data_last_V_0_load_B;
reg   [1:0] i_data_last_V_0_state;
wire    i_data_last_V_0_state_cmp_full;
reg   [31:0] o_data_data_V_1_data_out;
reg    o_data_data_V_1_vld_in;
wire    o_data_data_V_1_vld_out;
wire    o_data_data_V_1_ack_in;
wire    o_data_data_V_1_ack_out;
reg   [31:0] o_data_data_V_1_payload_A;
reg   [31:0] o_data_data_V_1_payload_B;
reg    o_data_data_V_1_sel_rd;
reg    o_data_data_V_1_sel_wr;
wire    o_data_data_V_1_sel;
wire    o_data_data_V_1_load_A;
wire    o_data_data_V_1_load_B;
reg   [1:0] o_data_data_V_1_state;
wire    o_data_data_V_1_state_cmp_full;
reg   [0:0] o_data_last_V_1_data_out;
reg    o_data_last_V_1_vld_in;
wire    o_data_last_V_1_vld_out;
wire    o_data_last_V_1_ack_in;
wire    o_data_last_V_1_ack_out;
reg   [0:0] o_data_last_V_1_payload_A;
reg   [0:0] o_data_last_V_1_payload_B;
reg    o_data_last_V_1_sel_rd;
reg    o_data_last_V_1_sel_wr;
wire    o_data_last_V_1_sel;
wire    o_data_last_V_1_load_A;
wire    o_data_last_V_1_load_B;
reg   [1:0] o_data_last_V_1_state;
wire    o_data_last_V_1_state_cmp_full;
reg   [0:0] currentState;
reg   [31:0] loadCount_V;
reg   [3:0] cor_phaseArray_phase_8_address0;
reg    cor_phaseArray_phase_8_ce0;
reg    cor_phaseArray_phase_8_we0;
wire   [31:0] cor_phaseArray_phase_8_q0;
reg   [3:0] cor_phaseArray_phase_9_address0;
reg    cor_phaseArray_phase_9_ce0;
reg    cor_phaseArray_phase_9_we0;
wire   [31:0] cor_phaseArray_phase_9_q0;
reg   [3:0] cor_phaseArray_phase_10_address0;
reg    cor_phaseArray_phase_10_ce0;
reg    cor_phaseArray_phase_10_we0;
wire   [31:0] cor_phaseArray_phase_10_q0;
reg   [3:0] cor_phaseArray_phase_11_address0;
reg    cor_phaseArray_phase_11_ce0;
reg    cor_phaseArray_phase_11_we0;
wire   [31:0] cor_phaseArray_phase_11_q0;
reg   [3:0] cor_phaseArray_phase_12_address0;
reg    cor_phaseArray_phase_12_ce0;
reg    cor_phaseArray_phase_12_we0;
wire   [31:0] cor_phaseArray_phase_12_q0;
reg   [3:0] cor_phaseArray_phase_address0;
reg    cor_phaseArray_phase_ce0;
reg    cor_phaseArray_phase_we0;
wire   [31:0] cor_phaseArray_phase_q0;
reg   [3:0] cor_phaseArray_phase_1_address0;
reg    cor_phaseArray_phase_1_ce0;
reg    cor_phaseArray_phase_1_we0;
wire   [31:0] cor_phaseArray_phase_1_q0;
reg   [3:0] cor_phaseArray_phase_2_address0;
reg    cor_phaseArray_phase_2_ce0;
reg    cor_phaseArray_phase_2_we0;
wire   [31:0] cor_phaseArray_phase_2_q0;
reg   [3:0] cor_phaseArray_phase_3_address0;
reg    cor_phaseArray_phase_3_ce0;
reg    cor_phaseArray_phase_3_we0;
wire   [31:0] cor_phaseArray_phase_3_q0;
reg   [3:0] cor_phaseArray_phase_4_address0;
reg    cor_phaseArray_phase_4_ce0;
reg    cor_phaseArray_phase_4_we0;
wire   [31:0] cor_phaseArray_phase_4_q0;
reg   [3:0] cor_phaseArray_phase_5_address0;
reg    cor_phaseArray_phase_5_ce0;
reg    cor_phaseArray_phase_5_we0;
wire   [0:0] cor_phaseArray_phase_5_q0;
reg   [3:0] cor_phaseArray_phase_6_address0;
reg    cor_phaseArray_phase_6_ce0;
reg    cor_phaseArray_phase_6_we0;
wire   [0:0] cor_phaseArray_phase_6_q0;
reg   [3:0] cor_phaseArray_phase_7_address0;
reg    cor_phaseArray_phase_7_ce0;
reg    cor_phaseArray_phase_7_we0;
wire   [0:0] cor_phaseArray_phase_7_q0;
reg   [3:0] cor_phaseArray_phase_13_address0;
reg    cor_phaseArray_phase_13_ce0;
reg    cor_phaseArray_phase_13_we0;
wire   [0:0] cor_phaseArray_phase_13_q0;
reg    i_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] currentState_load_reg_537;
reg    o_data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_reg_pp0_iter1_currentState_load_reg_537;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_flag00000000;
reg   [0:0] ap_reg_pp0_iter2_currentState_load_reg_537;
wire   [0:0] currentState_load_load_fu_319_p1;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [3:0] cor_phaseArray_phase_reg_541;
reg   [3:0] cor_phaseArray_phase_2_reg_546;
reg   [3:0] cor_phaseArray_phase_4_reg_551;
reg   [3:0] cor_phaseArray_phase_6_reg_556;
reg   [3:0] cor_phaseArray_phase_8_reg_561;
reg   [3:0] cor_phaseArray_phase_10_reg_566;
reg   [3:0] cor_phaseArray_phase_12_reg_571;
reg   [3:0] cor_phaseArray_phase_14_reg_576;
reg   [3:0] cor_phaseArray_phase_16_reg_581;
reg   [3:0] cor_phaseArray_phase_18_reg_586;
reg   [3:0] cor_phaseArray_phase_20_reg_591;
reg   [3:0] cor_phaseArray_phase_22_reg_596;
reg   [3:0] cor_phaseArray_phase_24_reg_601;
reg   [3:0] cor_phaseArray_phase_26_reg_606;
wire   [0:0] start_V_read_read_fu_108_p2;
reg   [0:0] start_V_read_reg_611;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
reg    ap_block_state6_pp0_stage1_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage1_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_start_V_read_reg_611;
wire   [31:0] p_Val2_6_i_fu_388_p2;
reg   [31:0] p_Val2_6_i_reg_615;
wire   [31:0] p_Val2_3_2_i_fu_424_p2;
reg   [31:0] p_Val2_3_2_i_reg_622;
reg   [0:0] o_data_last_V_tmp_reg_629;
wire   [31:0] tmp_i_4_fu_474_p3;
reg   [31:0] tmp_i_4_reg_634;
reg   [31:0] res_V_reg_639;
wire   [31:0] o_data_data_V_tmp_fu_528_p3;
reg    ap_block_pp0_stage1_flag00011011;
wire   [63:0] tmp_i_fu_323_p1;
wire   [31:0] tmp_4_fu_511_p2;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_block_pp0_stage1_flag00001001;
wire   [31:0] extLd6_fu_341_p1;
wire   [31:0] tmp9_fu_358_p2;
wire   [31:0] extLd1_fu_350_p1;
wire   [31:0] tmp_fu_370_p2;
wire   [31:0] tmp1_fu_376_p2;
wire   [31:0] tmp8_fu_364_p2;
wire   [31:0] tmp2_fu_382_p2;
wire   [31:0] extLd3_fu_346_p1;
wire   [31:0] tmp3_fu_394_p2;
wire   [31:0] extLd_fu_354_p1;
wire   [31:0] tmp5_fu_406_p2;
wire   [31:0] tmp6_fu_412_p2;
wire   [31:0] tmp4_fu_400_p2;
wire   [31:0] tmp7_fu_418_p2;
wire   [0:0] tmp_5_i_fu_462_p2;
wire   [31:0] p_Val2_9_i_fu_470_p2;
wire   [31:0] p_Val2_i_fu_466_p2;
wire  signed [31:0] p_Val2_2_fu_485_p0;
wire  signed [41:0] OP1_V_cast_fu_482_p1;
wire  signed [31:0] p_Val2_2_fu_485_p1;
wire   [41:0] p_Val2_2_fu_485_p2;
wire   [0:0] tmp_5_fu_523_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_flag00011011;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_526;

// power-on initialization
initial begin
#0 i_data_data_V_0_state = 2'd0;
#0 i_data_last_V_0_sel_rd = 1'b0;
#0 i_data_last_V_0_sel_wr = 1'b0;
#0 i_data_last_V_0_state = 2'd0;
#0 o_data_data_V_1_sel_rd = 1'b0;
#0 o_data_data_V_1_sel_wr = 1'b0;
#0 o_data_data_V_1_state = 2'd0;
#0 o_data_last_V_1_sel_rd = 1'b0;
#0 o_data_last_V_1_sel_wr = 1'b0;
#0 o_data_last_V_1_state = 2'd0;
#0 currentState = 1'd0;
#0 loadCount_V = 32'd0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_8_address0),
    .ce0(cor_phaseArray_phase_8_ce0),
    .we0(cor_phaseArray_phase_8_we0),
    .d0(cor_phaseArray_phase_9_q0),
    .q0(cor_phaseArray_phase_8_q0)
);

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_9_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_9_address0),
    .ce0(cor_phaseArray_phase_9_ce0),
    .we0(cor_phaseArray_phase_9_we0),
    .d0(cor_phaseArray_phase_10_q0),
    .q0(cor_phaseArray_phase_9_q0)
);

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_10_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_10_address0),
    .ce0(cor_phaseArray_phase_10_ce0),
    .we0(cor_phaseArray_phase_10_we0),
    .d0(cor_phaseArray_phase_11_q0),
    .q0(cor_phaseArray_phase_10_q0)
);

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_11_address0),
    .ce0(cor_phaseArray_phase_11_ce0),
    .we0(cor_phaseArray_phase_11_we0),
    .d0(cor_phaseArray_phase_12_q0),
    .q0(cor_phaseArray_phase_11_q0)
);

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_12_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_12_address0),
    .ce0(cor_phaseArray_phase_12_ce0),
    .we0(cor_phaseArray_phase_12_we0),
    .d0(cor_phaseArray_phase_q0),
    .q0(cor_phaseArray_phase_12_q0)
);

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_address0),
    .ce0(cor_phaseArray_phase_ce0),
    .we0(cor_phaseArray_phase_we0),
    .d0(cor_phaseArray_phase_1_q0),
    .q0(cor_phaseArray_phase_q0)
);

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_1_address0),
    .ce0(cor_phaseArray_phase_1_ce0),
    .we0(cor_phaseArray_phase_1_we0),
    .d0(cor_phaseArray_phase_2_q0),
    .q0(cor_phaseArray_phase_1_q0)
);

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_2_address0),
    .ce0(cor_phaseArray_phase_2_ce0),
    .we0(cor_phaseArray_phase_2_we0),
    .d0(cor_phaseArray_phase_3_q0),
    .q0(cor_phaseArray_phase_2_q0)
);

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_3_address0),
    .ce0(cor_phaseArray_phase_3_ce0),
    .we0(cor_phaseArray_phase_3_we0),
    .d0(cor_phaseArray_phase_4_q0),
    .q0(cor_phaseArray_phase_3_q0)
);

correlateTop_cor_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_4_address0),
    .ce0(cor_phaseArray_phase_4_ce0),
    .we0(cor_phaseArray_phase_4_we0),
    .d0(extLd6_fu_341_p1),
    .q0(cor_phaseArray_phase_4_q0)
);

correlateTop_cor_lbW #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_5_address0),
    .ce0(cor_phaseArray_phase_5_ce0),
    .we0(cor_phaseArray_phase_5_we0),
    .d0(cor_phaseArray_phase_6_q0),
    .q0(cor_phaseArray_phase_5_q0)
);

correlateTop_cor_lbW #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_6_address0),
    .ce0(cor_phaseArray_phase_6_ce0),
    .we0(cor_phaseArray_phase_6_we0),
    .d0(cor_phaseArray_phase_7_q0),
    .q0(cor_phaseArray_phase_6_q0)
);

correlateTop_cor_lbW #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_7_address0),
    .ce0(cor_phaseArray_phase_7_ce0),
    .we0(cor_phaseArray_phase_7_we0),
    .d0(cor_phaseArray_phase_13_q0),
    .q0(cor_phaseArray_phase_7_q0)
);

correlateTop_cor_lbW #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
cor_phaseArray_phase_13_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cor_phaseArray_phase_13_address0),
    .ce0(cor_phaseArray_phase_13_ce0),
    .we0(cor_phaseArray_phase_13_we0),
    .d0(1'd0),
    .q0(cor_phaseArray_phase_13_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        currentState <= 1'd0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == currentState_load_load_fu_319_p1) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1) & (1'd0 == currentState_load_reg_537) & (1'd1 == start_V_read_read_fu_108_p2)))) begin
            currentState <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_data_V_0_vld_in) & (1'b1 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd3)) | ((1'b0 == i_data_data_V_0_vld_in) & (i_data_data_V_0_state == 2'd2)))) begin
            i_data_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_data_V_0_vld_in) & (1'b0 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd3)) | ((1'b0 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd1)))) begin
            i_data_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_data_V_0_vld_in) & (i_data_data_V_0_state == 2'd2)) | ((1'b1 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd1)) | ((i_data_data_V_0_state == 2'd3) & ~((1'b1 == i_data_data_V_0_vld_in) & (1'b0 == i_data_data_V_0_ack_out)) & ~((1'b0 == i_data_data_V_0_vld_in) & (1'b1 == i_data_data_V_0_ack_out))))) begin
            i_data_data_V_0_state <= 2'd3;
        end else begin
            i_data_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_last_V_0_ack_out) & (1'b1 == i_data_last_V_0_vld_out))) begin
            i_data_last_V_0_sel_rd <= ~i_data_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_last_V_0_vld_in) & (1'b1 == i_data_last_V_0_ack_in))) begin
            i_data_last_V_0_sel_wr <= ~i_data_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_last_V_0_vld_in) & (1'b1 == i_data_last_V_0_ack_out) & (2'd3 == i_data_last_V_0_state)) | ((1'b0 == i_data_last_V_0_vld_in) & (2'd2 == i_data_last_V_0_state)))) begin
            i_data_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_last_V_0_vld_in) & (1'b0 == i_data_last_V_0_ack_out) & (2'd3 == i_data_last_V_0_state)) | ((1'b0 == i_data_last_V_0_ack_out) & (2'd1 == i_data_last_V_0_state)))) begin
            i_data_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_last_V_0_vld_in) & (2'd2 == i_data_last_V_0_state)) | ((1'b1 == i_data_last_V_0_ack_out) & (2'd1 == i_data_last_V_0_state)) | ((2'd3 == i_data_last_V_0_state) & ~((1'b1 == i_data_last_V_0_vld_in) & (1'b0 == i_data_last_V_0_ack_out)) & ~((1'b0 == i_data_last_V_0_vld_in) & (1'b1 == i_data_last_V_0_ack_out))))) begin
            i_data_last_V_0_state <= 2'd3;
        end else begin
            i_data_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        loadCount_V <= 32'd0;
    end else begin
        if ((ap_condition_526 == 1'b1)) begin
            if ((1'd1 == ap_reg_pp0_iter1_currentState_load_reg_537)) begin
                loadCount_V <= tmp_4_fu_511_p2;
            end else if (((1'd0 == ap_reg_pp0_iter1_currentState_load_reg_537) & (1'd1 == ap_reg_pp0_iter1_start_V_read_reg_611))) begin
                loadCount_V <= 32'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_data_V_1_ack_out) & (1'b1 == o_data_data_V_1_vld_out))) begin
            o_data_data_V_1_sel_rd <= ~o_data_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_data_V_1_vld_in) & (1'b1 == o_data_data_V_1_ack_in))) begin
            o_data_data_V_1_sel_wr <= ~o_data_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_data_V_1_vld_in) & (1'b1 == o_data_data_V_1_ack_out) & (2'd3 == o_data_data_V_1_state)) | ((1'b0 == o_data_data_V_1_vld_in) & (2'd2 == o_data_data_V_1_state)))) begin
            o_data_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_data_V_1_vld_in) & (1'b0 == o_data_data_V_1_ack_out) & (2'd3 == o_data_data_V_1_state)) | ((1'b0 == o_data_data_V_1_ack_out) & (2'd1 == o_data_data_V_1_state)))) begin
            o_data_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_data_V_1_vld_in) & (2'd2 == o_data_data_V_1_state)) | ((1'b1 == o_data_data_V_1_ack_out) & (2'd1 == o_data_data_V_1_state)) | ((2'd3 == o_data_data_V_1_state) & ~((1'b1 == o_data_data_V_1_vld_in) & (1'b0 == o_data_data_V_1_ack_out)) & ~((1'b0 == o_data_data_V_1_vld_in) & (1'b1 == o_data_data_V_1_ack_out))))) begin
            o_data_data_V_1_state <= 2'd3;
        end else begin
            o_data_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_last_V_1_ack_out) & (1'b1 == o_data_last_V_1_vld_out))) begin
            o_data_last_V_1_sel_rd <= ~o_data_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_last_V_1_vld_in) & (1'b1 == o_data_last_V_1_ack_in))) begin
            o_data_last_V_1_sel_wr <= ~o_data_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_last_V_1_vld_in) & (1'b1 == o_data_last_V_1_ack_out) & (2'd3 == o_data_last_V_1_state)) | ((1'b0 == o_data_last_V_1_vld_in) & (2'd2 == o_data_last_V_1_state)))) begin
            o_data_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_last_V_1_vld_in) & (1'b0 == o_data_last_V_1_ack_out) & (2'd3 == o_data_last_V_1_state)) | ((1'b0 == o_data_last_V_1_ack_out) & (2'd1 == o_data_last_V_1_state)))) begin
            o_data_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_last_V_1_vld_in) & (2'd2 == o_data_last_V_1_state)) | ((1'b1 == o_data_last_V_1_ack_out) & (2'd1 == o_data_last_V_1_state)) | ((2'd3 == o_data_last_V_1_state) & ~((1'b1 == o_data_last_V_1_vld_in) & (1'b0 == o_data_last_V_1_ack_out)) & ~((1'b0 == o_data_last_V_1_vld_in) & (1'b1 == o_data_last_V_1_ack_out))))) begin
            o_data_last_V_1_state <= 2'd3;
        end else begin
            o_data_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_currentState_load_reg_537 <= currentState_load_reg_537;
        ap_reg_pp0_iter2_currentState_load_reg_537 <= ap_reg_pp0_iter1_currentState_load_reg_537;
        currentState_load_reg_537 <= currentState;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_start_V_read_reg_611 <= start_V_read_reg_611;
        start_V_read_reg_611 <= start_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == currentState_load_load_fu_319_p1))) begin
        cor_phaseArray_phase_10_reg_566 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_12_reg_571 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_14_reg_576 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_16_reg_581 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_18_reg_586 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_20_reg_591 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_22_reg_596 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_24_reg_601 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_26_reg_606 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_2_reg_546 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_4_reg_551 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_6_reg_556 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_8_reg_561 <= tmp_i_fu_323_p1;
        cor_phaseArray_phase_reg_541 <= tmp_i_fu_323_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_last_V_0_load_A)) begin
        i_data_last_V_0_payload_A <= i_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_last_V_0_load_B)) begin
        i_data_last_V_0_payload_B <= i_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_data_V_1_load_A)) begin
        o_data_data_V_1_payload_A <= o_data_data_V_tmp_fu_528_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_data_V_1_load_B)) begin
        o_data_data_V_1_payload_B <= o_data_data_V_tmp_fu_528_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_last_V_1_load_A)) begin
        o_data_last_V_1_payload_A <= o_data_last_V_tmp_reg_629;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_last_V_1_load_B)) begin
        o_data_last_V_1_payload_B <= o_data_last_V_tmp_reg_629;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == currentState_load_reg_537) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        o_data_last_V_tmp_reg_629 <= i_data_last_V_0_data_out;
        tmp_i_4_reg_634 <= tmp_i_4_fu_474_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        p_Val2_3_2_i_reg_622 <= p_Val2_3_2_i_fu_424_p2;
        p_Val2_6_i_reg_615 <= p_Val2_6_i_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_reg_pp0_iter1_currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        res_V_reg_639 <= {{p_Val2_2_fu_485_p2[41:10]}};
    end
end

always @ (*) begin
    if (((1'b0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_10_address0 = cor_phaseArray_phase_4_reg_551;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_10_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_10_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_10_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_10_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_10_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_11_address0 = cor_phaseArray_phase_6_reg_556;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_11_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_11_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_11_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_11_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_12_address0 = cor_phaseArray_phase_8_reg_561;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_12_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_12_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_12_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_12_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_12_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_13_address0 = cor_phaseArray_phase_26_reg_606;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_13_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_13_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_13_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_13_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_13_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_1_address0 = cor_phaseArray_phase_12_reg_571;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_1_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_1_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_1_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_1_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_2_address0 = cor_phaseArray_phase_14_reg_576;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_2_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_2_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_2_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_2_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_3_address0 = cor_phaseArray_phase_16_reg_581;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_3_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_3_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_3_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_3_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_4_address0 = cor_phaseArray_phase_18_reg_586;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_4_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_4_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_4_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_4_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_5_address0 = cor_phaseArray_phase_20_reg_591;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_5_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_5_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_5_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_5_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_6_address0 = cor_phaseArray_phase_22_reg_596;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_6_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_6_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_6_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_6_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_7_address0 = cor_phaseArray_phase_24_reg_601;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_7_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_7_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_7_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_7_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_8_address0 = cor_phaseArray_phase_reg_541;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_8_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_8_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_8_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_8_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_8_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_9_address0 = cor_phaseArray_phase_2_reg_546;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_9_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_9_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_9_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_9_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_9_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_address0 = cor_phaseArray_phase_10_reg_566;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            cor_phaseArray_phase_address0 = tmp_i_fu_323_p1;
        end else begin
            cor_phaseArray_phase_address0 = 'bx;
        end
    end else begin
        cor_phaseArray_phase_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1)))) begin
        cor_phaseArray_phase_ce0 = 1'b1;
    end else begin
        cor_phaseArray_phase_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == currentState_load_reg_537) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == 1'b1))) begin
        cor_phaseArray_phase_we0 = 1'b1;
    end else begin
        cor_phaseArray_phase_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd1 == currentState_load_reg_537))) begin
        i_data_TDATA_blk_n = i_data_data_V_0_state[1'd0];
    end else begin
        i_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_537) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_data_V_0_ack_out = 1'b1;
    end else begin
        i_data_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_537) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_last_V_0_ack_out = 1'b1;
    end else begin
        i_data_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_last_V_0_sel)) begin
        i_data_last_V_0_data_out = i_data_last_V_0_payload_B;
    end else begin
        i_data_last_V_0_data_out = i_data_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_currentState_load_reg_537)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_currentState_load_reg_537)))) begin
        o_data_TDATA_blk_n = o_data_data_V_1_state[1'd1];
    end else begin
        o_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_data_V_1_sel)) begin
        o_data_data_V_1_data_out = o_data_data_V_1_payload_B;
    end else begin
        o_data_data_V_1_data_out = o_data_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_currentState_load_reg_537) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        o_data_data_V_1_vld_in = 1'b1;
    end else begin
        o_data_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_last_V_1_sel)) begin
        o_data_last_V_1_data_out = o_data_last_V_1_payload_B;
    end else begin
        o_data_last_V_1_data_out = o_data_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_currentState_load_reg_537) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        o_data_last_V_1_vld_in = 1'b1;
    end else begin
        o_data_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((((ap_block_pp0_stage1_flag00011011 == 1'b0) & (1'b1 == ap_reset_idle_pp0)) | ((ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_reset_idle_pp0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast_fu_482_p1 = $signed(tmp_i_4_reg_634);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_537) & (1'b0 == i_data_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_537) & (1'b0 == i_data_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_537) & (1'b0 == i_data_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter2) & ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in)));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter2) & ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in) | (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter2) & ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in) | (1'b1 == ap_block_state6_io)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((1'd1 == currentState_load_reg_537) & (1'b0 == i_data_data_V_0_vld_out));
end

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((1'd1 == ap_reg_pp0_iter1_currentState_load_reg_537) & (1'b0 == o_data_data_V_1_ack_in));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((1'd1 == ap_reg_pp0_iter2_currentState_load_reg_537) & (1'b0 == o_data_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state6_pp0_stage1_iter2 = ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in));
end

always @ (*) begin
    ap_condition_526 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign currentState_load_load_fu_319_p1 = currentState;

assign extLd1_fu_350_p1 = cor_phaseArray_phase_7_q0;

assign extLd3_fu_346_p1 = cor_phaseArray_phase_6_q0;

assign extLd6_fu_341_p1 = cor_phaseArray_phase_5_q0;

assign extLd_fu_354_p1 = cor_phaseArray_phase_13_q0;

assign i_data_TREADY = i_data_last_V_0_state[1'd1];

assign i_data_data_V_0_vld_in = i_data_TVALID;

assign i_data_data_V_0_vld_out = i_data_data_V_0_state[1'd0];

assign i_data_last_V_0_ack_in = i_data_last_V_0_state[1'd1];

assign i_data_last_V_0_load_A = (i_data_last_V_0_state_cmp_full & ~i_data_last_V_0_sel_wr);

assign i_data_last_V_0_load_B = (i_data_last_V_0_sel_wr & i_data_last_V_0_state_cmp_full);

assign i_data_last_V_0_sel = i_data_last_V_0_sel_rd;

assign i_data_last_V_0_state_cmp_full = ((i_data_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_last_V_0_vld_in = i_data_TVALID;

assign i_data_last_V_0_vld_out = i_data_last_V_0_state[1'd0];

assign o_data_TDATA = o_data_data_V_1_data_out;

assign o_data_TLAST = o_data_last_V_1_data_out;

assign o_data_TVALID = o_data_last_V_1_state[1'd0];

assign o_data_data_V_1_ack_in = o_data_data_V_1_state[1'd1];

assign o_data_data_V_1_ack_out = o_data_TREADY;

assign o_data_data_V_1_load_A = (o_data_data_V_1_state_cmp_full & ~o_data_data_V_1_sel_wr);

assign o_data_data_V_1_load_B = (o_data_data_V_1_sel_wr & o_data_data_V_1_state_cmp_full);

assign o_data_data_V_1_sel = o_data_data_V_1_sel_rd;

assign o_data_data_V_1_state_cmp_full = ((o_data_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_data_V_1_vld_out = o_data_data_V_1_state[1'd0];

assign o_data_data_V_tmp_fu_528_p3 = ((tmp_5_fu_523_p2[0:0] === 1'b1) ? tmp_4_fu_511_p2 : 32'd0);

assign o_data_last_V_1_ack_in = o_data_last_V_1_state[1'd1];

assign o_data_last_V_1_ack_out = o_data_TREADY;

assign o_data_last_V_1_load_A = (o_data_last_V_1_state_cmp_full & ~o_data_last_V_1_sel_wr);

assign o_data_last_V_1_load_B = (o_data_last_V_1_sel_wr & o_data_last_V_1_state_cmp_full);

assign o_data_last_V_1_sel = o_data_last_V_1_sel_rd;

assign o_data_last_V_1_state_cmp_full = ((o_data_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_last_V_1_vld_out = o_data_last_V_1_state[1'd0];

assign p_Val2_2_fu_485_p0 = OP1_V_cast_fu_482_p1;

assign p_Val2_2_fu_485_p1 = OP1_V_cast_fu_482_p1;

assign p_Val2_2_fu_485_p2 = ($signed(p_Val2_2_fu_485_p0) * $signed(p_Val2_2_fu_485_p1));

assign p_Val2_3_2_i_fu_424_p2 = (tmp4_fu_400_p2 + tmp7_fu_418_p2);

assign p_Val2_6_i_fu_388_p2 = (tmp8_fu_364_p2 + tmp2_fu_382_p2);

assign p_Val2_9_i_fu_470_p2 = (p_Val2_6_i_reg_615 - p_Val2_3_2_i_reg_622);

assign p_Val2_i_fu_466_p2 = (p_Val2_3_2_i_reg_622 - p_Val2_6_i_reg_615);

assign start_V_read_read_fu_108_p2 = start_V;

assign tmp1_fu_376_p2 = (extLd1_fu_350_p1 + cor_phaseArray_phase_9_q0);

assign tmp2_fu_382_p2 = (tmp_fu_370_p2 + tmp1_fu_376_p2);

assign tmp3_fu_394_p2 = (cor_phaseArray_phase_q0 + extLd3_fu_346_p1);

assign tmp4_fu_400_p2 = (extLd6_fu_341_p1 + tmp3_fu_394_p2);

assign tmp5_fu_406_p2 = (cor_phaseArray_phase_12_q0 + cor_phaseArray_phase_11_q0);

assign tmp6_fu_412_p2 = (extLd_fu_354_p1 + cor_phaseArray_phase_8_q0);

assign tmp7_fu_418_p2 = (tmp5_fu_406_p2 + tmp6_fu_412_p2);

assign tmp8_fu_364_p2 = (cor_phaseArray_phase_3_q0 + tmp9_fu_358_p2);

assign tmp9_fu_358_p2 = (cor_phaseArray_phase_2_q0 + cor_phaseArray_phase_4_q0);

assign tmp_4_fu_511_p2 = (32'd32 + loadCount_V);

assign tmp_5_fu_523_p2 = (($signed(res_V_reg_639) > $signed(32'd204800)) ? 1'b1 : 1'b0);

assign tmp_5_i_fu_462_p2 = (($signed(p_Val2_6_i_reg_615) > $signed(p_Val2_3_2_i_reg_622)) ? 1'b1 : 1'b0);

assign tmp_fu_370_p2 = (cor_phaseArray_phase_1_q0 + cor_phaseArray_phase_10_q0);

assign tmp_i_4_fu_474_p3 = ((tmp_5_i_fu_462_p2[0:0] === 1'b1) ? p_Val2_9_i_fu_470_p2 : p_Val2_i_fu_466_p2);

assign tmp_i_fu_323_p1 = phaseClass_V;

endmodule //correlateTop
