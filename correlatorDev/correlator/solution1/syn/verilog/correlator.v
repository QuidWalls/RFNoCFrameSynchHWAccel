// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="correlator,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.322000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=471,HLS_SYN_LUT=577}" *)

module correlator (
        ap_clk,
        ap_rst_n,
        i_data_TDATA,
        i_data_TVALID,
        i_data_TREADY,
        i_data_TLAST,
        o_data_TDATA,
        o_data_TVALID,
        o_data_TREADY,
        o_data_TLAST,
        phaseClass_V,
        start_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] i_data_TDATA;
input   i_data_TVALID;
output   i_data_TREADY;
input  [0:0] i_data_TLAST;
output  [31:0] o_data_TDATA;
output   o_data_TVALID;
input   o_data_TREADY;
output  [0:0] o_data_TLAST;
input  [3:0] phaseClass_V;
input  [0:0] start_V;

reg i_data_TREADY;

reg    ap_rst_n_inv;
reg   [31:0] o_data_V_data_V_1_data_out;
reg    o_data_V_data_V_1_vld_in;
wire    o_data_V_data_V_1_vld_out;
wire    o_data_V_data_V_1_ack_in;
wire    o_data_V_data_V_1_ack_out;
reg   [31:0] o_data_V_data_V_1_payload_A;
reg   [31:0] o_data_V_data_V_1_payload_B;
reg    o_data_V_data_V_1_sel_rd;
reg    o_data_V_data_V_1_sel_wr;
wire    o_data_V_data_V_1_sel;
wire    o_data_V_data_V_1_load_A;
wire    o_data_V_data_V_1_load_B;
reg   [1:0] o_data_V_data_V_1_state;
wire    o_data_V_data_V_1_state_cmp_full;
wire   [0:0] o_data_V_last_V_1_data_out;
reg    o_data_V_last_V_1_vld_in;
wire    o_data_V_last_V_1_vld_out;
wire    o_data_V_last_V_1_ack_in;
wire    o_data_V_last_V_1_ack_out;
reg    o_data_V_last_V_1_sel_rd;
wire    o_data_V_last_V_1_sel;
reg   [1:0] o_data_V_last_V_1_state;
reg   [0:0] corState;
reg   [15:0] phaseClass0_V_3;
reg   [15:0] phaseClass0_V_2;
reg   [15:0] phaseClass0_V_1;
reg   [15:0] phaseClass0_V_0;
reg   [31:0] loadCount_V;
reg   [31:0] corHelper_V;
reg   [0:0] currentState;
reg    i_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire   [0:0] currentState_load_load_fu_299_p1;
wire   [0:0] tmp_nbreadreq_fu_130_p4;
reg    o_data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] corState_load_reg_476;
reg   [0:0] ap_reg_pp0_iter1_corState_load_reg_476;
reg   [0:0] cond_reg_485;
reg   [0:0] ap_reg_pp0_iter1_cond_reg_485;
reg   [0:0] tmp_4_reg_502;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] ap_reg_pp0_iter2_corState_load_reg_476;
reg   [0:0] ap_reg_pp0_iter2_cond_reg_485;
reg   [0:0] ap_reg_pp0_iter2_tmp_4_reg_502;
reg    ap_predicate_op33_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_predicate_op70_write_state3;
reg    ap_block_state3_io;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_predicate_op93_write_state4;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] start_V_read_read_fu_118_p2;
wire   [3:0] phaseClass_V_read_read_fu_124_p2;
wire   [0:0] corState_load_load_fu_221_p1;
reg   [15:0] phaseClass0_V_2_load_reg_480;
wire   [0:0] cond_fu_241_p2;
wire   [22:0] tmp4_fu_293_p2;
reg   [22:0] tmp4_reg_489;
reg   [0:0] currentState_load_reg_494;
reg   [0:0] ap_reg_pp0_iter1_currentState_load_reg_494;
reg   [0:0] tmp_reg_498;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_498;
wire   [0:0] tmp_4_fu_445_p2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_corState_flag_phi_fu_162_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_corState_flag_reg_159;
reg   [0:0] ap_phi_mux_corState_flag_1_phi_fu_173_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_corState_flag_1_reg_170;
reg   [0:0] ap_phi_mux_corState_new_1_phi_fu_184_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_corState_new_1_reg_181;
reg   [0:0] ap_phi_mux_corState_flag_2_phi_fu_195_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_corState_flag_2_reg_192;
reg   [0:0] ap_phi_mux_corState_new_2_phi_fu_207_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_corState_new_2_reg_204;
wire   [15:0] tmp_s_fu_317_p3;
wire   [31:0] tmp_1_fu_456_p2;
wire   [31:0] p_Val2_2_7_fu_433_p2;
reg    ap_block_pp0_stage0_01001;
wire   [20:0] tmp_7_4_fu_247_p3;
wire   [20:0] tmp_7_6_fu_259_p3;
wire   [20:0] tmp_7_7_fu_271_p3;
wire  signed [21:0] tmp_7_7_cast_fu_279_p1;
wire  signed [21:0] tmp_7_4_cast_fu_255_p1;
wire   [21:0] tmp5_fu_283_p2;
wire  signed [22:0] tmp_7_6_cast_fu_267_p1;
wire  signed [22:0] tmp5_cast_fu_289_p1;
wire   [10:0] tmp_2_fu_307_p4;
wire   [20:0] tmp_7_5_fu_413_p3;
wire  signed [31:0] tmp_7_5_cast_fu_420_p1;
wire   [31:0] tmp3_fu_424_p2;
wire  signed [31:0] tmp4_cast_fu_430_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_304;
reg    ap_condition_162;

// power-on initialization
initial begin
#0 o_data_V_data_V_1_sel_rd = 1'b0;
#0 o_data_V_data_V_1_sel_wr = 1'b0;
#0 o_data_V_data_V_1_state = 2'd0;
#0 o_data_V_last_V_1_sel_rd = 1'b0;
#0 o_data_V_last_V_1_state = 2'd0;
#0 corState = 1'd0;
#0 phaseClass0_V_3 = 16'd0;
#0 phaseClass0_V_2 = 16'd0;
#0 phaseClass0_V_1 = 16'd0;
#0 phaseClass0_V_0 = 16'd0;
#0 loadCount_V = 32'd0;
#0 corHelper_V = 32'd0;
#0 currentState = 1'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        corHelper_V <= 32'd0;
    end else begin
        if (((cond_reg_485 == 1'd1) & (corState_load_reg_476 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            corHelper_V <= p_Val2_2_7_fu_433_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        corState <= 1'd0;
    end else begin
        if (((ap_phi_mux_corState_flag_2_phi_fu_195_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            corState <= ap_phi_mux_corState_new_2_phi_fu_207_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        currentState <= 1'd0;
    end else begin
        if ((((start_V_read_read_fu_118_p2 == 1'd1) & (currentState_load_load_fu_299_p1 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((currentState == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            currentState <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        loadCount_V <= 32'd0;
    end else begin
        if (((ap_reg_pp0_iter1_tmp_reg_498 == 1'd1) & (ap_reg_pp0_iter1_currentState_load_reg_494 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            loadCount_V <= tmp_1_fu_456_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((o_data_V_data_V_1_ack_out == 1'b1) & (o_data_V_data_V_1_vld_out == 1'b1))) begin
            o_data_V_data_V_1_sel_rd <= ~o_data_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((o_data_V_data_V_1_ack_in == 1'b1) & (o_data_V_data_V_1_vld_in == 1'b1))) begin
            o_data_V_data_V_1_sel_wr <= ~o_data_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((o_data_V_data_V_1_state == 2'd2) & (o_data_V_data_V_1_vld_in == 1'b0)) | ((o_data_V_data_V_1_state == 2'd3) & (o_data_V_data_V_1_vld_in == 1'b0) & (o_data_V_data_V_1_ack_out == 1'b1)))) begin
            o_data_V_data_V_1_state <= 2'd2;
        end else if ((((o_data_V_data_V_1_state == 2'd1) & (o_data_V_data_V_1_ack_out == 1'b0)) | ((o_data_V_data_V_1_state == 2'd3) & (o_data_V_data_V_1_ack_out == 1'b0) & (o_data_V_data_V_1_vld_in == 1'b1)))) begin
            o_data_V_data_V_1_state <= 2'd1;
        end else if (((~((o_data_V_data_V_1_vld_in == 1'b0) & (o_data_V_data_V_1_ack_out == 1'b1)) & ~((o_data_V_data_V_1_ack_out == 1'b0) & (o_data_V_data_V_1_vld_in == 1'b1)) & (o_data_V_data_V_1_state == 2'd3)) | ((o_data_V_data_V_1_state == 2'd1) & (o_data_V_data_V_1_ack_out == 1'b1)) | ((o_data_V_data_V_1_state == 2'd2) & (o_data_V_data_V_1_vld_in == 1'b1)))) begin
            o_data_V_data_V_1_state <= 2'd3;
        end else begin
            o_data_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((o_data_V_last_V_1_ack_out == 1'b1) & (o_data_V_last_V_1_vld_out == 1'b1))) begin
            o_data_V_last_V_1_sel_rd <= ~o_data_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((o_data_V_last_V_1_state == 2'd2) & (o_data_V_last_V_1_vld_in == 1'b0)) | ((o_data_V_last_V_1_state == 2'd3) & (o_data_V_last_V_1_vld_in == 1'b0) & (o_data_V_last_V_1_ack_out == 1'b1)))) begin
            o_data_V_last_V_1_state <= 2'd2;
        end else if ((((o_data_V_last_V_1_state == 2'd3) & (o_data_V_last_V_1_ack_out == 1'b0) & (o_data_V_last_V_1_vld_in == 1'b1)) | ((o_data_V_last_V_1_state == 2'd1) & (o_data_V_last_V_1_ack_out == 1'b0)))) begin
            o_data_V_last_V_1_state <= 2'd1;
        end else if ((((o_data_V_last_V_1_state == 2'd2) & (o_data_V_last_V_1_vld_in == 1'b1)) | (~((o_data_V_last_V_1_vld_in == 1'b0) & (o_data_V_last_V_1_ack_out == 1'b1)) & ~((o_data_V_last_V_1_ack_out == 1'b0) & (o_data_V_last_V_1_vld_in == 1'b1)) & (o_data_V_last_V_1_state == 2'd3)) | ((o_data_V_last_V_1_state == 2'd1) & (o_data_V_last_V_1_ack_out == 1'b1)))) begin
            o_data_V_last_V_1_state <= 2'd3;
        end else begin
            o_data_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                phaseClass0_V_0[5] <= 1'b0;
        phaseClass0_V_0[6] <= 1'b0;
        phaseClass0_V_0[7] <= 1'b0;
        phaseClass0_V_0[8] <= 1'b0;
        phaseClass0_V_0[9] <= 1'b0;
        phaseClass0_V_0[10] <= 1'b0;
        phaseClass0_V_0[11] <= 1'b0;
        phaseClass0_V_0[12] <= 1'b0;
        phaseClass0_V_0[13] <= 1'b0;
        phaseClass0_V_0[14] <= 1'b0;
        phaseClass0_V_0[15] <= 1'b0;
    end else begin
        if (((tmp_nbreadreq_fu_130_p4 == 1'd1) & (currentState == 1'd1) & (phaseClass_V_read_read_fu_124_p2 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        phaseClass0_V_0[15 : 5] <= tmp_s_fu_317_p3[15 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                phaseClass0_V_1[5] <= 1'b0;
        phaseClass0_V_1[6] <= 1'b0;
        phaseClass0_V_1[7] <= 1'b0;
        phaseClass0_V_1[8] <= 1'b0;
        phaseClass0_V_1[9] <= 1'b0;
        phaseClass0_V_1[10] <= 1'b0;
        phaseClass0_V_1[11] <= 1'b0;
        phaseClass0_V_1[12] <= 1'b0;
        phaseClass0_V_1[13] <= 1'b0;
        phaseClass0_V_1[14] <= 1'b0;
        phaseClass0_V_1[15] <= 1'b0;
    end else begin
        if (((tmp_nbreadreq_fu_130_p4 == 1'd1) & (currentState == 1'd1) & (phaseClass_V_read_read_fu_124_p2 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        phaseClass0_V_1[15 : 5] <= phaseClass0_V_0[15 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                phaseClass0_V_2[5] <= 1'b0;
        phaseClass0_V_2[6] <= 1'b0;
        phaseClass0_V_2[7] <= 1'b0;
        phaseClass0_V_2[8] <= 1'b0;
        phaseClass0_V_2[9] <= 1'b0;
        phaseClass0_V_2[10] <= 1'b0;
        phaseClass0_V_2[11] <= 1'b0;
        phaseClass0_V_2[12] <= 1'b0;
        phaseClass0_V_2[13] <= 1'b0;
        phaseClass0_V_2[14] <= 1'b0;
        phaseClass0_V_2[15] <= 1'b0;
    end else begin
        if (((tmp_nbreadreq_fu_130_p4 == 1'd1) & (currentState == 1'd1) & (phaseClass_V_read_read_fu_124_p2 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        phaseClass0_V_2[15 : 5] <= phaseClass0_V_1[15 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                phaseClass0_V_3[5] <= 1'b0;
        phaseClass0_V_3[6] <= 1'b0;
        phaseClass0_V_3[7] <= 1'b0;
        phaseClass0_V_3[8] <= 1'b0;
        phaseClass0_V_3[9] <= 1'b0;
        phaseClass0_V_3[10] <= 1'b0;
        phaseClass0_V_3[11] <= 1'b0;
        phaseClass0_V_3[12] <= 1'b0;
        phaseClass0_V_3[13] <= 1'b0;
        phaseClass0_V_3[14] <= 1'b0;
        phaseClass0_V_3[15] <= 1'b0;
    end else begin
        if (((tmp_nbreadreq_fu_130_p4 == 1'd1) & (currentState == 1'd1) & (phaseClass_V_read_read_fu_124_p2 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        phaseClass0_V_3[15 : 5] <= phaseClass0_V_2[15 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_cond_reg_485 <= cond_reg_485;
        ap_reg_pp0_iter1_corState_load_reg_476 <= corState_load_reg_476;
        ap_reg_pp0_iter1_currentState_load_reg_494 <= currentState_load_reg_494;
        ap_reg_pp0_iter1_tmp_reg_498 <= tmp_reg_498;
        corState_load_reg_476 <= corState;
        currentState_load_reg_494 <= currentState;
        phaseClass0_V_2_load_reg_480[15 : 5] <= phaseClass0_V_2[15 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_cond_reg_485 <= ap_reg_pp0_iter1_cond_reg_485;
        ap_reg_pp0_iter2_corState_load_reg_476 <= ap_reg_pp0_iter1_corState_load_reg_476;
        ap_reg_pp0_iter2_tmp_4_reg_502 <= tmp_4_reg_502;
    end
end

always @ (posedge ap_clk) begin
    if (((corState_load_load_fu_221_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cond_reg_485 <= cond_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((o_data_V_data_V_1_load_A == 1'b1)) begin
        o_data_V_data_V_1_payload_A <= loadCount_V;
    end
end

always @ (posedge ap_clk) begin
    if ((o_data_V_data_V_1_load_B == 1'b1)) begin
        o_data_V_data_V_1_payload_B <= loadCount_V;
    end
end

always @ (posedge ap_clk) begin
    if (((cond_fu_241_p2 == 1'd1) & (corState_load_load_fu_221_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp4_reg_489[22 : 10] <= tmp4_fu_293_p2[22 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((cond_reg_485 == 1'd1) & (corState_load_reg_476 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_502 <= tmp_4_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((currentState == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_498 <= tmp_nbreadreq_fu_130_p4;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_304)) begin
        if ((tmp_nbreadreq_fu_130_p4 == 1'd0)) begin
            ap_phi_mux_corState_flag_1_phi_fu_173_p4 = ap_phi_mux_corState_flag_phi_fu_162_p4;
        end else if ((tmp_nbreadreq_fu_130_p4 == 1'd1)) begin
            ap_phi_mux_corState_flag_1_phi_fu_173_p4 = 1'd1;
        end else begin
            ap_phi_mux_corState_flag_1_phi_fu_173_p4 = ap_phi_reg_pp0_iter0_corState_flag_1_reg_170;
        end
    end else begin
        ap_phi_mux_corState_flag_1_phi_fu_173_p4 = ap_phi_reg_pp0_iter0_corState_flag_1_reg_170;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((currentState_load_load_fu_299_p1 == 1'd0)) begin
            ap_phi_mux_corState_flag_2_phi_fu_195_p4 = ap_phi_mux_corState_flag_phi_fu_162_p4;
        end else if ((currentState == 1'd1)) begin
            ap_phi_mux_corState_flag_2_phi_fu_195_p4 = ap_phi_mux_corState_flag_1_phi_fu_173_p4;
        end else begin
            ap_phi_mux_corState_flag_2_phi_fu_195_p4 = ap_phi_reg_pp0_iter0_corState_flag_2_reg_192;
        end
    end else begin
        ap_phi_mux_corState_flag_2_phi_fu_195_p4 = ap_phi_reg_pp0_iter0_corState_flag_2_reg_192;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((corState_load_load_fu_221_p1 == 1'd0)) begin
            ap_phi_mux_corState_flag_phi_fu_162_p4 = 1'd1;
        end else if ((corState_load_load_fu_221_p1 == 1'd1)) begin
            ap_phi_mux_corState_flag_phi_fu_162_p4 = 1'd0;
        end else begin
            ap_phi_mux_corState_flag_phi_fu_162_p4 = ap_phi_reg_pp0_iter0_corState_flag_reg_159;
        end
    end else begin
        ap_phi_mux_corState_flag_phi_fu_162_p4 = ap_phi_reg_pp0_iter0_corState_flag_reg_159;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_304)) begin
        if ((tmp_nbreadreq_fu_130_p4 == 1'd0)) begin
            ap_phi_mux_corState_new_1_phi_fu_184_p4 = 1'd0;
        end else if ((tmp_nbreadreq_fu_130_p4 == 1'd1)) begin
            ap_phi_mux_corState_new_1_phi_fu_184_p4 = 1'd1;
        end else begin
            ap_phi_mux_corState_new_1_phi_fu_184_p4 = ap_phi_reg_pp0_iter0_corState_new_1_reg_181;
        end
    end else begin
        ap_phi_mux_corState_new_1_phi_fu_184_p4 = ap_phi_reg_pp0_iter0_corState_new_1_reg_181;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((currentState_load_load_fu_299_p1 == 1'd0)) begin
            ap_phi_mux_corState_new_2_phi_fu_207_p4 = 1'd0;
        end else if ((currentState == 1'd1)) begin
            ap_phi_mux_corState_new_2_phi_fu_207_p4 = ap_phi_mux_corState_new_1_phi_fu_184_p4;
        end else begin
            ap_phi_mux_corState_new_2_phi_fu_207_p4 = ap_phi_reg_pp0_iter0_corState_new_2_reg_204;
        end
    end else begin
        ap_phi_mux_corState_new_2_phi_fu_207_p4 = ap_phi_reg_pp0_iter0_corState_new_2_reg_204;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((tmp_nbreadreq_fu_130_p4 == 1'd1) & (currentState == 1'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        i_data_TDATA_blk_n = i_data_TVALID;
    end else begin
        i_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op33_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_data_TREADY = 1'b1;
    end else begin
        i_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp0_iter2_tmp_4_reg_502 == 1'd1) & (ap_reg_pp0_iter2_cond_reg_485 == 1'd1) & (ap_reg_pp0_iter2_corState_load_reg_476 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_4_reg_502 == 1'd1) & (ap_reg_pp0_iter1_cond_reg_485 == 1'd1) & (ap_reg_pp0_iter1_corState_load_reg_476 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        o_data_TDATA_blk_n = o_data_V_data_V_1_state[1'd1];
    end else begin
        o_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((o_data_V_data_V_1_sel == 1'b1)) begin
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_B;
    end else begin
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op70_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        o_data_V_data_V_1_vld_in = 1'b1;
    end else begin
        o_data_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op70_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        o_data_V_last_V_1_vld_in = 1'b1;
    end else begin
        o_data_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((o_data_V_last_V_1_ack_in == 1'b0) | (o_data_V_data_V_1_ack_in == 1'b0))) | ((ap_predicate_op33_read_state1 == 1'b1) & (i_data_TVALID == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (o_data_V_last_V_1_ack_in == 1'b0) | (o_data_V_data_V_1_ack_in == 1'b0))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_predicate_op33_read_state1 == 1'b1) & (i_data_TVALID == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (o_data_V_last_V_1_ack_in == 1'b0) | (o_data_V_data_V_1_ack_in == 1'b0))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_predicate_op33_read_state1 == 1'b1) & (i_data_TVALID == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_predicate_op33_read_state1 == 1'b1) & (i_data_TVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op70_write_state3 == 1'b1) & (o_data_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((ap_predicate_op93_write_state4 == 1'b1) & (o_data_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((o_data_V_last_V_1_ack_in == 1'b0) | (o_data_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_162 = ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_304 = ((currentState == 1'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_corState_flag_1_reg_170 = 'bx;

assign ap_phi_reg_pp0_iter0_corState_flag_2_reg_192 = 'bx;

assign ap_phi_reg_pp0_iter0_corState_flag_reg_159 = 'bx;

assign ap_phi_reg_pp0_iter0_corState_new_1_reg_181 = 'bx;

assign ap_phi_reg_pp0_iter0_corState_new_2_reg_204 = 'bx;

always @ (*) begin
    ap_predicate_op33_read_state1 = ((tmp_nbreadreq_fu_130_p4 == 1'd1) & (currentState == 1'd1));
end

always @ (*) begin
    ap_predicate_op70_write_state3 = ((tmp_4_reg_502 == 1'd1) & (ap_reg_pp0_iter1_cond_reg_485 == 1'd1) & (ap_reg_pp0_iter1_corState_load_reg_476 == 1'd1));
end

always @ (*) begin
    ap_predicate_op93_write_state4 = ((ap_reg_pp0_iter2_tmp_4_reg_502 == 1'd1) & (ap_reg_pp0_iter2_cond_reg_485 == 1'd1) & (ap_reg_pp0_iter2_corState_load_reg_476 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cond_fu_241_p2 = ((phaseClass_V == 4'd0) ? 1'b1 : 1'b0);

assign corState_load_load_fu_221_p1 = corState;

assign currentState_load_load_fu_299_p1 = currentState;

assign o_data_TDATA = o_data_V_data_V_1_data_out;

assign o_data_TLAST = o_data_V_last_V_1_data_out;

assign o_data_TVALID = o_data_V_last_V_1_state[1'd0];

assign o_data_V_data_V_1_ack_in = o_data_V_data_V_1_state[1'd1];

assign o_data_V_data_V_1_ack_out = o_data_TREADY;

assign o_data_V_data_V_1_load_A = (o_data_V_data_V_1_state_cmp_full & ~o_data_V_data_V_1_sel_wr);

assign o_data_V_data_V_1_load_B = (o_data_V_data_V_1_state_cmp_full & o_data_V_data_V_1_sel_wr);

assign o_data_V_data_V_1_sel = o_data_V_data_V_1_sel_rd;

assign o_data_V_data_V_1_state_cmp_full = ((o_data_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_V_data_V_1_vld_out = o_data_V_data_V_1_state[1'd0];

assign o_data_V_last_V_1_ack_in = o_data_V_last_V_1_state[1'd1];

assign o_data_V_last_V_1_ack_out = o_data_TREADY;

assign o_data_V_last_V_1_data_out = 1'd0;

assign o_data_V_last_V_1_sel = o_data_V_last_V_1_sel_rd;

assign o_data_V_last_V_1_vld_out = o_data_V_last_V_1_state[1'd0];

assign p_Val2_2_7_fu_433_p2 = ($signed(tmp3_fu_424_p2) + $signed(tmp4_cast_fu_430_p1));

assign phaseClass_V_read_read_fu_124_p2 = phaseClass_V;

assign start_V_read_read_fu_118_p2 = start_V;

assign tmp3_fu_424_p2 = ($signed(tmp_7_5_cast_fu_420_p1) + $signed(corHelper_V));

assign tmp4_cast_fu_430_p1 = $signed(tmp4_reg_489);

assign tmp4_fu_293_p2 = ($signed(tmp_7_6_cast_fu_267_p1) + $signed(tmp5_cast_fu_289_p1));

assign tmp5_cast_fu_289_p1 = $signed(tmp5_fu_283_p2);

assign tmp5_fu_283_p2 = ($signed(tmp_7_7_cast_fu_279_p1) + $signed(tmp_7_4_cast_fu_255_p1));

assign tmp_1_fu_456_p2 = (loadCount_V + 32'd1);

assign tmp_2_fu_307_p4 = {{i_data_TDATA[26:16]}};

assign tmp_4_fu_445_p2 = (($signed(p_Val2_2_7_fu_433_p2) > $signed(32'd4096)) ? 1'b1 : 1'b0);

assign tmp_7_4_cast_fu_255_p1 = $signed(tmp_7_4_fu_247_p3);

assign tmp_7_4_fu_247_p3 = {{phaseClass0_V_3}, {5'd0}};

assign tmp_7_5_cast_fu_420_p1 = $signed(tmp_7_5_fu_413_p3);

assign tmp_7_5_fu_413_p3 = {{phaseClass0_V_2_load_reg_480}, {5'd0}};

assign tmp_7_6_cast_fu_267_p1 = $signed(tmp_7_6_fu_259_p3);

assign tmp_7_6_fu_259_p3 = {{phaseClass0_V_1}, {5'd0}};

assign tmp_7_7_cast_fu_279_p1 = $signed(tmp_7_7_fu_271_p3);

assign tmp_7_7_fu_271_p3 = {{phaseClass0_V_0}, {5'd0}};

assign tmp_nbreadreq_fu_130_p4 = i_data_TVALID;

assign tmp_s_fu_317_p3 = {{tmp_2_fu_307_p4}, {5'd0}};

always @ (posedge ap_clk) begin
    phaseClass0_V_3[4:0] <= 5'b00000;
    phaseClass0_V_2[4:0] <= 5'b00000;
    phaseClass0_V_1[4:0] <= 5'b00000;
    phaseClass0_V_0[4:0] <= 5'b00000;
    phaseClass0_V_2_load_reg_480[4:0] <= 5'b00000;
    tmp4_reg_489[9:0] <= 10'b0000000000;
end

endmodule //correlator
