-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shiftPhaseClass is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    newValue_V : IN STD_LOGIC_VECTOR (15 downto 0);
    phaseClass_V : IN STD_LOGIC_VECTOR (3 downto 0);
    cor_phaseClass0_V_14_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_14_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_14_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_15_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_13_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_13_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_13_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_12_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_12_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_12_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_11_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_11_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_11_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_10_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_10_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_10_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_9_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_9_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_9_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_8_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_8_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_8_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_7_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_7_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_7_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_6_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_6_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_6_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_5_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_5_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_5_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_4_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_4_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_4_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_3_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_3_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_3_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_2_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_2_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_2_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_1_o_ap_vld : OUT STD_LOGIC;
    cor_phaseClass0_V_0_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_0_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cor_phaseClass0_V_0_o_ap_vld : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of shiftPhaseClass is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal phaseClass_V_read_read_fu_372_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_0_o_assign_proc : process(ap_start, ap_CS_fsm_state1, newValue_V, cor_phaseClass0_V_0_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_0_o <= newValue_V;
        else 
            cor_phaseClass0_V_0_o <= cor_phaseClass0_V_0_i;
        end if; 
    end process;


    cor_phaseClass0_V_0_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_0_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_10_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_10_i, cor_phaseClass0_V_9_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_10_o <= cor_phaseClass0_V_9_i;
        else 
            cor_phaseClass0_V_10_o <= cor_phaseClass0_V_10_i;
        end if; 
    end process;


    cor_phaseClass0_V_10_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_10_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_10_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_11_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_11_i, cor_phaseClass0_V_10_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_11_o <= cor_phaseClass0_V_10_i;
        else 
            cor_phaseClass0_V_11_o <= cor_phaseClass0_V_11_i;
        end if; 
    end process;


    cor_phaseClass0_V_11_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_11_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_11_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_12_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_12_i, cor_phaseClass0_V_11_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_12_o <= cor_phaseClass0_V_11_i;
        else 
            cor_phaseClass0_V_12_o <= cor_phaseClass0_V_12_i;
        end if; 
    end process;


    cor_phaseClass0_V_12_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_12_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_12_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_13_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_13_i, cor_phaseClass0_V_12_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_13_o <= cor_phaseClass0_V_12_i;
        else 
            cor_phaseClass0_V_13_o <= cor_phaseClass0_V_13_i;
        end if; 
    end process;


    cor_phaseClass0_V_13_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_13_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_13_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_14_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_14_i, cor_phaseClass0_V_13_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_14_o <= cor_phaseClass0_V_13_i;
        else 
            cor_phaseClass0_V_14_o <= cor_phaseClass0_V_14_i;
        end if; 
    end process;


    cor_phaseClass0_V_14_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_14_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_14_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cor_phaseClass0_V_15 <= cor_phaseClass0_V_14_i;

    cor_phaseClass0_V_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_15_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_1_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_1_i, cor_phaseClass0_V_0_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_1_o <= cor_phaseClass0_V_0_i;
        else 
            cor_phaseClass0_V_1_o <= cor_phaseClass0_V_1_i;
        end if; 
    end process;


    cor_phaseClass0_V_1_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_1_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_2_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_2_i, cor_phaseClass0_V_1_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_2_o <= cor_phaseClass0_V_1_i;
        else 
            cor_phaseClass0_V_2_o <= cor_phaseClass0_V_2_i;
        end if; 
    end process;


    cor_phaseClass0_V_2_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_2_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_3_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_3_i, cor_phaseClass0_V_2_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_3_o <= cor_phaseClass0_V_2_i;
        else 
            cor_phaseClass0_V_3_o <= cor_phaseClass0_V_3_i;
        end if; 
    end process;


    cor_phaseClass0_V_3_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_3_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_4_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_4_i, cor_phaseClass0_V_3_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_4_o <= cor_phaseClass0_V_3_i;
        else 
            cor_phaseClass0_V_4_o <= cor_phaseClass0_V_4_i;
        end if; 
    end process;


    cor_phaseClass0_V_4_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_4_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_5_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_5_i, cor_phaseClass0_V_4_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_5_o <= cor_phaseClass0_V_4_i;
        else 
            cor_phaseClass0_V_5_o <= cor_phaseClass0_V_5_i;
        end if; 
    end process;


    cor_phaseClass0_V_5_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_5_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_5_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_6_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_6_i, cor_phaseClass0_V_5_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_6_o <= cor_phaseClass0_V_5_i;
        else 
            cor_phaseClass0_V_6_o <= cor_phaseClass0_V_6_i;
        end if; 
    end process;


    cor_phaseClass0_V_6_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_6_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_6_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_7_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_7_i, cor_phaseClass0_V_6_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_7_o <= cor_phaseClass0_V_6_i;
        else 
            cor_phaseClass0_V_7_o <= cor_phaseClass0_V_7_i;
        end if; 
    end process;


    cor_phaseClass0_V_7_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_7_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_7_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_8_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_8_i, cor_phaseClass0_V_7_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_8_o <= cor_phaseClass0_V_7_i;
        else 
            cor_phaseClass0_V_8_o <= cor_phaseClass0_V_8_i;
        end if; 
    end process;


    cor_phaseClass0_V_8_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_8_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_8_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseClass0_V_9_o_assign_proc : process(ap_start, ap_CS_fsm_state1, cor_phaseClass0_V_9_i, cor_phaseClass0_V_8_i, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_9_o <= cor_phaseClass0_V_8_i;
        else 
            cor_phaseClass0_V_9_o <= cor_phaseClass0_V_9_i;
        end if; 
    end process;


    cor_phaseClass0_V_9_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, phaseClass_V_read_read_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (phaseClass_V_read_read_fu_372_p2 = ap_const_lv4_0))) then 
            cor_phaseClass0_V_9_o_ap_vld <= ap_const_logic_1;
        else 
            cor_phaseClass0_V_9_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    phaseClass_V_read_read_fu_372_p2 <= phaseClass_V;
end behav;
