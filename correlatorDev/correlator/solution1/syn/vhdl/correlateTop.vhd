-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlateTop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    i_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    i_data_TVALID : IN STD_LOGIC;
    i_data_TREADY : OUT STD_LOGIC;
    i_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    o_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    o_data_TVALID : OUT STD_LOGIC;
    o_data_TREADY : IN STD_LOGIC;
    o_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    start_V : IN STD_LOGIC_VECTOR (0 downto 0);
    phaseClass_V : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of correlateTop is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "correlateTop,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.870000,HLS_SYN_LAT=5,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1950,HLS_SYN_LUT=1429}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_32000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000110010000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal i_data_data_V_0_vld_in : STD_LOGIC;
    signal i_data_data_V_0_vld_out : STD_LOGIC;
    signal i_data_data_V_0_ack_out : STD_LOGIC;
    signal i_data_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_data_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal i_data_last_V_0_vld_in : STD_LOGIC;
    signal i_data_last_V_0_vld_out : STD_LOGIC;
    signal i_data_last_V_0_ack_in : STD_LOGIC;
    signal i_data_last_V_0_ack_out : STD_LOGIC;
    signal i_data_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal i_data_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal i_data_last_V_0_sel_rd : STD_LOGIC := '0';
    signal i_data_last_V_0_sel_wr : STD_LOGIC := '0';
    signal i_data_last_V_0_sel : STD_LOGIC;
    signal i_data_last_V_0_load_A : STD_LOGIC;
    signal i_data_last_V_0_load_B : STD_LOGIC;
    signal i_data_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_data_last_V_0_state_cmp_full : STD_LOGIC;
    signal o_data_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_data_V_1_vld_in : STD_LOGIC;
    signal o_data_data_V_1_vld_out : STD_LOGIC;
    signal o_data_data_V_1_ack_in : STD_LOGIC;
    signal o_data_data_V_1_ack_out : STD_LOGIC;
    signal o_data_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_data_V_1_sel_rd : STD_LOGIC := '0';
    signal o_data_data_V_1_sel_wr : STD_LOGIC := '0';
    signal o_data_data_V_1_sel : STD_LOGIC;
    signal o_data_data_V_1_load_A : STD_LOGIC;
    signal o_data_data_V_1_load_B : STD_LOGIC;
    signal o_data_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal o_data_data_V_1_state_cmp_full : STD_LOGIC;
    signal o_data_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_last_V_1_vld_in : STD_LOGIC;
    signal o_data_last_V_1_vld_out : STD_LOGIC;
    signal o_data_last_V_1_ack_in : STD_LOGIC;
    signal o_data_last_V_1_ack_out : STD_LOGIC;
    signal o_data_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_last_V_1_sel_rd : STD_LOGIC := '0';
    signal o_data_last_V_1_sel_wr : STD_LOGIC := '0';
    signal o_data_last_V_1_sel : STD_LOGIC;
    signal o_data_last_V_1_load_A : STD_LOGIC;
    signal o_data_last_V_1_load_B : STD_LOGIC;
    signal o_data_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal o_data_last_V_1_state_cmp_full : STD_LOGIC;
    signal currentState : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal loadCount_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cor_phaseArray_phase_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_8_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_8_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_9_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_9_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_10_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_10_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_11_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_11_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_12_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_12_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_1_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_1_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_2_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_2_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_3_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_3_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_4_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_4_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_phaseArray_phase_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_5_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_5_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_5_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal cor_phaseArray_phase_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_6_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_6_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_6_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal cor_phaseArray_phase_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_7_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_7_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_7_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal cor_phaseArray_phase_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_13_ce0 : STD_LOGIC;
    signal cor_phaseArray_phase_13_we0 : STD_LOGIC;
    signal cor_phaseArray_phase_13_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal currentState_load_reg_537 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_data_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_currentState_load_reg_537 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal ap_reg_pp0_iter2_currentState_load_reg_537 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentState_load_load_fu_319_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal cor_phaseArray_phase_reg_541 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_2_reg_546 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_4_reg_551 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_6_reg_556 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_8_reg_561 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_10_reg_566 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_12_reg_571 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_14_reg_576 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_16_reg_581 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_18_reg_586 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_20_reg_591 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_22_reg_596 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_24_reg_601 : STD_LOGIC_VECTOR (3 downto 0);
    signal cor_phaseArray_phase_26_reg_606 : STD_LOGIC_VECTOR (3 downto 0);
    signal start_V_read_read_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_V_read_reg_611 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_start_V_read_reg_611 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_i_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_i_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_2_i_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_2_i_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_last_V_tmp_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_4_fu_474_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_4_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_V_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_data_data_V_tmp_fu_528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal tmp_i_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00001001 : BOOLEAN;
    signal extLd6_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd1_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd3_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_i_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_i_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_485_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP1_V_cast_fu_482_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_2_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_485_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_5_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_526 : BOOLEAN;

    component correlateTop_cor_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlateTop_cor_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    cor_phaseArray_phase_8_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_8_address0,
        ce0 => cor_phaseArray_phase_8_ce0,
        we0 => cor_phaseArray_phase_8_we0,
        d0 => cor_phaseArray_phase_9_q0,
        q0 => cor_phaseArray_phase_8_q0);

    cor_phaseArray_phase_9_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_9_address0,
        ce0 => cor_phaseArray_phase_9_ce0,
        we0 => cor_phaseArray_phase_9_we0,
        d0 => cor_phaseArray_phase_10_q0,
        q0 => cor_phaseArray_phase_9_q0);

    cor_phaseArray_phase_10_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_10_address0,
        ce0 => cor_phaseArray_phase_10_ce0,
        we0 => cor_phaseArray_phase_10_we0,
        d0 => cor_phaseArray_phase_11_q0,
        q0 => cor_phaseArray_phase_10_q0);

    cor_phaseArray_phase_11_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_11_address0,
        ce0 => cor_phaseArray_phase_11_ce0,
        we0 => cor_phaseArray_phase_11_we0,
        d0 => cor_phaseArray_phase_12_q0,
        q0 => cor_phaseArray_phase_11_q0);

    cor_phaseArray_phase_12_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_12_address0,
        ce0 => cor_phaseArray_phase_12_ce0,
        we0 => cor_phaseArray_phase_12_we0,
        d0 => cor_phaseArray_phase_q0,
        q0 => cor_phaseArray_phase_12_q0);

    cor_phaseArray_phase_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_address0,
        ce0 => cor_phaseArray_phase_ce0,
        we0 => cor_phaseArray_phase_we0,
        d0 => cor_phaseArray_phase_1_q0,
        q0 => cor_phaseArray_phase_q0);

    cor_phaseArray_phase_1_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_1_address0,
        ce0 => cor_phaseArray_phase_1_ce0,
        we0 => cor_phaseArray_phase_1_we0,
        d0 => cor_phaseArray_phase_2_q0,
        q0 => cor_phaseArray_phase_1_q0);

    cor_phaseArray_phase_2_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_2_address0,
        ce0 => cor_phaseArray_phase_2_ce0,
        we0 => cor_phaseArray_phase_2_we0,
        d0 => cor_phaseArray_phase_3_q0,
        q0 => cor_phaseArray_phase_2_q0);

    cor_phaseArray_phase_3_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_3_address0,
        ce0 => cor_phaseArray_phase_3_ce0,
        we0 => cor_phaseArray_phase_3_we0,
        d0 => cor_phaseArray_phase_4_q0,
        q0 => cor_phaseArray_phase_3_q0);

    cor_phaseArray_phase_4_U : component correlateTop_cor_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_4_address0,
        ce0 => cor_phaseArray_phase_4_ce0,
        we0 => cor_phaseArray_phase_4_we0,
        d0 => extLd6_fu_341_p1,
        q0 => cor_phaseArray_phase_4_q0);

    cor_phaseArray_phase_5_U : component correlateTop_cor_lbW
    generic map (
        DataWidth => 1,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_5_address0,
        ce0 => cor_phaseArray_phase_5_ce0,
        we0 => cor_phaseArray_phase_5_we0,
        d0 => cor_phaseArray_phase_6_q0,
        q0 => cor_phaseArray_phase_5_q0);

    cor_phaseArray_phase_6_U : component correlateTop_cor_lbW
    generic map (
        DataWidth => 1,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_6_address0,
        ce0 => cor_phaseArray_phase_6_ce0,
        we0 => cor_phaseArray_phase_6_we0,
        d0 => cor_phaseArray_phase_7_q0,
        q0 => cor_phaseArray_phase_6_q0);

    cor_phaseArray_phase_7_U : component correlateTop_cor_lbW
    generic map (
        DataWidth => 1,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_7_address0,
        ce0 => cor_phaseArray_phase_7_ce0,
        we0 => cor_phaseArray_phase_7_we0,
        d0 => cor_phaseArray_phase_13_q0,
        q0 => cor_phaseArray_phase_7_q0);

    cor_phaseArray_phase_13_U : component correlateTop_cor_lbW
    generic map (
        DataWidth => 1,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cor_phaseArray_phase_13_address0,
        ce0 => cor_phaseArray_phase_13_ce0,
        we0 => cor_phaseArray_phase_13_we0,
        d0 => ap_const_lv1_0,
        q0 => cor_phaseArray_phase_13_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    currentState_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                currentState <= ap_const_lv1_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = currentState_load_load_fu_319_p1) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_lv1_0 = currentState_load_reg_537) and (ap_const_lv1_1 = start_V_read_read_fu_108_p2)))) then 
                    currentState <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    i_data_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                i_data_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = i_data_data_V_0_vld_in) and (ap_const_logic_1 = i_data_data_V_0_ack_out) and (i_data_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = i_data_data_V_0_vld_in) and (i_data_data_V_0_state = ap_const_lv2_2)))) then 
                    i_data_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = i_data_data_V_0_vld_in) and (ap_const_logic_0 = i_data_data_V_0_ack_out) and (i_data_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = i_data_data_V_0_ack_out) and (i_data_data_V_0_state = ap_const_lv2_1)))) then 
                    i_data_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = i_data_data_V_0_vld_in) and (i_data_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = i_data_data_V_0_ack_out) and (i_data_data_V_0_state = ap_const_lv2_1)) or ((i_data_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = i_data_data_V_0_vld_in) and (ap_const_logic_0 = i_data_data_V_0_ack_out))) and not(((ap_const_logic_0 = i_data_data_V_0_vld_in) and (ap_const_logic_1 = i_data_data_V_0_ack_out)))))) then 
                    i_data_data_V_0_state <= ap_const_lv2_3;
                else 
                    i_data_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_data_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                i_data_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = i_data_last_V_0_ack_out) and (ap_const_logic_1 = i_data_last_V_0_vld_out))) then 
                                        i_data_last_V_0_sel_rd <= not(i_data_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    i_data_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                i_data_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = i_data_last_V_0_vld_in) and (ap_const_logic_1 = i_data_last_V_0_ack_in))) then 
                                        i_data_last_V_0_sel_wr <= not(i_data_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    i_data_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                i_data_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = i_data_last_V_0_vld_in) and (ap_const_logic_1 = i_data_last_V_0_ack_out) and (ap_const_lv2_3 = i_data_last_V_0_state)) or ((ap_const_logic_0 = i_data_last_V_0_vld_in) and (ap_const_lv2_2 = i_data_last_V_0_state)))) then 
                    i_data_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = i_data_last_V_0_vld_in) and (ap_const_logic_0 = i_data_last_V_0_ack_out) and (ap_const_lv2_3 = i_data_last_V_0_state)) or ((ap_const_logic_0 = i_data_last_V_0_ack_out) and (ap_const_lv2_1 = i_data_last_V_0_state)))) then 
                    i_data_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = i_data_last_V_0_vld_in) and (ap_const_lv2_2 = i_data_last_V_0_state)) or ((ap_const_logic_1 = i_data_last_V_0_ack_out) and (ap_const_lv2_1 = i_data_last_V_0_state)) or ((ap_const_lv2_3 = i_data_last_V_0_state) and not(((ap_const_logic_1 = i_data_last_V_0_vld_in) and (ap_const_logic_0 = i_data_last_V_0_ack_out))) and not(((ap_const_logic_0 = i_data_last_V_0_vld_in) and (ap_const_logic_1 = i_data_last_V_0_ack_out)))))) then 
                    i_data_last_V_0_state <= ap_const_lv2_3;
                else 
                    i_data_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    loadCount_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                loadCount_V <= ap_const_lv32_0;
            else
                if ((ap_condition_526 = ap_const_boolean_1)) then
                    if ((ap_const_lv1_1 = ap_reg_pp0_iter1_currentState_load_reg_537)) then 
                        loadCount_V <= tmp_4_fu_511_p2;
                    elsif (((ap_const_lv1_0 = ap_reg_pp0_iter1_currentState_load_reg_537) and (ap_const_lv1_1 = ap_reg_pp0_iter1_start_V_read_reg_611))) then 
                        loadCount_V <= ap_const_lv32_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    o_data_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = o_data_data_V_1_ack_out) and (ap_const_logic_1 = o_data_data_V_1_vld_out))) then 
                                        o_data_data_V_1_sel_rd <= not(o_data_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    o_data_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = o_data_data_V_1_vld_in) and (ap_const_logic_1 = o_data_data_V_1_ack_in))) then 
                                        o_data_data_V_1_sel_wr <= not(o_data_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    o_data_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = o_data_data_V_1_vld_in) and (ap_const_logic_1 = o_data_data_V_1_ack_out) and (ap_const_lv2_3 = o_data_data_V_1_state)) or ((ap_const_logic_0 = o_data_data_V_1_vld_in) and (ap_const_lv2_2 = o_data_data_V_1_state)))) then 
                    o_data_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = o_data_data_V_1_vld_in) and (ap_const_logic_0 = o_data_data_V_1_ack_out) and (ap_const_lv2_3 = o_data_data_V_1_state)) or ((ap_const_logic_0 = o_data_data_V_1_ack_out) and (ap_const_lv2_1 = o_data_data_V_1_state)))) then 
                    o_data_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = o_data_data_V_1_vld_in) and (ap_const_lv2_2 = o_data_data_V_1_state)) or ((ap_const_logic_1 = o_data_data_V_1_ack_out) and (ap_const_lv2_1 = o_data_data_V_1_state)) or ((ap_const_lv2_3 = o_data_data_V_1_state) and not(((ap_const_logic_1 = o_data_data_V_1_vld_in) and (ap_const_logic_0 = o_data_data_V_1_ack_out))) and not(((ap_const_logic_0 = o_data_data_V_1_vld_in) and (ap_const_logic_1 = o_data_data_V_1_ack_out)))))) then 
                    o_data_data_V_1_state <= ap_const_lv2_3;
                else 
                    o_data_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    o_data_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = o_data_last_V_1_ack_out) and (ap_const_logic_1 = o_data_last_V_1_vld_out))) then 
                                        o_data_last_V_1_sel_rd <= not(o_data_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    o_data_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = o_data_last_V_1_vld_in) and (ap_const_logic_1 = o_data_last_V_1_ack_in))) then 
                                        o_data_last_V_1_sel_wr <= not(o_data_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    o_data_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                o_data_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = o_data_last_V_1_vld_in) and (ap_const_logic_1 = o_data_last_V_1_ack_out) and (ap_const_lv2_3 = o_data_last_V_1_state)) or ((ap_const_logic_0 = o_data_last_V_1_vld_in) and (ap_const_lv2_2 = o_data_last_V_1_state)))) then 
                    o_data_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = o_data_last_V_1_vld_in) and (ap_const_logic_0 = o_data_last_V_1_ack_out) and (ap_const_lv2_3 = o_data_last_V_1_state)) or ((ap_const_logic_0 = o_data_last_V_1_ack_out) and (ap_const_lv2_1 = o_data_last_V_1_state)))) then 
                    o_data_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = o_data_last_V_1_vld_in) and (ap_const_lv2_2 = o_data_last_V_1_state)) or ((ap_const_logic_1 = o_data_last_V_1_ack_out) and (ap_const_lv2_1 = o_data_last_V_1_state)) or ((ap_const_lv2_3 = o_data_last_V_1_state) and not(((ap_const_logic_1 = o_data_last_V_1_vld_in) and (ap_const_logic_0 = o_data_last_V_1_ack_out))) and not(((ap_const_logic_0 = o_data_last_V_1_vld_in) and (ap_const_logic_1 = o_data_last_V_1_ack_out)))))) then 
                    o_data_last_V_1_state <= ap_const_lv2_3;
                else 
                    o_data_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_currentState_load_reg_537 <= currentState_load_reg_537;
                ap_reg_pp0_iter2_currentState_load_reg_537 <= ap_reg_pp0_iter1_currentState_load_reg_537;
                currentState_load_reg_537 <= currentState;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_start_V_read_reg_611 <= start_V_read_reg_611;
                start_V_read_reg_611 <= start_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = currentState_load_load_fu_319_p1))) then
                cor_phaseArray_phase_10_reg_566 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_12_reg_571 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_14_reg_576 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_16_reg_581 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_18_reg_586 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_20_reg_591 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_22_reg_596 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_24_reg_601 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_26_reg_606 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_2_reg_546 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_4_reg_551 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_6_reg_556 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_8_reg_561 <= tmp_i_fu_323_p1(4 - 1 downto 0);
                cor_phaseArray_phase_reg_541 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = i_data_last_V_0_load_A)) then
                i_data_last_V_0_payload_A <= i_data_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = i_data_last_V_0_load_B)) then
                i_data_last_V_0_payload_B <= i_data_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = o_data_data_V_1_load_A)) then
                o_data_data_V_1_payload_A <= o_data_data_V_tmp_fu_528_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = o_data_data_V_1_load_B)) then
                o_data_data_V_1_payload_B <= o_data_data_V_tmp_fu_528_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = o_data_last_V_1_load_A)) then
                o_data_last_V_1_payload_A <= o_data_last_V_tmp_reg_629;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = o_data_last_V_1_load_B)) then
                o_data_last_V_1_payload_B <= o_data_last_V_tmp_reg_629;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = currentState_load_reg_537) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                o_data_last_V_tmp_reg_629 <= i_data_last_V_0_data_out;
                tmp_i_4_reg_634 <= tmp_i_4_fu_474_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                p_Val2_3_2_i_reg_622 <= p_Val2_3_2_i_fu_424_p2;
                p_Val2_6_i_reg_615 <= p_Val2_6_i_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_reg_pp0_iter1_currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                res_V_reg_639 <= p_Val2_2_fu_485_p2(41 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_flag00011011, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_reset_idle_pp0)) or ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_reset_idle_pp0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
        OP1_V_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_4_reg_634),42));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(i_data_data_V_0_vld_out, ap_enable_reg_pp0_iter1, currentState_load_reg_537)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_0 = i_data_data_V_0_vld_out));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(i_data_data_V_0_vld_out, ap_enable_reg_pp0_iter1, currentState_load_reg_537, ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_0 = i_data_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(i_data_data_V_0_vld_out, ap_enable_reg_pp0_iter1, currentState_load_reg_537, ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_0 = i_data_data_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_flag00001001_assign_proc : process(o_data_data_V_1_ack_in, o_data_last_V_1_ack_in, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage1_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and ((ap_const_logic_0 = o_data_data_V_1_ack_in) or (ap_const_logic_0 = o_data_last_V_1_ack_in)));
    end process;


    ap_block_pp0_stage1_flag00011001_assign_proc : process(o_data_data_V_1_ack_in, o_data_last_V_1_ack_in, ap_enable_reg_pp0_iter2, ap_block_state6_io)
    begin
                ap_block_pp0_stage1_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and ((ap_const_logic_0 = o_data_data_V_1_ack_in) or (ap_const_logic_0 = o_data_last_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_pp0_stage1_flag00011011_assign_proc : process(o_data_data_V_1_ack_in, o_data_last_V_1_ack_in, ap_enable_reg_pp0_iter2, ap_block_state6_io)
    begin
                ap_block_pp0_stage1_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and ((ap_const_logic_0 = o_data_data_V_1_ack_in) or (ap_const_logic_0 = o_data_last_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state6_io)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(i_data_data_V_0_vld_out, currentState_load_reg_537)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_0 = i_data_data_V_0_vld_out));
    end process;

        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(o_data_data_V_1_ack_in, ap_reg_pp0_iter1_currentState_load_reg_537)
    begin
                ap_block_state5_io <= ((ap_const_lv1_1 = ap_reg_pp0_iter1_currentState_load_reg_537) and (ap_const_logic_0 = o_data_data_V_1_ack_in));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(o_data_data_V_1_ack_in, ap_reg_pp0_iter2_currentState_load_reg_537)
    begin
                ap_block_state6_io <= ((ap_const_lv1_1 = ap_reg_pp0_iter2_currentState_load_reg_537) and (ap_const_logic_0 = o_data_data_V_1_ack_in));
    end process;


    ap_block_state6_pp0_stage1_iter2_assign_proc : process(o_data_data_V_1_ack_in, o_data_last_V_1_ack_in)
    begin
                ap_block_state6_pp0_stage1_iter2 <= ((ap_const_logic_0 = o_data_data_V_1_ack_in) or (ap_const_logic_0 = o_data_last_V_1_ack_in));
    end process;


    ap_condition_526_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_flag00011001)
    begin
                ap_condition_526 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_const_logic_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    cor_phaseArray_phase_10_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_4_reg_551, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_10_address0 <= cor_phaseArray_phase_4_reg_551;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_10_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_10_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_10_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_10_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_10_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_10_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_11_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_6_reg_556, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_11_address0 <= cor_phaseArray_phase_6_reg_556;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_11_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_11_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_11_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_11_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_11_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_11_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_12_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_8_reg_561, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_12_address0 <= cor_phaseArray_phase_8_reg_561;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_12_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_12_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_12_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_12_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_12_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_12_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_13_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_26_reg_606, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_13_address0 <= cor_phaseArray_phase_26_reg_606;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_13_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_13_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_13_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_13_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_13_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_13_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_12_reg_571, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_1_address0 <= cor_phaseArray_phase_12_reg_571;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_1_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_1_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_1_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_1_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_1_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_1_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_14_reg_576, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_2_address0 <= cor_phaseArray_phase_14_reg_576;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_2_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_2_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_2_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_2_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_2_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_2_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_16_reg_581, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_3_address0 <= cor_phaseArray_phase_16_reg_581;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_3_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_3_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_3_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_3_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_3_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_3_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_18_reg_586, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_4_address0 <= cor_phaseArray_phase_18_reg_586;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_4_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_4_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_4_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_4_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_4_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_4_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_20_reg_591, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_5_address0 <= cor_phaseArray_phase_20_reg_591;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_5_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_5_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_5_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_5_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_5_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_5_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_22_reg_596, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_6_address0 <= cor_phaseArray_phase_22_reg_596;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_6_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_6_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_6_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_6_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_6_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_6_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_24_reg_601, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_7_address0 <= cor_phaseArray_phase_24_reg_601;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_7_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_7_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_7_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_7_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_7_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_7_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_8_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_reg_541, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_8_address0 <= cor_phaseArray_phase_reg_541;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_8_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_8_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_8_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_8_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_8_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_8_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_9_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_2_reg_546, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_9_address0 <= cor_phaseArray_phase_2_reg_546;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_9_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_9_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_9_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_9_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_9_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_9_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, cor_phaseArray_phase_10_reg_566, tmp_i_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_address0 <= cor_phaseArray_phase_10_reg_566;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                cor_phaseArray_phase_address0 <= tmp_i_fu_323_p1(4 - 1 downto 0);
            else 
                cor_phaseArray_phase_address0 <= "XXXX";
            end if;
        else 
            cor_phaseArray_phase_address0 <= "XXXX";
        end if; 
    end process;


    cor_phaseArray_phase_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            cor_phaseArray_phase_ce0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cor_phaseArray_phase_we0_assign_proc : process(currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_lv1_1 = currentState_load_reg_537) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            cor_phaseArray_phase_we0 <= ap_const_logic_1;
        else 
            cor_phaseArray_phase_we0 <= ap_const_logic_0;
        end if; 
    end process;

    currentState_load_load_fu_319_p1 <= currentState;
    extLd1_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cor_phaseArray_phase_7_q0),32));
    extLd3_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cor_phaseArray_phase_6_q0),32));
    extLd6_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cor_phaseArray_phase_5_q0),32));
    extLd_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cor_phaseArray_phase_13_q0),32));

    i_data_TDATA_blk_n_assign_proc : process(i_data_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, currentState_load_reg_537)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_1 = currentState_load_reg_537))) then 
            i_data_TDATA_blk_n <= i_data_data_V_0_state(0);
        else 
            i_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    i_data_TREADY <= i_data_last_V_0_state(1);

    i_data_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, currentState_load_reg_537, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_537) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            i_data_data_V_0_ack_out <= ap_const_logic_1;
        else 
            i_data_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    i_data_data_V_0_vld_in <= i_data_TVALID;
    i_data_data_V_0_vld_out <= i_data_data_V_0_state(0);
    i_data_last_V_0_ack_in <= i_data_last_V_0_state(1);

    i_data_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, currentState_load_reg_537, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = currentState_load_reg_537) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            i_data_last_V_0_ack_out <= ap_const_logic_1;
        else 
            i_data_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    i_data_last_V_0_data_out_assign_proc : process(i_data_last_V_0_payload_A, i_data_last_V_0_payload_B, i_data_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = i_data_last_V_0_sel)) then 
            i_data_last_V_0_data_out <= i_data_last_V_0_payload_B;
        else 
            i_data_last_V_0_data_out <= i_data_last_V_0_payload_A;
        end if; 
    end process;

    i_data_last_V_0_load_A <= (i_data_last_V_0_state_cmp_full and not(i_data_last_V_0_sel_wr));
    i_data_last_V_0_load_B <= (i_data_last_V_0_sel_wr and i_data_last_V_0_state_cmp_full);
    i_data_last_V_0_sel <= i_data_last_V_0_sel_rd;
    i_data_last_V_0_state_cmp_full <= '0' when (i_data_last_V_0_state = ap_const_lv2_1) else '1';
    i_data_last_V_0_vld_in <= i_data_TVALID;
    i_data_last_V_0_vld_out <= i_data_last_V_0_state(0);
    o_data_TDATA <= o_data_data_V_1_data_out;

    o_data_TDATA_blk_n_assign_proc : process(o_data_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_currentState_load_reg_537, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, ap_reg_pp0_iter2_currentState_load_reg_537)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_currentState_load_reg_537)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_currentState_load_reg_537)))) then 
            o_data_TDATA_blk_n <= o_data_data_V_1_state(1);
        else 
            o_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    o_data_TLAST <= o_data_last_V_1_data_out;
    o_data_TVALID <= o_data_last_V_1_state(0);
    o_data_data_V_1_ack_in <= o_data_data_V_1_state(1);
    o_data_data_V_1_ack_out <= o_data_TREADY;

    o_data_data_V_1_data_out_assign_proc : process(o_data_data_V_1_payload_A, o_data_data_V_1_payload_B, o_data_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = o_data_data_V_1_sel)) then 
            o_data_data_V_1_data_out <= o_data_data_V_1_payload_B;
        else 
            o_data_data_V_1_data_out <= o_data_data_V_1_payload_A;
        end if; 
    end process;

    o_data_data_V_1_load_A <= (o_data_data_V_1_state_cmp_full and not(o_data_data_V_1_sel_wr));
    o_data_data_V_1_load_B <= (o_data_data_V_1_sel_wr and o_data_data_V_1_state_cmp_full);
    o_data_data_V_1_sel <= o_data_data_V_1_sel_rd;
    o_data_data_V_1_state_cmp_full <= '0' when (o_data_data_V_1_state = ap_const_lv2_1) else '1';

    o_data_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_currentState_load_reg_537, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_currentState_load_reg_537) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            o_data_data_V_1_vld_in <= ap_const_logic_1;
        else 
            o_data_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    o_data_data_V_1_vld_out <= o_data_data_V_1_state(0);
    o_data_data_V_tmp_fu_528_p3 <= 
        tmp_4_fu_511_p2 when (tmp_5_fu_523_p2(0) = '1') else 
        ap_const_lv32_0;
    o_data_last_V_1_ack_in <= o_data_last_V_1_state(1);
    o_data_last_V_1_ack_out <= o_data_TREADY;

    o_data_last_V_1_data_out_assign_proc : process(o_data_last_V_1_payload_A, o_data_last_V_1_payload_B, o_data_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = o_data_last_V_1_sel)) then 
            o_data_last_V_1_data_out <= o_data_last_V_1_payload_B;
        else 
            o_data_last_V_1_data_out <= o_data_last_V_1_payload_A;
        end if; 
    end process;

    o_data_last_V_1_load_A <= (o_data_last_V_1_state_cmp_full and not(o_data_last_V_1_sel_wr));
    o_data_last_V_1_load_B <= (o_data_last_V_1_sel_wr and o_data_last_V_1_state_cmp_full);
    o_data_last_V_1_sel <= o_data_last_V_1_sel_rd;
    o_data_last_V_1_state_cmp_full <= '0' when (o_data_last_V_1_state = ap_const_lv2_1) else '1';

    o_data_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_currentState_load_reg_537, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_currentState_load_reg_537) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            o_data_last_V_1_vld_in <= ap_const_logic_1;
        else 
            o_data_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    o_data_last_V_1_vld_out <= o_data_last_V_1_state(0);
    p_Val2_2_fu_485_p0 <= OP1_V_cast_fu_482_p1(32 - 1 downto 0);
    p_Val2_2_fu_485_p1 <= OP1_V_cast_fu_482_p1(32 - 1 downto 0);
    p_Val2_2_fu_485_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_485_p0) * signed(p_Val2_2_fu_485_p1))), 42));
    p_Val2_3_2_i_fu_424_p2 <= std_logic_vector(unsigned(tmp4_fu_400_p2) + unsigned(tmp7_fu_418_p2));
    p_Val2_6_i_fu_388_p2 <= std_logic_vector(unsigned(tmp8_fu_364_p2) + unsigned(tmp2_fu_382_p2));
    p_Val2_9_i_fu_470_p2 <= std_logic_vector(unsigned(p_Val2_6_i_reg_615) - unsigned(p_Val2_3_2_i_reg_622));
    p_Val2_i_fu_466_p2 <= std_logic_vector(unsigned(p_Val2_3_2_i_reg_622) - unsigned(p_Val2_6_i_reg_615));
    start_V_read_read_fu_108_p2 <= start_V;
    tmp1_fu_376_p2 <= std_logic_vector(unsigned(extLd1_fu_350_p1) + unsigned(cor_phaseArray_phase_9_q0));
    tmp2_fu_382_p2 <= std_logic_vector(unsigned(tmp_fu_370_p2) + unsigned(tmp1_fu_376_p2));
    tmp3_fu_394_p2 <= std_logic_vector(unsigned(cor_phaseArray_phase_q0) + unsigned(extLd3_fu_346_p1));
    tmp4_fu_400_p2 <= std_logic_vector(unsigned(extLd6_fu_341_p1) + unsigned(tmp3_fu_394_p2));
    tmp5_fu_406_p2 <= std_logic_vector(unsigned(cor_phaseArray_phase_12_q0) + unsigned(cor_phaseArray_phase_11_q0));
    tmp6_fu_412_p2 <= std_logic_vector(unsigned(extLd_fu_354_p1) + unsigned(cor_phaseArray_phase_8_q0));
    tmp7_fu_418_p2 <= std_logic_vector(unsigned(tmp5_fu_406_p2) + unsigned(tmp6_fu_412_p2));
    tmp8_fu_364_p2 <= std_logic_vector(unsigned(cor_phaseArray_phase_3_q0) + unsigned(tmp9_fu_358_p2));
    tmp9_fu_358_p2 <= std_logic_vector(unsigned(cor_phaseArray_phase_2_q0) + unsigned(cor_phaseArray_phase_4_q0));
    tmp_4_fu_511_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) + unsigned(loadCount_V));
    tmp_5_fu_523_p2 <= "1" when (signed(res_V_reg_639) > signed(ap_const_lv32_32000)) else "0";
    tmp_5_i_fu_462_p2 <= "1" when (signed(p_Val2_6_i_reg_615) > signed(p_Val2_3_2_i_reg_622)) else "0";
    tmp_fu_370_p2 <= std_logic_vector(unsigned(cor_phaseArray_phase_1_q0) + unsigned(cor_phaseArray_phase_10_q0));
    tmp_i_4_fu_474_p3 <= 
        p_Val2_9_i_fu_470_p2 when (tmp_5_i_fu_462_p2(0) = '1') else 
        p_Val2_i_fu_466_p2;
    tmp_i_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phaseClass_V),64));
end behav;
