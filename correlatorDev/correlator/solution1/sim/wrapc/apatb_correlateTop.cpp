// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
    typedef struct rfnoc_axis {
        ap_int<32> data;
        ap_uint<1> last;
       } rfnoc_axis;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "i_data_data_V"
#define AUTOTB_TVIN_i_data_data_V  "../tv/cdatafile/c.correlateTop.autotvin_i_data_data_V.dat"
// wrapc file define: "start_V"
#define AUTOTB_TVIN_start_V  "../tv/cdatafile/c.correlateTop.autotvin_start_V.dat"
// wrapc file define: "phaseClass_V"
#define AUTOTB_TVIN_phaseClass_V  "../tv/cdatafile/c.correlateTop.autotvin_phaseClass_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"


class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			i_data_data_V_depth = 0;
			start_V_depth = 0;
			phaseClass_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{i_data_data_V " << i_data_data_V_depth << "}\n";
			total_list << "{start_V " << start_V_depth << "}\n";
			total_list << "{phaseClass_V " << phaseClass_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int i_data_data_V_depth;
		int start_V_depth;
		int phaseClass_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void correlateTop (
rfnoc_axis i_data,
rfnoc_axis o_data,
ap_uint<1> start,
ap_uint<4> phaseClass);

void AESL_WRAP_correlateTop (
rfnoc_axis i_data,
rfnoc_axis o_data,
ap_uint<1> start,
ap_uint<4> phaseClass)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "i_data_data_V"
		char* tvin_i_data_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_i_data_data_V);

		// "start_V"
		char* tvin_start_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_start_V);

		// "phaseClass_V"
		char* tvin_phaseClass_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_phaseClass_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_i_data_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_i_data_data_V, tvin_i_data_data_V);

		sc_bv<32> i_data_data_V_tvin_wrapc_buffer;

		// RTL Name: i_data_data_V
		{
			// bitslice(31, 0)
			{
				// celement: i_data.data.V(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : i_data.data
						// sub_1st_elem          : 
						// ori_name_1st_elem     : i_data.data
						// regulate_c_name       : i_data_data_V
						// input_type_conversion : (i_data.data).to_string(2).c_str()
						if (&(i_data.data) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> i_data_data_V_tmp_mem;
							i_data_data_V_tmp_mem = (i_data.data).to_string(2).c_str();
							i_data_data_V_tvin_wrapc_buffer.range(31, 0) = i_data_data_V_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_i_data_data_V, "%s\n", (i_data_data_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_i_data_data_V, tvin_i_data_data_V);
		}

		tcl_file.set_num(1, &tcl_file.i_data_data_V_depth);
		sprintf(tvin_i_data_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_i_data_data_V, tvin_i_data_data_V);

		// [[transaction]]
		sprintf(tvin_start_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_start_V, tvin_start_V);

		sc_bv<1> start_V_tvin_wrapc_buffer;

		// RTL Name: start_V
		{
			// bitslice(0, 0)
			{
				// celement: start.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : start
						// sub_1st_elem          : 
						// ori_name_1st_elem     : start
						// regulate_c_name       : start_V
						// input_type_conversion : (start).to_string(2).c_str()
						if (&(start) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> start_V_tmp_mem;
							start_V_tmp_mem = (start).to_string(2).c_str();
							start_V_tvin_wrapc_buffer.range(0, 0) = start_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_start_V, "%s\n", (start_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_start_V, tvin_start_V);
		}

		tcl_file.set_num(1, &tcl_file.start_V_depth);
		sprintf(tvin_start_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_start_V, tvin_start_V);

		// [[transaction]]
		sprintf(tvin_phaseClass_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_phaseClass_V, tvin_phaseClass_V);

		sc_bv<4> phaseClass_V_tvin_wrapc_buffer;

		// RTL Name: phaseClass_V
		{
			// bitslice(3, 0)
			{
				// celement: phaseClass.V(3, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : phaseClass
						// sub_1st_elem          : 
						// ori_name_1st_elem     : phaseClass
						// regulate_c_name       : phaseClass_V
						// input_type_conversion : (phaseClass).to_string(2).c_str()
						if (&(phaseClass) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<4> phaseClass_V_tmp_mem;
							phaseClass_V_tmp_mem = (phaseClass).to_string(2).c_str();
							phaseClass_V_tvin_wrapc_buffer.range(3, 0) = phaseClass_V_tmp_mem.range(3, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_phaseClass_V, "%s\n", (phaseClass_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_phaseClass_V, tvin_phaseClass_V);
		}

		tcl_file.set_num(1, &tcl_file.phaseClass_V_depth);
		sprintf(tvin_phaseClass_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_phaseClass_V, tvin_phaseClass_V);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		correlateTop(i_data, o_data, start, phaseClass);

		CodeState = DUMP_OUTPUTS;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "i_data_data_V"
		delete [] tvin_i_data_data_V;
		// release memory allocation: "start_V"
		delete [] tvin_start_V;
		// release memory allocation: "phaseClass_V"
		delete [] tvin_phaseClass_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

