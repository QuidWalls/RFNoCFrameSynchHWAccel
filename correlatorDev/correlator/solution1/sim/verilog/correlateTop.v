// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="correlateTop,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.610667,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=1211,HLS_SYN_LUT=690}" *)

module correlateTop (
        ap_clk,
        ap_rst_n,
        i_data_TDATA,
        i_data_TVALID,
        i_data_TREADY,
        i_data_TLAST,
        o_data_TDATA,
        o_data_TVALID,
        o_data_TREADY,
        o_data_TLAST,
        start_V,
        phaseClass_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] i_data_TDATA;
input   i_data_TVALID;
output   i_data_TREADY;
input  [0:0] i_data_TLAST;
output  [31:0] o_data_TDATA;
output   o_data_TVALID;
input   o_data_TREADY;
output  [0:0] o_data_TLAST;
input  [0:0] start_V;
input  [3:0] phaseClass_V;

reg    ap_rst_n_inv;
reg   [31:0] i_data_data_V_0_data_out;
wire    i_data_data_V_0_vld_in;
wire    i_data_data_V_0_vld_out;
wire    i_data_data_V_0_ack_in;
reg    i_data_data_V_0_ack_out;
reg   [31:0] i_data_data_V_0_payload_A;
reg   [31:0] i_data_data_V_0_payload_B;
reg    i_data_data_V_0_sel_rd;
reg    i_data_data_V_0_sel_wr;
wire    i_data_data_V_0_sel;
wire    i_data_data_V_0_load_A;
wire    i_data_data_V_0_load_B;
reg   [1:0] i_data_data_V_0_state;
wire    i_data_data_V_0_state_cmp_full;
reg   [0:0] i_data_last_V_0_data_out;
wire    i_data_last_V_0_vld_in;
wire    i_data_last_V_0_vld_out;
wire    i_data_last_V_0_ack_in;
reg    i_data_last_V_0_ack_out;
reg   [0:0] i_data_last_V_0_payload_A;
reg   [0:0] i_data_last_V_0_payload_B;
reg    i_data_last_V_0_sel_rd;
reg    i_data_last_V_0_sel_wr;
wire    i_data_last_V_0_sel;
wire    i_data_last_V_0_load_A;
wire    i_data_last_V_0_load_B;
reg   [1:0] i_data_last_V_0_state;
wire    i_data_last_V_0_state_cmp_full;
reg   [31:0] o_data_data_V_1_data_out;
reg    o_data_data_V_1_vld_in;
wire    o_data_data_V_1_vld_out;
wire    o_data_data_V_1_ack_in;
wire    o_data_data_V_1_ack_out;
reg   [31:0] o_data_data_V_1_payload_A;
reg   [31:0] o_data_data_V_1_payload_B;
reg    o_data_data_V_1_sel_rd;
reg    o_data_data_V_1_sel_wr;
wire    o_data_data_V_1_sel;
wire    o_data_data_V_1_load_A;
wire    o_data_data_V_1_load_B;
reg   [1:0] o_data_data_V_1_state;
wire    o_data_data_V_1_state_cmp_full;
reg   [0:0] o_data_last_V_1_data_out;
reg    o_data_last_V_1_vld_in;
wire    o_data_last_V_1_vld_out;
wire    o_data_last_V_1_ack_in;
wire    o_data_last_V_1_ack_out;
reg   [0:0] o_data_last_V_1_payload_A;
reg   [0:0] o_data_last_V_1_payload_B;
reg    o_data_last_V_1_sel_rd;
reg    o_data_last_V_1_sel_wr;
wire    o_data_last_V_1_sel;
wire    o_data_last_V_1_load_A;
wire    o_data_last_V_1_load_B;
reg   [1:0] o_data_last_V_1_state;
wire    o_data_last_V_1_state_cmp_full;
reg   [0:0] currentState;
reg   [31:0] loadCount_V;
reg   [15:0] cor_phaseClass0_V_14;
reg   [15:0] cor_phaseClass0_V_13;
reg   [15:0] cor_phaseClass0_V_12;
reg   [15:0] cor_phaseClass0_V_11;
reg   [15:0] cor_phaseClass0_V_10;
reg   [15:0] cor_phaseClass0_V_9;
reg   [15:0] cor_phaseClass0_V_8;
reg   [15:0] cor_phaseClass0_V_7;
reg   [15:0] cor_phaseClass0_V_6;
reg   [15:0] cor_phaseClass0_V_5;
reg   [15:0] cor_phaseClass0_V_4;
reg   [15:0] cor_phaseClass0_V_3;
reg   [15:0] cor_phaseClass0_V_2;
reg   [15:0] cor_phaseClass0_V_1;
reg   [15:0] cor_phaseClass0_V_0;
reg    i_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] currentState_load_reg_503;
reg    o_data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] ap_reg_pp0_iter2_currentState_load_reg_503;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] ap_reg_pp0_iter3_currentState_load_reg_503;
wire   [0:0] start_V_read_read_fu_102_p2;
reg   [0:0] start_V_read_reg_499;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_start_V_read_reg_499;
reg   [0:0] ap_reg_pp0_iter2_start_V_read_reg_499;
wire   [0:0] currentState_load_load_fu_154_p1;
reg   [0:0] ap_reg_pp0_iter1_currentState_load_reg_503;
wire   [0:0] cond_i_fu_158_p2;
reg   [0:0] cond_i_reg_507;
reg   [0:0] i_data_last_V_tmp_reg_511;
reg   [0:0] ap_reg_pp0_iter2_i_data_last_V_tmp_reg_511;
wire   [15:0] tmp_1_i_fu_436_p3;
reg   [15:0] tmp_1_i_reg_516;
reg   [15:0] res_V_reg_521;
wire   [31:0] o_data_data_V_tmp_fu_483_p3;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] p_Val2_2_5_i_fu_411_p2;
reg   [15:0] ap_phi_precharge_reg_pp0_iter1_p_Val2_1_reg_126;
reg   [15:0] p_Val2_1_phi_fu_130_p4;
wire   [15:0] ap_phi_precharge_reg_pp0_iter0_p_Val2_1_reg_126;
wire   [15:0] p_Val2_5_2_i_fu_368_p2;
reg   [15:0] ap_phi_precharge_reg_pp0_iter1_p_Val2_2_reg_137;
reg   [15:0] p_Val2_2_phi_fu_141_p4;
wire   [15:0] ap_phi_precharge_reg_pp0_iter0_p_Val2_2_reg_137;
wire   [31:0] tmp_2_fu_466_p2;
wire   [15:0] tmp_1_fu_172_p1;
reg    ap_block_pp0_stage0_flag00001001;
wire   [15:0] tmp2_fu_338_p2;
wire   [15:0] tmp1_fu_332_p2;
wire   [15:0] tmp5_fu_356_p2;
wire   [15:0] tmp4_fu_350_p2;
wire   [15:0] tmp3_fu_362_p2;
wire   [15:0] tmp_fu_344_p2;
wire   [15:0] tmp8_fu_381_p2;
wire   [15:0] tmp7_fu_375_p2;
wire   [15:0] tmp11_fu_399_p2;
wire   [15:0] tmp10_fu_393_p2;
wire   [15:0] tmp9_fu_405_p2;
wire   [15:0] tmp6_fu_387_p2;
wire   [0:0] tmp_i_fu_418_p2;
wire   [15:0] p_Val2_8_i_fu_430_p2;
wire   [15:0] p_Val2_9_i_fu_424_p2;
wire  signed [20:0] p_Val2_3_fu_492_p2;
wire   [0:0] tmp_3_fu_478_p2;
wire  signed [15:0] p_Val2_3_fu_492_p0;
wire  signed [20:0] OP1_V_cast_fu_444_p1;
wire  signed [15:0] p_Val2_3_fu_492_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_375;

// power-on initialization
initial begin
#0 i_data_data_V_0_sel_rd = 1'b0;
#0 i_data_data_V_0_sel_wr = 1'b0;
#0 i_data_data_V_0_state = 2'd0;
#0 i_data_last_V_0_sel_rd = 1'b0;
#0 i_data_last_V_0_sel_wr = 1'b0;
#0 i_data_last_V_0_state = 2'd0;
#0 o_data_data_V_1_sel_rd = 1'b0;
#0 o_data_data_V_1_sel_wr = 1'b0;
#0 o_data_data_V_1_state = 2'd0;
#0 o_data_last_V_1_sel_rd = 1'b0;
#0 o_data_last_V_1_sel_wr = 1'b0;
#0 o_data_last_V_1_state = 2'd0;
#0 currentState = 1'd0;
#0 loadCount_V = 32'd0;
#0 cor_phaseClass0_V_14 = 16'd0;
#0 cor_phaseClass0_V_13 = 16'd0;
#0 cor_phaseClass0_V_12 = 16'd0;
#0 cor_phaseClass0_V_11 = 16'd0;
#0 cor_phaseClass0_V_10 = 16'd0;
#0 cor_phaseClass0_V_9 = 16'd0;
#0 cor_phaseClass0_V_8 = 16'd0;
#0 cor_phaseClass0_V_7 = 16'd0;
#0 cor_phaseClass0_V_6 = 16'd0;
#0 cor_phaseClass0_V_5 = 16'd0;
#0 cor_phaseClass0_V_4 = 16'd0;
#0 cor_phaseClass0_V_3 = 16'd0;
#0 cor_phaseClass0_V_2 = 16'd0;
#0 cor_phaseClass0_V_1 = 16'd0;
#0 cor_phaseClass0_V_0 = 16'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

correlateTop_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
correlateTop_mul_bkb_U1(
    .din0(p_Val2_3_fu_492_p0),
    .din1(p_Val2_3_fu_492_p1),
    .dout(p_Val2_3_fu_492_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_0 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_0 <= tmp_1_fu_172_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_1 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_1 <= cor_phaseClass0_V_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_10 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_10 <= cor_phaseClass0_V_9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_11 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_11 <= cor_phaseClass0_V_10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_12 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_12 <= cor_phaseClass0_V_11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_13 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_13 <= cor_phaseClass0_V_12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_14 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_14 <= cor_phaseClass0_V_13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_2 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_2 <= cor_phaseClass0_V_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_3 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_3 <= cor_phaseClass0_V_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_4 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_4 <= cor_phaseClass0_V_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_5 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_5 <= cor_phaseClass0_V_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_6 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_6 <= cor_phaseClass0_V_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_7 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_7 <= cor_phaseClass0_V_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_8 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_8 <= cor_phaseClass0_V_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        cor_phaseClass0_V_9 <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_reg_507))) begin
            cor_phaseClass0_V_9 <= cor_phaseClass0_V_8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        currentState <= 1'd0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1) & (1'd0 == currentState_load_load_fu_154_p1) & (1'd1 == start_V_read_read_fu_102_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == currentState_load_load_fu_154_p1) & (1'b1 == 1'b1)))) begin
            currentState <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_data_V_0_ack_out) & (1'b1 == i_data_data_V_0_vld_out))) begin
            i_data_data_V_0_sel_rd <= ~i_data_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_data_V_0_vld_in) & (1'b1 == i_data_data_V_0_ack_in))) begin
            i_data_data_V_0_sel_wr <= ~i_data_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_data_V_0_vld_in) & (1'b1 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd3)) | ((1'b0 == i_data_data_V_0_vld_in) & (i_data_data_V_0_state == 2'd2)))) begin
            i_data_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_data_V_0_vld_in) & (1'b0 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd3)) | ((1'b0 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd1)))) begin
            i_data_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_data_V_0_vld_in) & (i_data_data_V_0_state == 2'd2)) | ((1'b1 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd1)) | ((i_data_data_V_0_state == 2'd3) & ~((1'b1 == i_data_data_V_0_vld_in) & (1'b0 == i_data_data_V_0_ack_out)) & ~((1'b0 == i_data_data_V_0_vld_in) & (1'b1 == i_data_data_V_0_ack_out))))) begin
            i_data_data_V_0_state <= 2'd3;
        end else begin
            i_data_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_last_V_0_ack_out) & (1'b1 == i_data_last_V_0_vld_out))) begin
            i_data_last_V_0_sel_rd <= ~i_data_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_last_V_0_vld_in) & (1'b1 == i_data_last_V_0_ack_in))) begin
            i_data_last_V_0_sel_wr <= ~i_data_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_last_V_0_vld_in) & (1'b1 == i_data_last_V_0_ack_out) & (2'd3 == i_data_last_V_0_state)) | ((1'b0 == i_data_last_V_0_vld_in) & (2'd2 == i_data_last_V_0_state)))) begin
            i_data_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_last_V_0_vld_in) & (1'b0 == i_data_last_V_0_ack_out) & (2'd3 == i_data_last_V_0_state)) | ((1'b0 == i_data_last_V_0_ack_out) & (2'd1 == i_data_last_V_0_state)))) begin
            i_data_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_last_V_0_vld_in) & (2'd2 == i_data_last_V_0_state)) | ((1'b1 == i_data_last_V_0_ack_out) & (2'd1 == i_data_last_V_0_state)) | ((2'd3 == i_data_last_V_0_state) & ~((1'b1 == i_data_last_V_0_vld_in) & (1'b0 == i_data_last_V_0_ack_out)) & ~((1'b0 == i_data_last_V_0_vld_in) & (1'b1 == i_data_last_V_0_ack_out))))) begin
            i_data_last_V_0_state <= 2'd3;
        end else begin
            i_data_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        loadCount_V <= 32'd0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
            if ((1'd1 == ap_reg_pp0_iter2_currentState_load_reg_503)) begin
                loadCount_V <= tmp_2_fu_466_p2;
            end else if (((1'd0 == ap_reg_pp0_iter2_currentState_load_reg_503) & (1'd1 == ap_reg_pp0_iter2_start_V_read_reg_499))) begin
                loadCount_V <= 32'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_data_V_1_ack_out) & (1'b1 == o_data_data_V_1_vld_out))) begin
            o_data_data_V_1_sel_rd <= ~o_data_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_data_V_1_vld_in) & (1'b1 == o_data_data_V_1_ack_in))) begin
            o_data_data_V_1_sel_wr <= ~o_data_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_data_V_1_vld_in) & (1'b1 == o_data_data_V_1_ack_out) & (2'd3 == o_data_data_V_1_state)) | ((1'b0 == o_data_data_V_1_vld_in) & (2'd2 == o_data_data_V_1_state)))) begin
            o_data_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_data_V_1_vld_in) & (1'b0 == o_data_data_V_1_ack_out) & (2'd3 == o_data_data_V_1_state)) | ((1'b0 == o_data_data_V_1_ack_out) & (2'd1 == o_data_data_V_1_state)))) begin
            o_data_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_data_V_1_vld_in) & (2'd2 == o_data_data_V_1_state)) | ((1'b1 == o_data_data_V_1_ack_out) & (2'd1 == o_data_data_V_1_state)) | ((2'd3 == o_data_data_V_1_state) & ~((1'b1 == o_data_data_V_1_vld_in) & (1'b0 == o_data_data_V_1_ack_out)) & ~((1'b0 == o_data_data_V_1_vld_in) & (1'b1 == o_data_data_V_1_ack_out))))) begin
            o_data_data_V_1_state <= 2'd3;
        end else begin
            o_data_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_last_V_1_ack_out) & (1'b1 == o_data_last_V_1_vld_out))) begin
            o_data_last_V_1_sel_rd <= ~o_data_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_last_V_1_vld_in) & (1'b1 == o_data_last_V_1_ack_in))) begin
            o_data_last_V_1_sel_wr <= ~o_data_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_last_V_1_vld_in) & (1'b1 == o_data_last_V_1_ack_out) & (2'd3 == o_data_last_V_1_state)) | ((1'b0 == o_data_last_V_1_vld_in) & (2'd2 == o_data_last_V_1_state)))) begin
            o_data_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_last_V_1_vld_in) & (1'b0 == o_data_last_V_1_ack_out) & (2'd3 == o_data_last_V_1_state)) | ((1'b0 == o_data_last_V_1_ack_out) & (2'd1 == o_data_last_V_1_state)))) begin
            o_data_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_last_V_1_vld_in) & (2'd2 == o_data_last_V_1_state)) | ((1'b1 == o_data_last_V_1_ack_out) & (2'd1 == o_data_last_V_1_state)) | ((2'd3 == o_data_last_V_1_state) & ~((1'b1 == o_data_last_V_1_vld_in) & (1'b0 == o_data_last_V_1_ack_out)) & ~((1'b0 == o_data_last_V_1_vld_in) & (1'b1 == o_data_last_V_1_ack_out))))) begin
            o_data_last_V_1_state <= 2'd3;
        end else begin
            o_data_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_375 == 1'b1)) begin
        if (((1'd1 == currentState_load_load_fu_154_p1) & (1'd0 == cond_i_fu_158_p2))) begin
            ap_phi_precharge_reg_pp0_iter1_p_Val2_1_reg_126 <= 16'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_precharge_reg_pp0_iter1_p_Val2_1_reg_126 <= ap_phi_precharge_reg_pp0_iter0_p_Val2_1_reg_126;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_375 == 1'b1)) begin
        if (((1'd1 == currentState_load_load_fu_154_p1) & (1'd0 == cond_i_fu_158_p2))) begin
            ap_phi_precharge_reg_pp0_iter1_p_Val2_2_reg_137 <= 16'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_precharge_reg_pp0_iter1_p_Val2_2_reg_137 <= ap_phi_precharge_reg_pp0_iter0_p_Val2_2_reg_137;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_currentState_load_reg_503 <= currentState_load_reg_503;
        ap_reg_pp0_iter1_start_V_read_reg_499 <= start_V_read_reg_499;
        currentState_load_reg_503 <= currentState;
        start_V_read_reg_499 <= start_V;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_currentState_load_reg_503 <= ap_reg_pp0_iter1_currentState_load_reg_503;
        ap_reg_pp0_iter2_i_data_last_V_tmp_reg_511 <= i_data_last_V_tmp_reg_511;
        ap_reg_pp0_iter2_start_V_read_reg_499 <= ap_reg_pp0_iter1_start_V_read_reg_499;
        ap_reg_pp0_iter3_currentState_load_reg_503 <= ap_reg_pp0_iter2_currentState_load_reg_503;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == currentState_load_load_fu_154_p1))) begin
        cond_i_reg_507 <= cond_i_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_data_V_0_load_A)) begin
        i_data_data_V_0_payload_A <= i_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_data_V_0_load_B)) begin
        i_data_data_V_0_payload_B <= i_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_last_V_0_load_A)) begin
        i_data_last_V_0_payload_A <= i_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_last_V_0_load_B)) begin
        i_data_last_V_0_payload_B <= i_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_last_V_tmp_reg_511 <= i_data_last_V_0_data_out;
        tmp_1_i_reg_516 <= tmp_1_i_fu_436_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_data_V_1_load_A)) begin
        o_data_data_V_1_payload_A <= o_data_data_V_tmp_fu_483_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_data_V_1_load_B)) begin
        o_data_data_V_1_payload_B <= o_data_data_V_tmp_fu_483_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_last_V_1_load_A)) begin
        o_data_last_V_1_payload_A <= ap_reg_pp0_iter2_i_data_last_V_tmp_reg_511;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_last_V_1_load_B)) begin
        o_data_last_V_1_payload_B <= ap_reg_pp0_iter2_i_data_last_V_tmp_reg_511;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_currentState_load_reg_503))) begin
        res_V_reg_521 <= {{p_Val2_3_fu_492_p2[20:5]}};
    end
end

always @ (*) begin
    if (((1'b0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd1 == currentState_load_reg_503))) begin
        i_data_TDATA_blk_n = i_data_data_V_0_state[1'd0];
    end else begin
        i_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_data_V_0_ack_out = 1'b1;
    end else begin
        i_data_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_data_V_0_sel)) begin
        i_data_data_V_0_data_out = i_data_data_V_0_payload_B;
    end else begin
        i_data_data_V_0_data_out = i_data_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_last_V_0_ack_out = 1'b1;
    end else begin
        i_data_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_last_V_0_sel)) begin
        i_data_last_V_0_data_out = i_data_last_V_0_payload_B;
    end else begin
        i_data_last_V_0_data_out = i_data_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter2_currentState_load_reg_503)) | ((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd1 == ap_reg_pp0_iter3_currentState_load_reg_503)))) begin
        o_data_TDATA_blk_n = o_data_data_V_1_state[1'd1];
    end else begin
        o_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_data_V_1_sel)) begin
        o_data_data_V_1_data_out = o_data_data_V_1_payload_B;
    end else begin
        o_data_data_V_1_data_out = o_data_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter2_currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        o_data_data_V_1_vld_in = 1'b1;
    end else begin
        o_data_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_last_V_1_sel)) begin
        o_data_last_V_1_data_out = o_data_last_V_1_payload_B;
    end else begin
        o_data_last_V_1_data_out = o_data_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter2_currentState_load_reg_503) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        o_data_last_V_1_vld_in = 1'b1;
    end else begin
        o_data_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd1 == currentState_load_reg_503) & (1'd1 == cond_i_reg_507))) begin
        p_Val2_1_phi_fu_130_p4 = p_Val2_2_5_i_fu_411_p2;
    end else begin
        p_Val2_1_phi_fu_130_p4 = ap_phi_precharge_reg_pp0_iter1_p_Val2_1_reg_126;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd1 == currentState_load_reg_503) & (1'd1 == cond_i_reg_507))) begin
        p_Val2_2_phi_fu_141_p4 = p_Val2_5_2_i_fu_368_p2;
    end else begin
        p_Val2_2_phi_fu_141_p4 = ap_phi_precharge_reg_pp0_iter1_p_Val2_2_reg_137;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast_fu_444_p1 = $signed(tmp_1_i_reg_516);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (1'b0 == i_data_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter4) & ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (1'b0 == i_data_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_block_state4_io)) | ((1'b1 == ap_enable_reg_pp0_iter4) & ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in) | (1'b1 == ap_block_state5_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_503) & (1'b0 == i_data_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_block_state4_io)) | ((1'b1 == ap_enable_reg_pp0_iter4) & ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in) | (1'b1 == ap_block_state5_io))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((1'd1 == currentState_load_reg_503) & (1'b0 == i_data_data_V_0_vld_out));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((1'd1 == ap_reg_pp0_iter2_currentState_load_reg_503) & (1'b0 == o_data_data_V_1_ack_in));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((1'd1 == ap_reg_pp0_iter3_currentState_load_reg_503) & (1'b0 == o_data_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in));
end

always @ (*) begin
    ap_condition_375 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_precharge_reg_pp0_iter0_p_Val2_1_reg_126 = 'bx;

assign ap_phi_precharge_reg_pp0_iter0_p_Val2_2_reg_137 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cond_i_fu_158_p2 = ((phaseClass_V == 4'd0) ? 1'b1 : 1'b0);

assign currentState_load_load_fu_154_p1 = currentState;

assign i_data_TREADY = i_data_last_V_0_state[1'd1];

assign i_data_data_V_0_ack_in = i_data_data_V_0_state[1'd1];

assign i_data_data_V_0_load_A = (i_data_data_V_0_state_cmp_full & ~i_data_data_V_0_sel_wr);

assign i_data_data_V_0_load_B = (i_data_data_V_0_sel_wr & i_data_data_V_0_state_cmp_full);

assign i_data_data_V_0_sel = i_data_data_V_0_sel_rd;

assign i_data_data_V_0_state_cmp_full = ((i_data_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_data_V_0_vld_in = i_data_TVALID;

assign i_data_data_V_0_vld_out = i_data_data_V_0_state[1'd0];

assign i_data_last_V_0_ack_in = i_data_last_V_0_state[1'd1];

assign i_data_last_V_0_load_A = (i_data_last_V_0_state_cmp_full & ~i_data_last_V_0_sel_wr);

assign i_data_last_V_0_load_B = (i_data_last_V_0_sel_wr & i_data_last_V_0_state_cmp_full);

assign i_data_last_V_0_sel = i_data_last_V_0_sel_rd;

assign i_data_last_V_0_state_cmp_full = ((i_data_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_last_V_0_vld_in = i_data_TVALID;

assign i_data_last_V_0_vld_out = i_data_last_V_0_state[1'd0];

assign o_data_TDATA = o_data_data_V_1_data_out;

assign o_data_TLAST = o_data_last_V_1_data_out;

assign o_data_TVALID = o_data_last_V_1_state[1'd0];

assign o_data_data_V_1_ack_in = o_data_data_V_1_state[1'd1];

assign o_data_data_V_1_ack_out = o_data_TREADY;

assign o_data_data_V_1_load_A = (o_data_data_V_1_state_cmp_full & ~o_data_data_V_1_sel_wr);

assign o_data_data_V_1_load_B = (o_data_data_V_1_sel_wr & o_data_data_V_1_state_cmp_full);

assign o_data_data_V_1_sel = o_data_data_V_1_sel_rd;

assign o_data_data_V_1_state_cmp_full = ((o_data_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_data_V_1_vld_out = o_data_data_V_1_state[1'd0];

assign o_data_data_V_tmp_fu_483_p3 = ((tmp_3_fu_478_p2[0:0] === 1'b1) ? tmp_2_fu_466_p2 : 32'd0);

assign o_data_last_V_1_ack_in = o_data_last_V_1_state[1'd1];

assign o_data_last_V_1_ack_out = o_data_TREADY;

assign o_data_last_V_1_load_A = (o_data_last_V_1_state_cmp_full & ~o_data_last_V_1_sel_wr);

assign o_data_last_V_1_load_B = (o_data_last_V_1_sel_wr & o_data_last_V_1_state_cmp_full);

assign o_data_last_V_1_sel = o_data_last_V_1_sel_rd;

assign o_data_last_V_1_state_cmp_full = ((o_data_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_last_V_1_vld_out = o_data_last_V_1_state[1'd0];

assign p_Val2_2_5_i_fu_411_p2 = (tmp9_fu_405_p2 + tmp6_fu_387_p2);

assign p_Val2_3_fu_492_p0 = OP1_V_cast_fu_444_p1;

assign p_Val2_3_fu_492_p1 = OP1_V_cast_fu_444_p1;

assign p_Val2_5_2_i_fu_368_p2 = (tmp3_fu_362_p2 + tmp_fu_344_p2);

assign p_Val2_8_i_fu_430_p2 = (p_Val2_2_phi_fu_141_p4 - p_Val2_1_phi_fu_130_p4);

assign p_Val2_9_i_fu_424_p2 = (p_Val2_1_phi_fu_130_p4 - p_Val2_2_phi_fu_141_p4);

assign start_V_read_read_fu_102_p2 = start_V;

assign tmp10_fu_393_p2 = (cor_phaseClass0_V_6 + cor_phaseClass0_V_4);

assign tmp11_fu_399_p2 = (cor_phaseClass0_V_1 + tmp_1_fu_172_p1);

assign tmp1_fu_332_p2 = (cor_phaseClass0_V_9 + cor_phaseClass0_V_10);

assign tmp2_fu_338_p2 = (cor_phaseClass0_V_8 + cor_phaseClass0_V_7);

assign tmp3_fu_362_p2 = (tmp5_fu_356_p2 + tmp4_fu_350_p2);

assign tmp4_fu_350_p2 = (cor_phaseClass0_V_5 + cor_phaseClass0_V_3);

assign tmp5_fu_356_p2 = (cor_phaseClass0_V_2 + cor_phaseClass0_V_0);

assign tmp6_fu_387_p2 = (tmp8_fu_381_p2 + tmp7_fu_375_p2);

assign tmp7_fu_375_p2 = (cor_phaseClass0_V_13 + cor_phaseClass0_V_14);

assign tmp8_fu_381_p2 = (cor_phaseClass0_V_12 + cor_phaseClass0_V_11);

assign tmp9_fu_405_p2 = (tmp11_fu_399_p2 + tmp10_fu_393_p2);

assign tmp_1_fu_172_p1 = i_data_data_V_0_data_out[15:0];

assign tmp_1_i_fu_436_p3 = ((tmp_i_fu_418_p2[0:0] === 1'b1) ? p_Val2_8_i_fu_430_p2 : p_Val2_9_i_fu_424_p2);

assign tmp_2_fu_466_p2 = (32'd32 + loadCount_V);

assign tmp_3_fu_478_p2 = (($signed(res_V_reg_521) > $signed(16'd3200)) ? 1'b1 : 1'b0);

assign tmp_fu_344_p2 = (tmp2_fu_338_p2 + tmp1_fu_332_p2);

assign tmp_i_fu_418_p2 = (($signed(p_Val2_2_phi_fu_141_p4) > $signed(p_Val2_1_phi_fu_130_p4)) ? 1'b1 : 1'b0);

endmodule //correlateTop
