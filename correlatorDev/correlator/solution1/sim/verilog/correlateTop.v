// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="correlateTop,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.870000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1744,HLS_SYN_LUT=1019}" *)

module correlateTop (
        ap_clk,
        ap_rst_n,
        i_data_TDATA,
        i_data_TVALID,
        i_data_TREADY,
        i_data_TLAST,
        o_data_TDATA,
        o_data_TVALID,
        o_data_TREADY,
        o_data_TLAST,
        start_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] i_data_TDATA;
input   i_data_TVALID;
output   i_data_TREADY;
input  [0:0] i_data_TLAST;
output  [31:0] o_data_TDATA;
output   o_data_TVALID;
input   o_data_TREADY;
output  [0:0] o_data_TLAST;
input  [0:0] start_V;

reg    ap_rst_n_inv;
reg   [31:0] i_data_data_V_0_data_out;
wire    i_data_data_V_0_vld_in;
wire    i_data_data_V_0_vld_out;
wire    i_data_data_V_0_ack_in;
reg    i_data_data_V_0_ack_out;
reg   [31:0] i_data_data_V_0_payload_A;
reg   [31:0] i_data_data_V_0_payload_B;
reg    i_data_data_V_0_sel_rd;
reg    i_data_data_V_0_sel_wr;
wire    i_data_data_V_0_sel;
wire    i_data_data_V_0_load_A;
wire    i_data_data_V_0_load_B;
reg   [1:0] i_data_data_V_0_state;
wire    i_data_data_V_0_state_cmp_full;
reg   [0:0] i_data_last_V_0_data_out;
wire    i_data_last_V_0_vld_in;
wire    i_data_last_V_0_vld_out;
wire    i_data_last_V_0_ack_in;
reg    i_data_last_V_0_ack_out;
reg   [0:0] i_data_last_V_0_payload_A;
reg   [0:0] i_data_last_V_0_payload_B;
reg    i_data_last_V_0_sel_rd;
reg    i_data_last_V_0_sel_wr;
wire    i_data_last_V_0_sel;
wire    i_data_last_V_0_load_A;
wire    i_data_last_V_0_load_B;
reg   [1:0] i_data_last_V_0_state;
wire    i_data_last_V_0_state_cmp_full;
reg   [31:0] o_data_data_V_1_data_out;
reg    o_data_data_V_1_vld_in;
wire    o_data_data_V_1_vld_out;
wire    o_data_data_V_1_ack_in;
wire    o_data_data_V_1_ack_out;
reg   [31:0] o_data_data_V_1_payload_A;
reg   [31:0] o_data_data_V_1_payload_B;
reg    o_data_data_V_1_sel_rd;
reg    o_data_data_V_1_sel_wr;
wire    o_data_data_V_1_sel;
wire    o_data_data_V_1_load_A;
wire    o_data_data_V_1_load_B;
reg   [1:0] o_data_data_V_1_state;
wire    o_data_data_V_1_state_cmp_full;
reg   [0:0] o_data_last_V_1_data_out;
reg    o_data_last_V_1_vld_in;
wire    o_data_last_V_1_vld_out;
wire    o_data_last_V_1_ack_in;
wire    o_data_last_V_1_ack_out;
reg   [0:0] o_data_last_V_1_payload_A;
reg   [0:0] o_data_last_V_1_payload_B;
reg    o_data_last_V_1_sel_rd;
reg    o_data_last_V_1_sel_wr;
wire    o_data_last_V_1_sel;
wire    o_data_last_V_1_load_A;
wire    o_data_last_V_1_load_B;
reg   [1:0] o_data_last_V_1_state;
wire    o_data_last_V_1_state_cmp_full;
reg   [0:0] currentState;
reg   [3:0] phaseClass_V;
reg   [31:0] loadCount_V;
reg   [31:0] cor_phaseClass0_V_14;
reg   [31:0] cor_phaseClass0_V_13;
reg   [31:0] cor_phaseClass0_V_12;
reg   [31:0] cor_phaseClass0_V_11;
reg   [31:0] cor_phaseClass0_V_10;
reg   [31:0] cor_phaseClass0_V_9;
reg   [31:0] cor_phaseClass0_V_8;
reg   [31:0] cor_phaseClass0_V_7;
reg   [31:0] cor_phaseClass0_V_6;
reg   [31:0] cor_phaseClass0_V_5;
reg   [31:0] cor_phaseClass0_V_4;
reg   [20:0] cor_phaseClass0_V_3;
reg   [20:0] cor_phaseClass0_V_2;
reg   [20:0] cor_phaseClass0_V_1;
reg   [20:0] cor_phaseClass0_V_0;
reg    i_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] currentState_load_reg_561;
reg    o_data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] ap_reg_pp0_iter3_currentState_load_reg_561;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] ap_reg_pp0_iter4_currentState_load_reg_561;
wire   [0:0] start_V_read_read_fu_98_p2;
reg   [0:0] start_V_read_reg_557;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state5_io;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_start_V_read_reg_557;
reg   [0:0] ap_reg_pp0_iter2_start_V_read_reg_557;
reg   [0:0] ap_reg_pp0_iter3_start_V_read_reg_557;
wire   [0:0] currentState_load_load_fu_150_p1;
reg   [0:0] ap_reg_pp0_iter1_currentState_load_reg_561;
reg   [0:0] ap_reg_pp0_iter2_currentState_load_reg_561;
reg   [0:0] i_data_last_V_tmp_reg_565;
reg   [0:0] ap_reg_pp0_iter2_i_data_last_V_tmp_reg_565;
reg   [0:0] ap_reg_pp0_iter3_i_data_last_V_tmp_reg_565;
wire   [31:0] p_Val2_6_i_fu_402_p2;
wire   [0:0] cond_i_fu_200_p2;
wire   [31:0] p_Val2_3_7_i_fu_458_p2;
wire   [31:0] tmp_1_i_fu_494_p3;
reg   [31:0] tmp_1_i_reg_583;
reg   [31:0] res_V_reg_588;
wire   [31:0] o_data_data_V_tmp_fu_548_p3;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] ap_phi_precharge_reg_pp0_iter1_p_Val2_2_reg_122;
reg   [31:0] ap_phi_precharge_reg_pp0_iter2_p_Val2_2_reg_122;
wire   [31:0] ap_phi_precharge_reg_pp0_iter1_p_Val2_3_reg_133;
reg   [31:0] ap_phi_precharge_reg_pp0_iter2_p_Val2_3_reg_133;
wire   [3:0] tmp_6_fu_464_p2;
wire   [31:0] tmp_4_fu_531_p2;
wire   [15:0] p_Val2_1_fu_172_p1;
wire   [20:0] op_V_read_assign_fu_182_p3;
wire  signed [31:0] extLd4_fu_314_p1;
reg    ap_block_pp0_stage0_flag00001001;
wire   [31:0] tmp1_fu_372_p2;
wire  signed [31:0] extLd2_fu_328_p1;
wire   [31:0] tmp3_fu_384_p2;
wire   [31:0] tmp4_fu_390_p2;
wire   [31:0] tmp_fu_378_p2;
wire   [31:0] tmp2_fu_396_p2;
wire   [31:0] tmp6_fu_408_p2;
wire   [31:0] tmp7_fu_414_p2;
wire  signed [21:0] op_V_read_assign_cas_fu_190_p1;
wire  signed [21:0] cor_phaseClass0_V_0_1_fu_356_p1;
wire   [21:0] tmp11_fu_432_p2;
wire  signed [22:0] cor_phaseClass0_V_1_1_fu_342_p1;
wire  signed [22:0] tmp11_cast_cast_fu_438_p1;
wire   [22:0] tmp10_fu_442_p2;
wire   [31:0] tmp9_fu_426_p2;
wire  signed [31:0] tmp10_cast_fu_448_p1;
wire   [31:0] tmp5_fu_420_p2;
wire   [31:0] tmp8_fu_452_p2;
wire   [0:0] tmp_i_fu_476_p2;
wire   [31:0] p_Val2_9_i_fu_488_p2;
wire   [31:0] p_Val2_i_fu_482_p2;
wire  signed [31:0] p_Val2_4_fu_505_p0;
wire  signed [41:0] OP1_V_cast_fu_502_p1;
wire  signed [31:0] p_Val2_4_fu_505_p1;
wire   [41:0] p_Val2_4_fu_505_p2;
wire   [0:0] tmp_7_fu_543_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_378;

// power-on initialization
initial begin
#0 i_data_data_V_0_sel_rd = 1'b0;
#0 i_data_data_V_0_sel_wr = 1'b0;
#0 i_data_data_V_0_state = 2'd0;
#0 i_data_last_V_0_sel_rd = 1'b0;
#0 i_data_last_V_0_sel_wr = 1'b0;
#0 i_data_last_V_0_state = 2'd0;
#0 o_data_data_V_1_sel_rd = 1'b0;
#0 o_data_data_V_1_sel_wr = 1'b0;
#0 o_data_data_V_1_state = 2'd0;
#0 o_data_last_V_1_sel_rd = 1'b0;
#0 o_data_last_V_1_sel_wr = 1'b0;
#0 o_data_last_V_1_state = 2'd0;
#0 currentState = 1'd0;
#0 phaseClass_V = 4'd0;
#0 loadCount_V = 32'd0;
#0 cor_phaseClass0_V_14 = 32'd0;
#0 cor_phaseClass0_V_13 = 32'd0;
#0 cor_phaseClass0_V_12 = 32'd0;
#0 cor_phaseClass0_V_11 = 32'd0;
#0 cor_phaseClass0_V_10 = 32'd0;
#0 cor_phaseClass0_V_9 = 32'd0;
#0 cor_phaseClass0_V_8 = 32'd0;
#0 cor_phaseClass0_V_7 = 32'd0;
#0 cor_phaseClass0_V_6 = 32'd0;
#0 cor_phaseClass0_V_5 = 32'd0;
#0 cor_phaseClass0_V_4 = 32'd0;
#0 cor_phaseClass0_V_3 = 21'd0;
#0 cor_phaseClass0_V_2 = 21'd0;
#0 cor_phaseClass0_V_1 = 21'd0;
#0 cor_phaseClass0_V_0 = 21'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_0[5] <= 1'b0;
        cor_phaseClass0_V_0[6] <= 1'b0;
        cor_phaseClass0_V_0[7] <= 1'b0;
        cor_phaseClass0_V_0[8] <= 1'b0;
        cor_phaseClass0_V_0[9] <= 1'b0;
        cor_phaseClass0_V_0[10] <= 1'b0;
        cor_phaseClass0_V_0[11] <= 1'b0;
        cor_phaseClass0_V_0[12] <= 1'b0;
        cor_phaseClass0_V_0[13] <= 1'b0;
        cor_phaseClass0_V_0[14] <= 1'b0;
        cor_phaseClass0_V_0[15] <= 1'b0;
        cor_phaseClass0_V_0[16] <= 1'b0;
        cor_phaseClass0_V_0[17] <= 1'b0;
        cor_phaseClass0_V_0[18] <= 1'b0;
        cor_phaseClass0_V_0[19] <= 1'b0;
        cor_phaseClass0_V_0[20] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_0[20 : 5] <= op_V_read_assign_fu_182_p3[20 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_1[5] <= 1'b0;
        cor_phaseClass0_V_1[6] <= 1'b0;
        cor_phaseClass0_V_1[7] <= 1'b0;
        cor_phaseClass0_V_1[8] <= 1'b0;
        cor_phaseClass0_V_1[9] <= 1'b0;
        cor_phaseClass0_V_1[10] <= 1'b0;
        cor_phaseClass0_V_1[11] <= 1'b0;
        cor_phaseClass0_V_1[12] <= 1'b0;
        cor_phaseClass0_V_1[13] <= 1'b0;
        cor_phaseClass0_V_1[14] <= 1'b0;
        cor_phaseClass0_V_1[15] <= 1'b0;
        cor_phaseClass0_V_1[16] <= 1'b0;
        cor_phaseClass0_V_1[17] <= 1'b0;
        cor_phaseClass0_V_1[18] <= 1'b0;
        cor_phaseClass0_V_1[19] <= 1'b0;
        cor_phaseClass0_V_1[20] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_1[20 : 5] <= cor_phaseClass0_V_0[20 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_10[5] <= 1'b0;
        cor_phaseClass0_V_10[6] <= 1'b0;
        cor_phaseClass0_V_10[7] <= 1'b0;
        cor_phaseClass0_V_10[8] <= 1'b0;
        cor_phaseClass0_V_10[9] <= 1'b0;
        cor_phaseClass0_V_10[10] <= 1'b0;
        cor_phaseClass0_V_10[11] <= 1'b0;
        cor_phaseClass0_V_10[12] <= 1'b0;
        cor_phaseClass0_V_10[13] <= 1'b0;
        cor_phaseClass0_V_10[14] <= 1'b0;
        cor_phaseClass0_V_10[15] <= 1'b0;
        cor_phaseClass0_V_10[16] <= 1'b0;
        cor_phaseClass0_V_10[17] <= 1'b0;
        cor_phaseClass0_V_10[18] <= 1'b0;
        cor_phaseClass0_V_10[19] <= 1'b0;
        cor_phaseClass0_V_10[20] <= 1'b0;
        cor_phaseClass0_V_10[21] <= 1'b0;
        cor_phaseClass0_V_10[22] <= 1'b0;
        cor_phaseClass0_V_10[23] <= 1'b0;
        cor_phaseClass0_V_10[24] <= 1'b0;
        cor_phaseClass0_V_10[25] <= 1'b0;
        cor_phaseClass0_V_10[26] <= 1'b0;
        cor_phaseClass0_V_10[27] <= 1'b0;
        cor_phaseClass0_V_10[28] <= 1'b0;
        cor_phaseClass0_V_10[29] <= 1'b0;
        cor_phaseClass0_V_10[30] <= 1'b0;
        cor_phaseClass0_V_10[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_10[31 : 5] <= cor_phaseClass0_V_9[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_11[5] <= 1'b0;
        cor_phaseClass0_V_11[6] <= 1'b0;
        cor_phaseClass0_V_11[7] <= 1'b0;
        cor_phaseClass0_V_11[8] <= 1'b0;
        cor_phaseClass0_V_11[9] <= 1'b0;
        cor_phaseClass0_V_11[10] <= 1'b0;
        cor_phaseClass0_V_11[11] <= 1'b0;
        cor_phaseClass0_V_11[12] <= 1'b0;
        cor_phaseClass0_V_11[13] <= 1'b0;
        cor_phaseClass0_V_11[14] <= 1'b0;
        cor_phaseClass0_V_11[15] <= 1'b0;
        cor_phaseClass0_V_11[16] <= 1'b0;
        cor_phaseClass0_V_11[17] <= 1'b0;
        cor_phaseClass0_V_11[18] <= 1'b0;
        cor_phaseClass0_V_11[19] <= 1'b0;
        cor_phaseClass0_V_11[20] <= 1'b0;
        cor_phaseClass0_V_11[21] <= 1'b0;
        cor_phaseClass0_V_11[22] <= 1'b0;
        cor_phaseClass0_V_11[23] <= 1'b0;
        cor_phaseClass0_V_11[24] <= 1'b0;
        cor_phaseClass0_V_11[25] <= 1'b0;
        cor_phaseClass0_V_11[26] <= 1'b0;
        cor_phaseClass0_V_11[27] <= 1'b0;
        cor_phaseClass0_V_11[28] <= 1'b0;
        cor_phaseClass0_V_11[29] <= 1'b0;
        cor_phaseClass0_V_11[30] <= 1'b0;
        cor_phaseClass0_V_11[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_11[31 : 5] <= cor_phaseClass0_V_10[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_12[5] <= 1'b0;
        cor_phaseClass0_V_12[6] <= 1'b0;
        cor_phaseClass0_V_12[7] <= 1'b0;
        cor_phaseClass0_V_12[8] <= 1'b0;
        cor_phaseClass0_V_12[9] <= 1'b0;
        cor_phaseClass0_V_12[10] <= 1'b0;
        cor_phaseClass0_V_12[11] <= 1'b0;
        cor_phaseClass0_V_12[12] <= 1'b0;
        cor_phaseClass0_V_12[13] <= 1'b0;
        cor_phaseClass0_V_12[14] <= 1'b0;
        cor_phaseClass0_V_12[15] <= 1'b0;
        cor_phaseClass0_V_12[16] <= 1'b0;
        cor_phaseClass0_V_12[17] <= 1'b0;
        cor_phaseClass0_V_12[18] <= 1'b0;
        cor_phaseClass0_V_12[19] <= 1'b0;
        cor_phaseClass0_V_12[20] <= 1'b0;
        cor_phaseClass0_V_12[21] <= 1'b0;
        cor_phaseClass0_V_12[22] <= 1'b0;
        cor_phaseClass0_V_12[23] <= 1'b0;
        cor_phaseClass0_V_12[24] <= 1'b0;
        cor_phaseClass0_V_12[25] <= 1'b0;
        cor_phaseClass0_V_12[26] <= 1'b0;
        cor_phaseClass0_V_12[27] <= 1'b0;
        cor_phaseClass0_V_12[28] <= 1'b0;
        cor_phaseClass0_V_12[29] <= 1'b0;
        cor_phaseClass0_V_12[30] <= 1'b0;
        cor_phaseClass0_V_12[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_12[31 : 5] <= cor_phaseClass0_V_11[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_13[5] <= 1'b0;
        cor_phaseClass0_V_13[6] <= 1'b0;
        cor_phaseClass0_V_13[7] <= 1'b0;
        cor_phaseClass0_V_13[8] <= 1'b0;
        cor_phaseClass0_V_13[9] <= 1'b0;
        cor_phaseClass0_V_13[10] <= 1'b0;
        cor_phaseClass0_V_13[11] <= 1'b0;
        cor_phaseClass0_V_13[12] <= 1'b0;
        cor_phaseClass0_V_13[13] <= 1'b0;
        cor_phaseClass0_V_13[14] <= 1'b0;
        cor_phaseClass0_V_13[15] <= 1'b0;
        cor_phaseClass0_V_13[16] <= 1'b0;
        cor_phaseClass0_V_13[17] <= 1'b0;
        cor_phaseClass0_V_13[18] <= 1'b0;
        cor_phaseClass0_V_13[19] <= 1'b0;
        cor_phaseClass0_V_13[20] <= 1'b0;
        cor_phaseClass0_V_13[21] <= 1'b0;
        cor_phaseClass0_V_13[22] <= 1'b0;
        cor_phaseClass0_V_13[23] <= 1'b0;
        cor_phaseClass0_V_13[24] <= 1'b0;
        cor_phaseClass0_V_13[25] <= 1'b0;
        cor_phaseClass0_V_13[26] <= 1'b0;
        cor_phaseClass0_V_13[27] <= 1'b0;
        cor_phaseClass0_V_13[28] <= 1'b0;
        cor_phaseClass0_V_13[29] <= 1'b0;
        cor_phaseClass0_V_13[30] <= 1'b0;
        cor_phaseClass0_V_13[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_13[31 : 5] <= cor_phaseClass0_V_12[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_14[5] <= 1'b0;
        cor_phaseClass0_V_14[6] <= 1'b0;
        cor_phaseClass0_V_14[7] <= 1'b0;
        cor_phaseClass0_V_14[8] <= 1'b0;
        cor_phaseClass0_V_14[9] <= 1'b0;
        cor_phaseClass0_V_14[10] <= 1'b0;
        cor_phaseClass0_V_14[11] <= 1'b0;
        cor_phaseClass0_V_14[12] <= 1'b0;
        cor_phaseClass0_V_14[13] <= 1'b0;
        cor_phaseClass0_V_14[14] <= 1'b0;
        cor_phaseClass0_V_14[15] <= 1'b0;
        cor_phaseClass0_V_14[16] <= 1'b0;
        cor_phaseClass0_V_14[17] <= 1'b0;
        cor_phaseClass0_V_14[18] <= 1'b0;
        cor_phaseClass0_V_14[19] <= 1'b0;
        cor_phaseClass0_V_14[20] <= 1'b0;
        cor_phaseClass0_V_14[21] <= 1'b0;
        cor_phaseClass0_V_14[22] <= 1'b0;
        cor_phaseClass0_V_14[23] <= 1'b0;
        cor_phaseClass0_V_14[24] <= 1'b0;
        cor_phaseClass0_V_14[25] <= 1'b0;
        cor_phaseClass0_V_14[26] <= 1'b0;
        cor_phaseClass0_V_14[27] <= 1'b0;
        cor_phaseClass0_V_14[28] <= 1'b0;
        cor_phaseClass0_V_14[29] <= 1'b0;
        cor_phaseClass0_V_14[30] <= 1'b0;
        cor_phaseClass0_V_14[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_14[31 : 5] <= cor_phaseClass0_V_13[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_2[5] <= 1'b0;
        cor_phaseClass0_V_2[6] <= 1'b0;
        cor_phaseClass0_V_2[7] <= 1'b0;
        cor_phaseClass0_V_2[8] <= 1'b0;
        cor_phaseClass0_V_2[9] <= 1'b0;
        cor_phaseClass0_V_2[10] <= 1'b0;
        cor_phaseClass0_V_2[11] <= 1'b0;
        cor_phaseClass0_V_2[12] <= 1'b0;
        cor_phaseClass0_V_2[13] <= 1'b0;
        cor_phaseClass0_V_2[14] <= 1'b0;
        cor_phaseClass0_V_2[15] <= 1'b0;
        cor_phaseClass0_V_2[16] <= 1'b0;
        cor_phaseClass0_V_2[17] <= 1'b0;
        cor_phaseClass0_V_2[18] <= 1'b0;
        cor_phaseClass0_V_2[19] <= 1'b0;
        cor_phaseClass0_V_2[20] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_2[20 : 5] <= cor_phaseClass0_V_1[20 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_3[5] <= 1'b0;
        cor_phaseClass0_V_3[6] <= 1'b0;
        cor_phaseClass0_V_3[7] <= 1'b0;
        cor_phaseClass0_V_3[8] <= 1'b0;
        cor_phaseClass0_V_3[9] <= 1'b0;
        cor_phaseClass0_V_3[10] <= 1'b0;
        cor_phaseClass0_V_3[11] <= 1'b0;
        cor_phaseClass0_V_3[12] <= 1'b0;
        cor_phaseClass0_V_3[13] <= 1'b0;
        cor_phaseClass0_V_3[14] <= 1'b0;
        cor_phaseClass0_V_3[15] <= 1'b0;
        cor_phaseClass0_V_3[16] <= 1'b0;
        cor_phaseClass0_V_3[17] <= 1'b0;
        cor_phaseClass0_V_3[18] <= 1'b0;
        cor_phaseClass0_V_3[19] <= 1'b0;
        cor_phaseClass0_V_3[20] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_3[20 : 5] <= cor_phaseClass0_V_2[20 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_4[5] <= 1'b0;
        cor_phaseClass0_V_4[6] <= 1'b0;
        cor_phaseClass0_V_4[7] <= 1'b0;
        cor_phaseClass0_V_4[8] <= 1'b0;
        cor_phaseClass0_V_4[9] <= 1'b0;
        cor_phaseClass0_V_4[10] <= 1'b0;
        cor_phaseClass0_V_4[11] <= 1'b0;
        cor_phaseClass0_V_4[12] <= 1'b0;
        cor_phaseClass0_V_4[13] <= 1'b0;
        cor_phaseClass0_V_4[14] <= 1'b0;
        cor_phaseClass0_V_4[15] <= 1'b0;
        cor_phaseClass0_V_4[16] <= 1'b0;
        cor_phaseClass0_V_4[17] <= 1'b0;
        cor_phaseClass0_V_4[18] <= 1'b0;
        cor_phaseClass0_V_4[19] <= 1'b0;
        cor_phaseClass0_V_4[20] <= 1'b0;
        cor_phaseClass0_V_4[21] <= 1'b0;
        cor_phaseClass0_V_4[22] <= 1'b0;
        cor_phaseClass0_V_4[23] <= 1'b0;
        cor_phaseClass0_V_4[24] <= 1'b0;
        cor_phaseClass0_V_4[25] <= 1'b0;
        cor_phaseClass0_V_4[26] <= 1'b0;
        cor_phaseClass0_V_4[27] <= 1'b0;
        cor_phaseClass0_V_4[28] <= 1'b0;
        cor_phaseClass0_V_4[29] <= 1'b0;
        cor_phaseClass0_V_4[30] <= 1'b0;
        cor_phaseClass0_V_4[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_4[31 : 5] <= extLd4_fu_314_p1[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_5[5] <= 1'b0;
        cor_phaseClass0_V_5[6] <= 1'b0;
        cor_phaseClass0_V_5[7] <= 1'b0;
        cor_phaseClass0_V_5[8] <= 1'b0;
        cor_phaseClass0_V_5[9] <= 1'b0;
        cor_phaseClass0_V_5[10] <= 1'b0;
        cor_phaseClass0_V_5[11] <= 1'b0;
        cor_phaseClass0_V_5[12] <= 1'b0;
        cor_phaseClass0_V_5[13] <= 1'b0;
        cor_phaseClass0_V_5[14] <= 1'b0;
        cor_phaseClass0_V_5[15] <= 1'b0;
        cor_phaseClass0_V_5[16] <= 1'b0;
        cor_phaseClass0_V_5[17] <= 1'b0;
        cor_phaseClass0_V_5[18] <= 1'b0;
        cor_phaseClass0_V_5[19] <= 1'b0;
        cor_phaseClass0_V_5[20] <= 1'b0;
        cor_phaseClass0_V_5[21] <= 1'b0;
        cor_phaseClass0_V_5[22] <= 1'b0;
        cor_phaseClass0_V_5[23] <= 1'b0;
        cor_phaseClass0_V_5[24] <= 1'b0;
        cor_phaseClass0_V_5[25] <= 1'b0;
        cor_phaseClass0_V_5[26] <= 1'b0;
        cor_phaseClass0_V_5[27] <= 1'b0;
        cor_phaseClass0_V_5[28] <= 1'b0;
        cor_phaseClass0_V_5[29] <= 1'b0;
        cor_phaseClass0_V_5[30] <= 1'b0;
        cor_phaseClass0_V_5[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_5[31 : 5] <= cor_phaseClass0_V_4[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_6[5] <= 1'b0;
        cor_phaseClass0_V_6[6] <= 1'b0;
        cor_phaseClass0_V_6[7] <= 1'b0;
        cor_phaseClass0_V_6[8] <= 1'b0;
        cor_phaseClass0_V_6[9] <= 1'b0;
        cor_phaseClass0_V_6[10] <= 1'b0;
        cor_phaseClass0_V_6[11] <= 1'b0;
        cor_phaseClass0_V_6[12] <= 1'b0;
        cor_phaseClass0_V_6[13] <= 1'b0;
        cor_phaseClass0_V_6[14] <= 1'b0;
        cor_phaseClass0_V_6[15] <= 1'b0;
        cor_phaseClass0_V_6[16] <= 1'b0;
        cor_phaseClass0_V_6[17] <= 1'b0;
        cor_phaseClass0_V_6[18] <= 1'b0;
        cor_phaseClass0_V_6[19] <= 1'b0;
        cor_phaseClass0_V_6[20] <= 1'b0;
        cor_phaseClass0_V_6[21] <= 1'b0;
        cor_phaseClass0_V_6[22] <= 1'b0;
        cor_phaseClass0_V_6[23] <= 1'b0;
        cor_phaseClass0_V_6[24] <= 1'b0;
        cor_phaseClass0_V_6[25] <= 1'b0;
        cor_phaseClass0_V_6[26] <= 1'b0;
        cor_phaseClass0_V_6[27] <= 1'b0;
        cor_phaseClass0_V_6[28] <= 1'b0;
        cor_phaseClass0_V_6[29] <= 1'b0;
        cor_phaseClass0_V_6[30] <= 1'b0;
        cor_phaseClass0_V_6[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_6[31 : 5] <= cor_phaseClass0_V_5[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_7[5] <= 1'b0;
        cor_phaseClass0_V_7[6] <= 1'b0;
        cor_phaseClass0_V_7[7] <= 1'b0;
        cor_phaseClass0_V_7[8] <= 1'b0;
        cor_phaseClass0_V_7[9] <= 1'b0;
        cor_phaseClass0_V_7[10] <= 1'b0;
        cor_phaseClass0_V_7[11] <= 1'b0;
        cor_phaseClass0_V_7[12] <= 1'b0;
        cor_phaseClass0_V_7[13] <= 1'b0;
        cor_phaseClass0_V_7[14] <= 1'b0;
        cor_phaseClass0_V_7[15] <= 1'b0;
        cor_phaseClass0_V_7[16] <= 1'b0;
        cor_phaseClass0_V_7[17] <= 1'b0;
        cor_phaseClass0_V_7[18] <= 1'b0;
        cor_phaseClass0_V_7[19] <= 1'b0;
        cor_phaseClass0_V_7[20] <= 1'b0;
        cor_phaseClass0_V_7[21] <= 1'b0;
        cor_phaseClass0_V_7[22] <= 1'b0;
        cor_phaseClass0_V_7[23] <= 1'b0;
        cor_phaseClass0_V_7[24] <= 1'b0;
        cor_phaseClass0_V_7[25] <= 1'b0;
        cor_phaseClass0_V_7[26] <= 1'b0;
        cor_phaseClass0_V_7[27] <= 1'b0;
        cor_phaseClass0_V_7[28] <= 1'b0;
        cor_phaseClass0_V_7[29] <= 1'b0;
        cor_phaseClass0_V_7[30] <= 1'b0;
        cor_phaseClass0_V_7[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_7[31 : 5] <= cor_phaseClass0_V_6[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_8[5] <= 1'b0;
        cor_phaseClass0_V_8[6] <= 1'b0;
        cor_phaseClass0_V_8[7] <= 1'b0;
        cor_phaseClass0_V_8[8] <= 1'b0;
        cor_phaseClass0_V_8[9] <= 1'b0;
        cor_phaseClass0_V_8[10] <= 1'b0;
        cor_phaseClass0_V_8[11] <= 1'b0;
        cor_phaseClass0_V_8[12] <= 1'b0;
        cor_phaseClass0_V_8[13] <= 1'b0;
        cor_phaseClass0_V_8[14] <= 1'b0;
        cor_phaseClass0_V_8[15] <= 1'b0;
        cor_phaseClass0_V_8[16] <= 1'b0;
        cor_phaseClass0_V_8[17] <= 1'b0;
        cor_phaseClass0_V_8[18] <= 1'b0;
        cor_phaseClass0_V_8[19] <= 1'b0;
        cor_phaseClass0_V_8[20] <= 1'b0;
        cor_phaseClass0_V_8[21] <= 1'b0;
        cor_phaseClass0_V_8[22] <= 1'b0;
        cor_phaseClass0_V_8[23] <= 1'b0;
        cor_phaseClass0_V_8[24] <= 1'b0;
        cor_phaseClass0_V_8[25] <= 1'b0;
        cor_phaseClass0_V_8[26] <= 1'b0;
        cor_phaseClass0_V_8[27] <= 1'b0;
        cor_phaseClass0_V_8[28] <= 1'b0;
        cor_phaseClass0_V_8[29] <= 1'b0;
        cor_phaseClass0_V_8[30] <= 1'b0;
        cor_phaseClass0_V_8[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_8[31 : 5] <= cor_phaseClass0_V_7[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                cor_phaseClass0_V_9[5] <= 1'b0;
        cor_phaseClass0_V_9[6] <= 1'b0;
        cor_phaseClass0_V_9[7] <= 1'b0;
        cor_phaseClass0_V_9[8] <= 1'b0;
        cor_phaseClass0_V_9[9] <= 1'b0;
        cor_phaseClass0_V_9[10] <= 1'b0;
        cor_phaseClass0_V_9[11] <= 1'b0;
        cor_phaseClass0_V_9[12] <= 1'b0;
        cor_phaseClass0_V_9[13] <= 1'b0;
        cor_phaseClass0_V_9[14] <= 1'b0;
        cor_phaseClass0_V_9[15] <= 1'b0;
        cor_phaseClass0_V_9[16] <= 1'b0;
        cor_phaseClass0_V_9[17] <= 1'b0;
        cor_phaseClass0_V_9[18] <= 1'b0;
        cor_phaseClass0_V_9[19] <= 1'b0;
        cor_phaseClass0_V_9[20] <= 1'b0;
        cor_phaseClass0_V_9[21] <= 1'b0;
        cor_phaseClass0_V_9[22] <= 1'b0;
        cor_phaseClass0_V_9[23] <= 1'b0;
        cor_phaseClass0_V_9[24] <= 1'b0;
        cor_phaseClass0_V_9[25] <= 1'b0;
        cor_phaseClass0_V_9[26] <= 1'b0;
        cor_phaseClass0_V_9[27] <= 1'b0;
        cor_phaseClass0_V_9[28] <= 1'b0;
        cor_phaseClass0_V_9[29] <= 1'b0;
        cor_phaseClass0_V_9[30] <= 1'b0;
        cor_phaseClass0_V_9[31] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == cond_i_fu_200_p2))) begin
                        cor_phaseClass0_V_9[31 : 5] <= cor_phaseClass0_V_8[31 : 5];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        currentState <= 1'd0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1) & (1'd0 == currentState_load_load_fu_150_p1) & (1'd1 == start_V_read_read_fu_98_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == 1'b1) & (1'd1 == currentState_load_load_fu_150_p1)))) begin
            currentState <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_data_V_0_ack_out) & (1'b1 == i_data_data_V_0_vld_out))) begin
            i_data_data_V_0_sel_rd <= ~i_data_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_data_V_0_vld_in) & (1'b1 == i_data_data_V_0_ack_in))) begin
            i_data_data_V_0_sel_wr <= ~i_data_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_data_V_0_vld_in) & (1'b1 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd3)) | ((1'b0 == i_data_data_V_0_vld_in) & (i_data_data_V_0_state == 2'd2)))) begin
            i_data_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_data_V_0_vld_in) & (1'b0 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd3)) | ((1'b0 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd1)))) begin
            i_data_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_data_V_0_vld_in) & (i_data_data_V_0_state == 2'd2)) | ((1'b1 == i_data_data_V_0_ack_out) & (i_data_data_V_0_state == 2'd1)) | ((i_data_data_V_0_state == 2'd3) & ~((1'b1 == i_data_data_V_0_vld_in) & (1'b0 == i_data_data_V_0_ack_out)) & ~((1'b0 == i_data_data_V_0_vld_in) & (1'b1 == i_data_data_V_0_ack_out))))) begin
            i_data_data_V_0_state <= 2'd3;
        end else begin
            i_data_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_last_V_0_ack_out) & (1'b1 == i_data_last_V_0_vld_out))) begin
            i_data_last_V_0_sel_rd <= ~i_data_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_last_V_0_vld_in) & (1'b1 == i_data_last_V_0_ack_in))) begin
            i_data_last_V_0_sel_wr <= ~i_data_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_last_V_0_vld_in) & (1'b1 == i_data_last_V_0_ack_out) & (2'd3 == i_data_last_V_0_state)) | ((1'b0 == i_data_last_V_0_vld_in) & (2'd2 == i_data_last_V_0_state)))) begin
            i_data_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_last_V_0_vld_in) & (1'b0 == i_data_last_V_0_ack_out) & (2'd3 == i_data_last_V_0_state)) | ((1'b0 == i_data_last_V_0_ack_out) & (2'd1 == i_data_last_V_0_state)))) begin
            i_data_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_last_V_0_vld_in) & (2'd2 == i_data_last_V_0_state)) | ((1'b1 == i_data_last_V_0_ack_out) & (2'd1 == i_data_last_V_0_state)) | ((2'd3 == i_data_last_V_0_state) & ~((1'b1 == i_data_last_V_0_vld_in) & (1'b0 == i_data_last_V_0_ack_out)) & ~((1'b0 == i_data_last_V_0_vld_in) & (1'b1 == i_data_last_V_0_ack_out))))) begin
            i_data_last_V_0_state <= 2'd3;
        end else begin
            i_data_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        loadCount_V <= 32'd0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
            if ((1'd1 == ap_reg_pp0_iter3_currentState_load_reg_561)) begin
                loadCount_V <= tmp_4_fu_531_p2;
            end else if (((1'd0 == ap_reg_pp0_iter3_currentState_load_reg_561) & (1'd1 == ap_reg_pp0_iter3_start_V_read_reg_557))) begin
                loadCount_V <= 32'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_data_V_1_ack_out) & (1'b1 == o_data_data_V_1_vld_out))) begin
            o_data_data_V_1_sel_rd <= ~o_data_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_data_V_1_vld_in) & (1'b1 == o_data_data_V_1_ack_in))) begin
            o_data_data_V_1_sel_wr <= ~o_data_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_data_V_1_vld_in) & (1'b1 == o_data_data_V_1_ack_out) & (2'd3 == o_data_data_V_1_state)) | ((1'b0 == o_data_data_V_1_vld_in) & (2'd2 == o_data_data_V_1_state)))) begin
            o_data_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_data_V_1_vld_in) & (1'b0 == o_data_data_V_1_ack_out) & (2'd3 == o_data_data_V_1_state)) | ((1'b0 == o_data_data_V_1_ack_out) & (2'd1 == o_data_data_V_1_state)))) begin
            o_data_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_data_V_1_vld_in) & (2'd2 == o_data_data_V_1_state)) | ((1'b1 == o_data_data_V_1_ack_out) & (2'd1 == o_data_data_V_1_state)) | ((2'd3 == o_data_data_V_1_state) & ~((1'b1 == o_data_data_V_1_vld_in) & (1'b0 == o_data_data_V_1_ack_out)) & ~((1'b0 == o_data_data_V_1_vld_in) & (1'b1 == o_data_data_V_1_ack_out))))) begin
            o_data_data_V_1_state <= 2'd3;
        end else begin
            o_data_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_last_V_1_ack_out) & (1'b1 == o_data_last_V_1_vld_out))) begin
            o_data_last_V_1_sel_rd <= ~o_data_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_last_V_1_vld_in) & (1'b1 == o_data_last_V_1_ack_in))) begin
            o_data_last_V_1_sel_wr <= ~o_data_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_last_V_1_vld_in) & (1'b1 == o_data_last_V_1_ack_out) & (2'd3 == o_data_last_V_1_state)) | ((1'b0 == o_data_last_V_1_vld_in) & (2'd2 == o_data_last_V_1_state)))) begin
            o_data_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_last_V_1_vld_in) & (1'b0 == o_data_last_V_1_ack_out) & (2'd3 == o_data_last_V_1_state)) | ((1'b0 == o_data_last_V_1_ack_out) & (2'd1 == o_data_last_V_1_state)))) begin
            o_data_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_last_V_1_vld_in) & (2'd2 == o_data_last_V_1_state)) | ((1'b1 == o_data_last_V_1_ack_out) & (2'd1 == o_data_last_V_1_state)) | ((2'd3 == o_data_last_V_1_state) & ~((1'b1 == o_data_last_V_1_vld_in) & (1'b0 == o_data_last_V_1_ack_out)) & ~((1'b0 == o_data_last_V_1_vld_in) & (1'b1 == o_data_last_V_1_ack_out))))) begin
            o_data_last_V_1_state <= 2'd3;
        end else begin
            o_data_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        phaseClass_V <= 4'd0;
    end else begin
        if ((ap_condition_378 == 1'b1)) begin
            if ((1'd1 == currentState_load_reg_561)) begin
                phaseClass_V <= tmp_6_fu_464_p2;
            end else if (((1'd0 == currentState_load_reg_561) & (1'd1 == start_V_read_reg_557))) begin
                phaseClass_V <= 4'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_378 == 1'b1)) begin
        if (((1'd1 == currentState_load_reg_561) & (1'd0 == cond_i_fu_200_p2))) begin
            ap_phi_precharge_reg_pp0_iter2_p_Val2_2_reg_122 <= 32'd0;
        end else if (((1'd1 == currentState_load_reg_561) & (1'd1 == cond_i_fu_200_p2))) begin
            ap_phi_precharge_reg_pp0_iter2_p_Val2_2_reg_122 <= p_Val2_3_7_i_fu_458_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_precharge_reg_pp0_iter2_p_Val2_2_reg_122 <= ap_phi_precharge_reg_pp0_iter1_p_Val2_2_reg_122;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_378 == 1'b1)) begin
        if (((1'd1 == currentState_load_reg_561) & (1'd0 == cond_i_fu_200_p2))) begin
            ap_phi_precharge_reg_pp0_iter2_p_Val2_3_reg_133 <= 32'd0;
        end else if (((1'd1 == currentState_load_reg_561) & (1'd1 == cond_i_fu_200_p2))) begin
            ap_phi_precharge_reg_pp0_iter2_p_Val2_3_reg_133 <= p_Val2_6_i_fu_402_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_precharge_reg_pp0_iter2_p_Val2_3_reg_133 <= ap_phi_precharge_reg_pp0_iter1_p_Val2_3_reg_133;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_currentState_load_reg_561 <= currentState_load_reg_561;
        ap_reg_pp0_iter1_start_V_read_reg_557 <= start_V_read_reg_557;
        currentState_load_reg_561 <= currentState;
        start_V_read_reg_557 <= start_V;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_currentState_load_reg_561 <= ap_reg_pp0_iter1_currentState_load_reg_561;
        ap_reg_pp0_iter2_i_data_last_V_tmp_reg_565 <= i_data_last_V_tmp_reg_565;
        ap_reg_pp0_iter2_start_V_read_reg_557 <= ap_reg_pp0_iter1_start_V_read_reg_557;
        ap_reg_pp0_iter3_currentState_load_reg_561 <= ap_reg_pp0_iter2_currentState_load_reg_561;
        ap_reg_pp0_iter3_i_data_last_V_tmp_reg_565 <= ap_reg_pp0_iter2_i_data_last_V_tmp_reg_565;
        ap_reg_pp0_iter3_start_V_read_reg_557 <= ap_reg_pp0_iter2_start_V_read_reg_557;
        ap_reg_pp0_iter4_currentState_load_reg_561 <= ap_reg_pp0_iter3_currentState_load_reg_561;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_data_V_0_load_A)) begin
        i_data_data_V_0_payload_A <= i_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_data_V_0_load_B)) begin
        i_data_data_V_0_payload_B <= i_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_last_V_0_load_A)) begin
        i_data_last_V_0_payload_A <= i_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_last_V_0_load_B)) begin
        i_data_last_V_0_payload_B <= i_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_last_V_tmp_reg_565 <= i_data_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_data_V_1_load_A)) begin
        o_data_data_V_1_payload_A <= o_data_data_V_tmp_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_data_V_1_load_B)) begin
        o_data_data_V_1_payload_B <= o_data_data_V_tmp_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_last_V_1_load_A)) begin
        o_data_last_V_1_payload_A <= ap_reg_pp0_iter3_i_data_last_V_tmp_reg_565;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_last_V_1_load_B)) begin
        o_data_last_V_1_payload_B <= ap_reg_pp0_iter3_i_data_last_V_tmp_reg_565;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_currentState_load_reg_561))) begin
        res_V_reg_588 <= {{p_Val2_4_fu_505_p2[41:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_currentState_load_reg_561))) begin
        tmp_1_i_reg_583 <= tmp_1_i_fu_494_p3;
    end
end

always @ (*) begin
    if (((1'b0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd1 == currentState_load_reg_561))) begin
        i_data_TDATA_blk_n = i_data_data_V_0_state[1'd0];
    end else begin
        i_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_data_V_0_ack_out = 1'b1;
    end else begin
        i_data_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_data_V_0_sel)) begin
        i_data_data_V_0_data_out = i_data_data_V_0_payload_B;
    end else begin
        i_data_data_V_0_data_out = i_data_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_data_last_V_0_ack_out = 1'b1;
    end else begin
        i_data_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_last_V_0_sel)) begin
        i_data_last_V_0_data_out = i_data_last_V_0_payload_B;
    end else begin
        i_data_last_V_0_data_out = i_data_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd1 == ap_reg_pp0_iter3_currentState_load_reg_561)) | ((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd1 == ap_reg_pp0_iter4_currentState_load_reg_561)))) begin
        o_data_TDATA_blk_n = o_data_data_V_1_state[1'd1];
    end else begin
        o_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_data_V_1_sel)) begin
        o_data_data_V_1_data_out = o_data_data_V_1_payload_B;
    end else begin
        o_data_data_V_1_data_out = o_data_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd1 == ap_reg_pp0_iter3_currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        o_data_data_V_1_vld_in = 1'b1;
    end else begin
        o_data_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_last_V_1_sel)) begin
        o_data_last_V_1_data_out = o_data_last_V_1_payload_B;
    end else begin
        o_data_last_V_1_data_out = o_data_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd1 == ap_reg_pp0_iter3_currentState_load_reg_561) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        o_data_last_V_1_vld_in = 1'b1;
    end else begin
        o_data_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast_fu_502_p1 = $signed(tmp_1_i_reg_583);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (1'b0 == i_data_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter5) & ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (1'b0 == i_data_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state5_io)) | ((1'b1 == ap_enable_reg_pp0_iter5) & ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in) | (1'b1 == ap_block_state6_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == currentState_load_reg_561) & (1'b0 == i_data_data_V_0_vld_out)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state5_io)) | ((1'b1 == ap_enable_reg_pp0_iter5) & ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in) | (1'b1 == ap_block_state6_io))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((1'd1 == currentState_load_reg_561) & (1'b0 == i_data_data_V_0_vld_out));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((1'd1 == ap_reg_pp0_iter3_currentState_load_reg_561) & (1'b0 == o_data_data_V_1_ack_in));
end

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((1'd1 == ap_reg_pp0_iter4_currentState_load_reg_561) & (1'b0 == o_data_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((1'b0 == o_data_data_V_1_ack_in) | (1'b0 == o_data_last_V_1_ack_in));
end

always @ (*) begin
    ap_condition_378 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_precharge_reg_pp0_iter1_p_Val2_2_reg_122 = 'bx;

assign ap_phi_precharge_reg_pp0_iter1_p_Val2_3_reg_133 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cond_i_fu_200_p2 = ((phaseClass_V == 4'd0) ? 1'b1 : 1'b0);

assign cor_phaseClass0_V_0_1_fu_356_p1 = $signed(cor_phaseClass0_V_0);

assign cor_phaseClass0_V_1_1_fu_342_p1 = $signed(cor_phaseClass0_V_1);

assign currentState_load_load_fu_150_p1 = currentState;

assign extLd2_fu_328_p1 = $signed(cor_phaseClass0_V_2);

assign extLd4_fu_314_p1 = $signed(cor_phaseClass0_V_3);

assign i_data_TREADY = i_data_last_V_0_state[1'd1];

assign i_data_data_V_0_ack_in = i_data_data_V_0_state[1'd1];

assign i_data_data_V_0_load_A = (i_data_data_V_0_state_cmp_full & ~i_data_data_V_0_sel_wr);

assign i_data_data_V_0_load_B = (i_data_data_V_0_sel_wr & i_data_data_V_0_state_cmp_full);

assign i_data_data_V_0_sel = i_data_data_V_0_sel_rd;

assign i_data_data_V_0_state_cmp_full = ((i_data_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_data_V_0_vld_in = i_data_TVALID;

assign i_data_data_V_0_vld_out = i_data_data_V_0_state[1'd0];

assign i_data_last_V_0_ack_in = i_data_last_V_0_state[1'd1];

assign i_data_last_V_0_load_A = (i_data_last_V_0_state_cmp_full & ~i_data_last_V_0_sel_wr);

assign i_data_last_V_0_load_B = (i_data_last_V_0_sel_wr & i_data_last_V_0_state_cmp_full);

assign i_data_last_V_0_sel = i_data_last_V_0_sel_rd;

assign i_data_last_V_0_state_cmp_full = ((i_data_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_last_V_0_vld_in = i_data_TVALID;

assign i_data_last_V_0_vld_out = i_data_last_V_0_state[1'd0];

assign o_data_TDATA = o_data_data_V_1_data_out;

assign o_data_TLAST = o_data_last_V_1_data_out;

assign o_data_TVALID = o_data_last_V_1_state[1'd0];

assign o_data_data_V_1_ack_in = o_data_data_V_1_state[1'd1];

assign o_data_data_V_1_ack_out = o_data_TREADY;

assign o_data_data_V_1_load_A = (o_data_data_V_1_state_cmp_full & ~o_data_data_V_1_sel_wr);

assign o_data_data_V_1_load_B = (o_data_data_V_1_sel_wr & o_data_data_V_1_state_cmp_full);

assign o_data_data_V_1_sel = o_data_data_V_1_sel_rd;

assign o_data_data_V_1_state_cmp_full = ((o_data_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_data_V_1_vld_out = o_data_data_V_1_state[1'd0];

assign o_data_data_V_tmp_fu_548_p3 = ((tmp_7_fu_543_p2[0:0] === 1'b1) ? tmp_4_fu_531_p2 : 32'd0);

assign o_data_last_V_1_ack_in = o_data_last_V_1_state[1'd1];

assign o_data_last_V_1_ack_out = o_data_TREADY;

assign o_data_last_V_1_load_A = (o_data_last_V_1_state_cmp_full & ~o_data_last_V_1_sel_wr);

assign o_data_last_V_1_load_B = (o_data_last_V_1_sel_wr & o_data_last_V_1_state_cmp_full);

assign o_data_last_V_1_sel = o_data_last_V_1_sel_rd;

assign o_data_last_V_1_state_cmp_full = ((o_data_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_last_V_1_vld_out = o_data_last_V_1_state[1'd0];

assign op_V_read_assign_cas_fu_190_p1 = $signed(op_V_read_assign_fu_182_p3);

assign op_V_read_assign_fu_182_p3 = {{p_Val2_1_fu_172_p1}, {5'd0}};

assign p_Val2_1_fu_172_p1 = i_data_data_V_0_data_out[15:0];

assign p_Val2_3_7_i_fu_458_p2 = (tmp5_fu_420_p2 + tmp8_fu_452_p2);

assign p_Val2_4_fu_505_p0 = OP1_V_cast_fu_502_p1;

assign p_Val2_4_fu_505_p1 = OP1_V_cast_fu_502_p1;

assign p_Val2_4_fu_505_p2 = ($signed(p_Val2_4_fu_505_p0) * $signed(p_Val2_4_fu_505_p1));

assign p_Val2_6_i_fu_402_p2 = (tmp_fu_378_p2 + tmp2_fu_396_p2);

assign p_Val2_9_i_fu_488_p2 = (ap_phi_precharge_reg_pp0_iter2_p_Val2_3_reg_133 - ap_phi_precharge_reg_pp0_iter2_p_Val2_2_reg_122);

assign p_Val2_i_fu_482_p2 = (ap_phi_precharge_reg_pp0_iter2_p_Val2_2_reg_122 - ap_phi_precharge_reg_pp0_iter2_p_Val2_3_reg_133);

assign start_V_read_read_fu_98_p2 = start_V;

assign tmp10_cast_fu_448_p1 = $signed(tmp10_fu_442_p2);

assign tmp10_fu_442_p2 = ($signed(cor_phaseClass0_V_1_1_fu_342_p1) + $signed(tmp11_cast_cast_fu_438_p1));

assign tmp11_cast_cast_fu_438_p1 = $signed(tmp11_fu_432_p2);

assign tmp11_fu_432_p2 = ($signed(op_V_read_assign_cas_fu_190_p1) + $signed(cor_phaseClass0_V_0_1_fu_356_p1));

assign tmp1_fu_372_p2 = (cor_phaseClass0_V_8 + cor_phaseClass0_V_13);

assign tmp2_fu_396_p2 = (tmp3_fu_384_p2 + tmp4_fu_390_p2);

assign tmp3_fu_384_p2 = (cor_phaseClass0_V_6 + cor_phaseClass0_V_7);

assign tmp4_fu_390_p2 = ($signed(extLd2_fu_328_p1) + $signed(cor_phaseClass0_V_5));

assign tmp5_fu_420_p2 = (tmp6_fu_408_p2 + tmp7_fu_414_p2);

assign tmp6_fu_408_p2 = (cor_phaseClass0_V_14 + cor_phaseClass0_V_11);

assign tmp7_fu_414_p2 = (cor_phaseClass0_V_9 + cor_phaseClass0_V_10);

assign tmp8_fu_452_p2 = ($signed(tmp9_fu_426_p2) + $signed(tmp10_cast_fu_448_p1));

assign tmp9_fu_426_p2 = ($signed(extLd4_fu_314_p1) + $signed(cor_phaseClass0_V_4));

assign tmp_1_i_fu_494_p3 = ((tmp_i_fu_476_p2[0:0] === 1'b1) ? p_Val2_9_i_fu_488_p2 : p_Val2_i_fu_482_p2);

assign tmp_4_fu_531_p2 = (loadCount_V + 32'd1);

assign tmp_6_fu_464_p2 = (phaseClass_V + 4'd1);

assign tmp_7_fu_543_p2 = (($signed(res_V_reg_588) > $signed(32'd29696000)) ? 1'b1 : 1'b0);

assign tmp_fu_378_p2 = (cor_phaseClass0_V_12 + tmp1_fu_372_p2);

assign tmp_i_fu_476_p2 = (($signed(ap_phi_precharge_reg_pp0_iter2_p_Val2_3_reg_133) > $signed(ap_phi_precharge_reg_pp0_iter2_p_Val2_2_reg_122)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    cor_phaseClass0_V_14[4:0] <= 5'b00000;
    cor_phaseClass0_V_13[4:0] <= 5'b00000;
    cor_phaseClass0_V_12[4:0] <= 5'b00000;
    cor_phaseClass0_V_11[4:0] <= 5'b00000;
    cor_phaseClass0_V_10[4:0] <= 5'b00000;
    cor_phaseClass0_V_9[4:0] <= 5'b00000;
    cor_phaseClass0_V_8[4:0] <= 5'b00000;
    cor_phaseClass0_V_7[4:0] <= 5'b00000;
    cor_phaseClass0_V_6[4:0] <= 5'b00000;
    cor_phaseClass0_V_5[4:0] <= 5'b00000;
    cor_phaseClass0_V_4[4:0] <= 5'b00000;
    cor_phaseClass0_V_3[4:0] <= 5'b00000;
    cor_phaseClass0_V_2[4:0] <= 5'b00000;
    cor_phaseClass0_V_1[4:0] <= 5'b00000;
    cor_phaseClass0_V_0[4:0] <= 5'b00000;
end

endmodule //correlateTop
