// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="correlateTop,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.846000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=45,HLS_SYN_LUT=141}" *)

module correlateTop (
        ap_clk,
        ap_rst_n,
        i_data_data_V_TDATA,
        i_data_data_V_TVALID,
        i_data_data_V_TREADY,
        i_data_last_V_TLAST,
        i_data_last_V_TVALID,
        i_data_last_V_TREADY,
        o_data_data_V_TDATA,
        o_data_data_V_TVALID,
        o_data_data_V_TREADY,
        o_data_last_V_TLAST,
        o_data_last_V_TVALID,
        o_data_last_V_TREADY,
        start_V,
        phaseClass_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] i_data_data_V_TDATA;
input   i_data_data_V_TVALID;
output   i_data_data_V_TREADY;
input  [0:0] i_data_last_V_TLAST;
input   i_data_last_V_TVALID;
output   i_data_last_V_TREADY;
input  [31:0] o_data_data_V_TDATA;
input   o_data_data_V_TVALID;
output   o_data_data_V_TREADY;
input  [0:0] o_data_last_V_TLAST;
input   o_data_last_V_TVALID;
output   o_data_last_V_TREADY;
input  [0:0] start_V;
input  [3:0] phaseClass_V;

reg    ap_rst_n_inv;
wire    i_data_data_V_0_vld_in;
wire    i_data_data_V_0_vld_out;
reg    i_data_data_V_0_ack_out;
reg   [1:0] i_data_data_V_0_state;
wire    i_data_last_V_0_vld_in;
wire    i_data_last_V_0_ack_out;
reg   [1:0] i_data_last_V_0_state;
wire    o_data_data_V_0_vld_in;
wire    o_data_data_V_0_ack_out;
reg   [1:0] o_data_data_V_0_state;
wire    o_data_last_V_0_vld_in;
wire    o_data_last_V_0_ack_out;
reg   [1:0] o_data_last_V_0_state;
reg   [0:0] currentState;
reg   [31:0] loadCount_V;
reg    i_data_data_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire   [0:0] start_V_read_read_fu_76_p2;
reg   [0:0] start_V_read_reg_212;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] currentState_load_load_fu_94_p1;
reg   [0:0] currentState_load_reg_216;
reg    ap_block_pp0_stage0_subdone;
wire   [31:0] tmp_2_fu_124_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_311;

// power-on initialization
initial begin
#0 i_data_data_V_0_state = 2'd0;
#0 i_data_last_V_0_state = 2'd0;
#0 o_data_data_V_0_state = 2'd0;
#0 o_data_last_V_0_state = 2'd0;
#0 currentState = 1'd0;
#0 loadCount_V = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        currentState <= 1'd0;
    end else begin
        if ((((start_V_read_read_fu_76_p2 == 1'd1) & (currentState_load_load_fu_94_p1 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((currentState_load_load_fu_94_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            currentState <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_data_V_0_state <= 2'd0;
    end else begin
        if ((((i_data_data_V_0_vld_in == 1'b0) & (i_data_data_V_0_state == 2'd2)) | ((i_data_data_V_0_vld_in == 1'b0) & (i_data_data_V_0_state == 2'd3) & (i_data_data_V_0_ack_out == 1'b1)))) begin
            i_data_data_V_0_state <= 2'd2;
        end else if ((((i_data_data_V_0_ack_out == 1'b0) & (i_data_data_V_0_state == 2'd1)) | ((i_data_data_V_0_ack_out == 1'b0) & (i_data_data_V_0_state == 2'd3) & (i_data_data_V_0_vld_in == 1'b1)))) begin
            i_data_data_V_0_state <= 2'd1;
        end else if (((~((i_data_data_V_0_vld_in == 1'b0) & (i_data_data_V_0_ack_out == 1'b1)) & ~((i_data_data_V_0_ack_out == 1'b0) & (i_data_data_V_0_vld_in == 1'b1)) & (i_data_data_V_0_state == 2'd3)) | ((i_data_data_V_0_state == 2'd1) & (i_data_data_V_0_ack_out == 1'b1)) | ((i_data_data_V_0_state == 2'd2) & (i_data_data_V_0_vld_in == 1'b1)))) begin
            i_data_data_V_0_state <= 2'd3;
        end else begin
            i_data_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_last_V_0_state <= 2'd0;
    end else begin
        if ((((i_data_last_V_0_state == 2'd2) & (i_data_last_V_0_vld_in == 1'b0)) | ((i_data_last_V_0_state == 2'd3) & (i_data_last_V_0_vld_in == 1'b0) & (i_data_last_V_0_ack_out == 1'b1)))) begin
            i_data_last_V_0_state <= 2'd2;
        end else if ((((i_data_last_V_0_state == 2'd3) & (i_data_last_V_0_ack_out == 1'b0) & (i_data_last_V_0_vld_in == 1'b1)) | ((i_data_last_V_0_state == 2'd1) & (i_data_last_V_0_ack_out == 1'b0)))) begin
            i_data_last_V_0_state <= 2'd1;
        end else if ((((i_data_last_V_0_state == 2'd2) & (i_data_last_V_0_vld_in == 1'b1)) | (~((i_data_last_V_0_vld_in == 1'b0) & (i_data_last_V_0_ack_out == 1'b1)) & ~((i_data_last_V_0_ack_out == 1'b0) & (i_data_last_V_0_vld_in == 1'b1)) & (i_data_last_V_0_state == 2'd3)) | ((i_data_last_V_0_state == 2'd1) & (i_data_last_V_0_ack_out == 1'b1)))) begin
            i_data_last_V_0_state <= 2'd3;
        end else begin
            i_data_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        loadCount_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_condition_311)) begin
            if ((currentState_load_reg_216 == 1'd1)) begin
                loadCount_V <= tmp_2_fu_124_p2;
            end else if (((start_V_read_reg_212 == 1'd1) & (currentState_load_reg_216 == 1'd0))) begin
                loadCount_V <= 32'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_data_V_0_state <= 2'd0;
    end else begin
        if ((((o_data_data_V_0_state == 2'd2) & (o_data_data_V_0_vld_in == 1'b0)) | ((o_data_data_V_0_state == 2'd3) & (o_data_data_V_0_vld_in == 1'b0) & (o_data_data_V_0_ack_out == 1'b1)))) begin
            o_data_data_V_0_state <= 2'd2;
        end else if ((((o_data_data_V_0_state == 2'd1) & (o_data_data_V_0_ack_out == 1'b0)) | ((o_data_data_V_0_state == 2'd3) & (o_data_data_V_0_ack_out == 1'b0) & (o_data_data_V_0_vld_in == 1'b1)))) begin
            o_data_data_V_0_state <= 2'd1;
        end else if (((~((o_data_data_V_0_vld_in == 1'b0) & (o_data_data_V_0_ack_out == 1'b1)) & ~((o_data_data_V_0_ack_out == 1'b0) & (o_data_data_V_0_vld_in == 1'b1)) & (o_data_data_V_0_state == 2'd3)) | ((o_data_data_V_0_state == 2'd1) & (o_data_data_V_0_ack_out == 1'b1)) | ((o_data_data_V_0_state == 2'd2) & (o_data_data_V_0_vld_in == 1'b1)))) begin
            o_data_data_V_0_state <= 2'd3;
        end else begin
            o_data_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_last_V_0_state <= 2'd0;
    end else begin
        if ((((o_data_last_V_0_state == 2'd2) & (o_data_last_V_0_vld_in == 1'b0)) | ((o_data_last_V_0_state == 2'd3) & (o_data_last_V_0_vld_in == 1'b0) & (o_data_last_V_0_ack_out == 1'b1)))) begin
            o_data_last_V_0_state <= 2'd2;
        end else if ((((o_data_last_V_0_state == 2'd1) & (o_data_last_V_0_ack_out == 1'b0)) | ((o_data_last_V_0_state == 2'd3) & (o_data_last_V_0_ack_out == 1'b0) & (o_data_last_V_0_vld_in == 1'b1)))) begin
            o_data_last_V_0_state <= 2'd1;
        end else if (((~((o_data_last_V_0_vld_in == 1'b0) & (o_data_last_V_0_ack_out == 1'b1)) & ~((o_data_last_V_0_ack_out == 1'b0) & (o_data_last_V_0_vld_in == 1'b1)) & (o_data_last_V_0_state == 2'd3)) | ((o_data_last_V_0_state == 2'd1) & (o_data_last_V_0_ack_out == 1'b1)) | ((o_data_last_V_0_state == 2'd2) & (o_data_last_V_0_vld_in == 1'b1)))) begin
            o_data_last_V_0_state <= 2'd3;
        end else begin
            o_data_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        currentState_load_reg_216 <= currentState;
        start_V_read_reg_212 <= start_V;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_data_data_V_0_ack_out = 1'b1;
    end else begin
        i_data_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_data_data_V_TDATA_blk_n = i_data_data_V_0_state[1'd0];
    end else begin
        i_data_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((i_data_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((i_data_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (i_data_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_condition_311 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign currentState_load_load_fu_94_p1 = currentState;

assign i_data_data_V_0_vld_in = i_data_data_V_TVALID;

assign i_data_data_V_0_vld_out = i_data_data_V_0_state[1'd0];

assign i_data_data_V_TREADY = i_data_data_V_0_state[1'd1];

assign i_data_last_V_0_ack_out = 1'b0;

assign i_data_last_V_0_vld_in = i_data_last_V_TVALID;

assign i_data_last_V_TREADY = i_data_last_V_0_state[1'd1];

assign o_data_data_V_0_ack_out = 1'b0;

assign o_data_data_V_0_vld_in = o_data_data_V_TVALID;

assign o_data_data_V_TREADY = o_data_data_V_0_state[1'd1];

assign o_data_last_V_0_ack_out = 1'b0;

assign o_data_last_V_0_vld_in = o_data_last_V_TVALID;

assign o_data_last_V_TREADY = o_data_last_V_0_state[1'd1];

assign start_V_read_read_fu_76_p2 = start_V;

assign tmp_2_fu_124_p2 = (32'd1 + loadCount_V);

endmodule //correlateTop
