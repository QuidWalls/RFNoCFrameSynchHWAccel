// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ItoZero.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ItoZero::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ItoZero::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> ItoZero::ap_ST_fsm_pp0_stage0 = "1";
const bool ItoZero::ap_const_boolean_1 = true;
const sc_lv<1> ItoZero::ap_const_lv1_0 = "0";
const sc_lv<1> ItoZero::ap_const_lv1_1 = "1";
const sc_lv<2> ItoZero::ap_const_lv2_0 = "00";
const sc_lv<2> ItoZero::ap_const_lv2_2 = "10";
const sc_lv<2> ItoZero::ap_const_lv2_3 = "11";
const sc_lv<2> ItoZero::ap_const_lv2_1 = "1";
const sc_lv<32> ItoZero::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ItoZero::ap_const_boolean_0 = false;
const sc_lv<16> ItoZero::ap_const_lv16_0 = "0000000000000000";

ItoZero::ItoZero(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00001001);
    sensitive << ( i_data_V_data_V_0_vld_out );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( currentState_load_reg_110 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);
    sensitive << ( i_data_V_data_V_0_vld_out );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( currentState_load_reg_110 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);
    sensitive << ( i_data_V_data_V_0_vld_out );
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( currentState_load_reg_110 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( currentState_load_reg_110 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( i_data_V_data_V_0_vld_out );
    sensitive << ( currentState_load_reg_110 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( ap_reg_pp0_iter1_currentState_load_reg_110 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( o_data_V_data_V_1_ack_in );
    sensitive << ( o_data_V_last_V_1_ack_in );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_reset_idle_pp0);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_currentState_load_load_fu_74_p1);
    sensitive << ( currentState );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );

    SC_METHOD(thread_i_data_TDATA_blk_n);
    sensitive << ( i_data_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( currentState_load_reg_110 );

    SC_METHOD(thread_i_data_TREADY);
    sensitive << ( i_data_V_last_V_0_state );

    SC_METHOD(thread_i_data_V_data_V_0_ack_in);
    sensitive << ( i_data_V_data_V_0_state );

    SC_METHOD(thread_i_data_V_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( currentState_load_reg_110 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_i_data_V_data_V_0_data_out);
    sensitive << ( i_data_V_data_V_0_payload_A );
    sensitive << ( i_data_V_data_V_0_payload_B );
    sensitive << ( i_data_V_data_V_0_sel );

    SC_METHOD(thread_i_data_V_data_V_0_load_A);
    sensitive << ( i_data_V_data_V_0_sel_wr );
    sensitive << ( i_data_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_i_data_V_data_V_0_load_B);
    sensitive << ( i_data_V_data_V_0_sel_wr );
    sensitive << ( i_data_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_i_data_V_data_V_0_sel);
    sensitive << ( i_data_V_data_V_0_sel_rd );

    SC_METHOD(thread_i_data_V_data_V_0_state_cmp_full);
    sensitive << ( i_data_V_data_V_0_state );

    SC_METHOD(thread_i_data_V_data_V_0_vld_in);
    sensitive << ( i_data_TVALID );

    SC_METHOD(thread_i_data_V_data_V_0_vld_out);
    sensitive << ( i_data_V_data_V_0_state );

    SC_METHOD(thread_i_data_V_last_V_0_ack_in);
    sensitive << ( i_data_V_last_V_0_state );

    SC_METHOD(thread_i_data_V_last_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( currentState_load_reg_110 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_i_data_V_last_V_0_data_out);
    sensitive << ( i_data_V_last_V_0_payload_A );
    sensitive << ( i_data_V_last_V_0_payload_B );
    sensitive << ( i_data_V_last_V_0_sel );

    SC_METHOD(thread_i_data_V_last_V_0_load_A);
    sensitive << ( i_data_V_last_V_0_sel_wr );
    sensitive << ( i_data_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_i_data_V_last_V_0_load_B);
    sensitive << ( i_data_V_last_V_0_sel_wr );
    sensitive << ( i_data_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_i_data_V_last_V_0_sel);
    sensitive << ( i_data_V_last_V_0_sel_rd );

    SC_METHOD(thread_i_data_V_last_V_0_state_cmp_full);
    sensitive << ( i_data_V_last_V_0_state );

    SC_METHOD(thread_i_data_V_last_V_0_vld_in);
    sensitive << ( i_data_TVALID );

    SC_METHOD(thread_i_data_V_last_V_0_vld_out);
    sensitive << ( i_data_V_last_V_0_state );

    SC_METHOD(thread_o_data_TDATA);
    sensitive << ( o_data_V_data_V_1_data_out );

    SC_METHOD(thread_o_data_TDATA_blk_n);
    sensitive << ( o_data_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( currentState_load_reg_110 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_currentState_load_reg_110 );

    SC_METHOD(thread_o_data_TLAST);
    sensitive << ( o_data_V_last_V_1_data_out );

    SC_METHOD(thread_o_data_TVALID);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_o_data_V_data_V_1_ack_in);
    sensitive << ( o_data_V_data_V_1_state );

    SC_METHOD(thread_o_data_V_data_V_1_ack_out);
    sensitive << ( o_data_TREADY );

    SC_METHOD(thread_o_data_V_data_V_1_data_out);
    sensitive << ( o_data_V_data_V_1_payload_A );
    sensitive << ( o_data_V_data_V_1_payload_B );
    sensitive << ( o_data_V_data_V_1_sel );

    SC_METHOD(thread_o_data_V_data_V_1_load_A);
    sensitive << ( o_data_V_data_V_1_sel_wr );
    sensitive << ( o_data_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_data_V_1_load_B);
    sensitive << ( o_data_V_data_V_1_sel_wr );
    sensitive << ( o_data_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_data_V_1_sel);
    sensitive << ( o_data_V_data_V_1_sel_rd );

    SC_METHOD(thread_o_data_V_data_V_1_state_cmp_full);
    sensitive << ( o_data_V_data_V_1_state );

    SC_METHOD(thread_o_data_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( currentState_load_reg_110 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_o_data_V_data_V_1_vld_out);
    sensitive << ( o_data_V_data_V_1_state );

    SC_METHOD(thread_o_data_V_last_V_1_ack_in);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_o_data_V_last_V_1_ack_out);
    sensitive << ( o_data_TREADY );

    SC_METHOD(thread_o_data_V_last_V_1_data_out);
    sensitive << ( o_data_V_last_V_1_payload_A );
    sensitive << ( o_data_V_last_V_1_payload_B );
    sensitive << ( o_data_V_last_V_1_sel );

    SC_METHOD(thread_o_data_V_last_V_1_load_A);
    sensitive << ( o_data_V_last_V_1_sel_wr );
    sensitive << ( o_data_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_last_V_1_load_B);
    sensitive << ( o_data_V_last_V_1_sel_wr );
    sensitive << ( o_data_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_o_data_V_last_V_1_sel);
    sensitive << ( o_data_V_last_V_1_sel_rd );

    SC_METHOD(thread_o_data_V_last_V_1_state_cmp_full);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_o_data_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( currentState_load_reg_110 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_o_data_V_last_V_1_vld_out);
    sensitive << ( o_data_V_last_V_1_state );

    SC_METHOD(thread_p_Result_s_fu_97_p3);
    sensitive << ( tmp_fu_93_p1 );

    SC_METHOD(thread_start_V_read_read_fu_50_p2);
    sensitive << ( start_V );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_tmp_fu_93_p1);
    sensitive << ( i_data_V_data_V_0_data_out );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    i_data_V_data_V_0_sel_rd = SC_LOGIC_0;
    i_data_V_data_V_0_sel_wr = SC_LOGIC_0;
    i_data_V_data_V_0_state = "00";
    i_data_V_last_V_0_sel_rd = SC_LOGIC_0;
    i_data_V_last_V_0_sel_wr = SC_LOGIC_0;
    i_data_V_last_V_0_state = "00";
    o_data_V_data_V_1_sel_rd = SC_LOGIC_0;
    o_data_V_data_V_1_sel_wr = SC_LOGIC_0;
    o_data_V_data_V_1_state = "00";
    o_data_V_last_V_1_sel_rd = SC_LOGIC_0;
    o_data_V_last_V_1_sel_wr = SC_LOGIC_0;
    o_data_V_last_V_1_state = "00";
    currentState = "0";
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ItoZero_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, i_data_TDATA, "(port)i_data_TDATA");
    sc_trace(mVcdFile, i_data_TVALID, "(port)i_data_TVALID");
    sc_trace(mVcdFile, i_data_TREADY, "(port)i_data_TREADY");
    sc_trace(mVcdFile, i_data_TLAST, "(port)i_data_TLAST");
    sc_trace(mVcdFile, o_data_TDATA, "(port)o_data_TDATA");
    sc_trace(mVcdFile, o_data_TVALID, "(port)o_data_TVALID");
    sc_trace(mVcdFile, o_data_TREADY, "(port)o_data_TREADY");
    sc_trace(mVcdFile, o_data_TLAST, "(port)o_data_TLAST");
    sc_trace(mVcdFile, start_V, "(port)start_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, i_data_V_data_V_0_data_out, "i_data_V_data_V_0_data_out");
    sc_trace(mVcdFile, i_data_V_data_V_0_vld_in, "i_data_V_data_V_0_vld_in");
    sc_trace(mVcdFile, i_data_V_data_V_0_vld_out, "i_data_V_data_V_0_vld_out");
    sc_trace(mVcdFile, i_data_V_data_V_0_ack_in, "i_data_V_data_V_0_ack_in");
    sc_trace(mVcdFile, i_data_V_data_V_0_ack_out, "i_data_V_data_V_0_ack_out");
    sc_trace(mVcdFile, i_data_V_data_V_0_payload_A, "i_data_V_data_V_0_payload_A");
    sc_trace(mVcdFile, i_data_V_data_V_0_payload_B, "i_data_V_data_V_0_payload_B");
    sc_trace(mVcdFile, i_data_V_data_V_0_sel_rd, "i_data_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, i_data_V_data_V_0_sel_wr, "i_data_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, i_data_V_data_V_0_sel, "i_data_V_data_V_0_sel");
    sc_trace(mVcdFile, i_data_V_data_V_0_load_A, "i_data_V_data_V_0_load_A");
    sc_trace(mVcdFile, i_data_V_data_V_0_load_B, "i_data_V_data_V_0_load_B");
    sc_trace(mVcdFile, i_data_V_data_V_0_state, "i_data_V_data_V_0_state");
    sc_trace(mVcdFile, i_data_V_data_V_0_state_cmp_full, "i_data_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, i_data_V_last_V_0_data_out, "i_data_V_last_V_0_data_out");
    sc_trace(mVcdFile, i_data_V_last_V_0_vld_in, "i_data_V_last_V_0_vld_in");
    sc_trace(mVcdFile, i_data_V_last_V_0_vld_out, "i_data_V_last_V_0_vld_out");
    sc_trace(mVcdFile, i_data_V_last_V_0_ack_in, "i_data_V_last_V_0_ack_in");
    sc_trace(mVcdFile, i_data_V_last_V_0_ack_out, "i_data_V_last_V_0_ack_out");
    sc_trace(mVcdFile, i_data_V_last_V_0_payload_A, "i_data_V_last_V_0_payload_A");
    sc_trace(mVcdFile, i_data_V_last_V_0_payload_B, "i_data_V_last_V_0_payload_B");
    sc_trace(mVcdFile, i_data_V_last_V_0_sel_rd, "i_data_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, i_data_V_last_V_0_sel_wr, "i_data_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, i_data_V_last_V_0_sel, "i_data_V_last_V_0_sel");
    sc_trace(mVcdFile, i_data_V_last_V_0_load_A, "i_data_V_last_V_0_load_A");
    sc_trace(mVcdFile, i_data_V_last_V_0_load_B, "i_data_V_last_V_0_load_B");
    sc_trace(mVcdFile, i_data_V_last_V_0_state, "i_data_V_last_V_0_state");
    sc_trace(mVcdFile, i_data_V_last_V_0_state_cmp_full, "i_data_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, o_data_V_data_V_1_data_out, "o_data_V_data_V_1_data_out");
    sc_trace(mVcdFile, o_data_V_data_V_1_vld_in, "o_data_V_data_V_1_vld_in");
    sc_trace(mVcdFile, o_data_V_data_V_1_vld_out, "o_data_V_data_V_1_vld_out");
    sc_trace(mVcdFile, o_data_V_data_V_1_ack_in, "o_data_V_data_V_1_ack_in");
    sc_trace(mVcdFile, o_data_V_data_V_1_ack_out, "o_data_V_data_V_1_ack_out");
    sc_trace(mVcdFile, o_data_V_data_V_1_payload_A, "o_data_V_data_V_1_payload_A");
    sc_trace(mVcdFile, o_data_V_data_V_1_payload_B, "o_data_V_data_V_1_payload_B");
    sc_trace(mVcdFile, o_data_V_data_V_1_sel_rd, "o_data_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, o_data_V_data_V_1_sel_wr, "o_data_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, o_data_V_data_V_1_sel, "o_data_V_data_V_1_sel");
    sc_trace(mVcdFile, o_data_V_data_V_1_load_A, "o_data_V_data_V_1_load_A");
    sc_trace(mVcdFile, o_data_V_data_V_1_load_B, "o_data_V_data_V_1_load_B");
    sc_trace(mVcdFile, o_data_V_data_V_1_state, "o_data_V_data_V_1_state");
    sc_trace(mVcdFile, o_data_V_data_V_1_state_cmp_full, "o_data_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, o_data_V_last_V_1_data_out, "o_data_V_last_V_1_data_out");
    sc_trace(mVcdFile, o_data_V_last_V_1_vld_in, "o_data_V_last_V_1_vld_in");
    sc_trace(mVcdFile, o_data_V_last_V_1_vld_out, "o_data_V_last_V_1_vld_out");
    sc_trace(mVcdFile, o_data_V_last_V_1_ack_in, "o_data_V_last_V_1_ack_in");
    sc_trace(mVcdFile, o_data_V_last_V_1_ack_out, "o_data_V_last_V_1_ack_out");
    sc_trace(mVcdFile, o_data_V_last_V_1_payload_A, "o_data_V_last_V_1_payload_A");
    sc_trace(mVcdFile, o_data_V_last_V_1_payload_B, "o_data_V_last_V_1_payload_B");
    sc_trace(mVcdFile, o_data_V_last_V_1_sel_rd, "o_data_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, o_data_V_last_V_1_sel_wr, "o_data_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, o_data_V_last_V_1_sel, "o_data_V_last_V_1_sel");
    sc_trace(mVcdFile, o_data_V_last_V_1_load_A, "o_data_V_last_V_1_load_A");
    sc_trace(mVcdFile, o_data_V_last_V_1_load_B, "o_data_V_last_V_1_load_B");
    sc_trace(mVcdFile, o_data_V_last_V_1_state, "o_data_V_last_V_1_state");
    sc_trace(mVcdFile, o_data_V_last_V_1_state_cmp_full, "o_data_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, currentState, "currentState");
    sc_trace(mVcdFile, i_data_TDATA_blk_n, "i_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, currentState_load_reg_110, "currentState_load_reg_110");
    sc_trace(mVcdFile, o_data_TDATA_blk_n, "o_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_currentState_load_reg_110, "ap_reg_pp0_iter1_currentState_load_reg_110");
    sc_trace(mVcdFile, start_V_read_read_fu_50_p2, "start_V_read_read_fu_50_p2");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, currentState_load_load_fu_74_p1, "currentState_load_load_fu_74_p1");
    sc_trace(mVcdFile, p_Result_s_fu_97_p3, "p_Result_s_fu_97_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00001001, "ap_block_pp0_stage0_flag00001001");
    sc_trace(mVcdFile, tmp_fu_93_p1, "tmp_fu_93_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("ItoZero.hdltvin.dat");
    mHdltvoutHandle.open("ItoZero.hdltvout.dat");
}

ItoZero::~ItoZero() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ItoZero::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        currentState = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, currentState_load_load_fu_74_p1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, start_V_read_read_fu_50_p2.read()))) {
            currentState = ap_const_lv1_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        i_data_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_vld_out.read()))) {
            i_data_V_data_V_0_sel_rd =  (sc_logic) (~i_data_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        i_data_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_ack_in.read()))) {
            i_data_V_data_V_0_sel_wr =  (sc_logic) (~i_data_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        i_data_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(i_data_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(i_data_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            i_data_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(i_data_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(i_data_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            i_data_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(i_data_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(i_data_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(i_data_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_ack_out.read()))))) {
            i_data_V_data_V_0_state = ap_const_lv2_3;
        } else {
            i_data_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        i_data_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_vld_out.read()))) {
            i_data_V_last_V_0_sel_rd =  (sc_logic) (~i_data_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        i_data_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_ack_in.read()))) {
            i_data_V_last_V_0_sel_wr =  (sc_logic) (~i_data_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        i_data_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, i_data_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, i_data_V_last_V_0_state.read())))) {
            i_data_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, i_data_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, i_data_V_last_V_0_state.read())))) {
            i_data_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, i_data_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, i_data_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, i_data_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_ack_out.read()))))) {
            i_data_V_last_V_0_state = ap_const_lv2_3;
        } else {
            i_data_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_out.read()))) {
            o_data_V_data_V_1_sel_rd =  (sc_logic) (~o_data_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_in.read()))) {
            o_data_V_data_V_1_sel_wr =  (sc_logic) (~o_data_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, o_data_V_data_V_1_state.read())))) {
            o_data_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_V_data_V_1_state.read())))) {
            o_data_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, o_data_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_ack_out.read()))))) {
            o_data_V_data_V_1_state = ap_const_lv2_3;
        } else {
            o_data_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_out.read()))) {
            o_data_V_last_V_1_sel_rd =  (sc_logic) (~o_data_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_in.read()))) {
            o_data_V_last_V_1_sel_wr =  (sc_logic) (~o_data_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        o_data_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, o_data_V_last_V_1_state.read())))) {
            o_data_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_V_last_V_1_state.read())))) {
            o_data_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, o_data_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, o_data_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, o_data_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_ack_out.read()))))) {
            o_data_V_last_V_1_state = ap_const_lv2_3;
        } else {
            o_data_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_currentState_load_reg_110 = currentState_load_reg_110.read();
        currentState_load_reg_110 = currentState.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_load_A.read())) {
        i_data_V_data_V_0_payload_A = i_data_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_load_B.read())) {
        i_data_V_data_V_0_payload_B = i_data_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_load_A.read())) {
        i_data_V_last_V_0_payload_A = i_data_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_load_B.read())) {
        i_data_V_last_V_0_payload_B = i_data_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_load_A.read())) {
        o_data_V_data_V_1_payload_A = p_Result_s_fu_97_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_load_B.read())) {
        o_data_V_data_V_1_payload_B = p_Result_s_fu_97_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_load_A.read())) {
        o_data_V_last_V_1_payload_A = i_data_V_last_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_load_B.read())) {
        o_data_V_last_V_1_payload_B = i_data_V_last_V_0_data_out.read();
    }
}

void ItoZero::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void ItoZero::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ItoZero::thread_ap_block_pp0_stage0_flag00001001() {
    ap_block_pp0_stage0_flag00001001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()))));
}

void ItoZero::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_vld_out.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))));
}

void ItoZero::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_vld_out.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))));
}

void ItoZero::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ItoZero::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()));
}

void ItoZero::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()) && esl_seteq<1,1,1>(ap_const_logic_0, i_data_V_data_V_0_vld_out.read()));
}

void ItoZero::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_currentState_load_reg_110.read()) && esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()));
}

void ItoZero::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, o_data_V_last_V_1_ack_in.read()));
}

void ItoZero::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void ItoZero::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void ItoZero::thread_ap_reset_idle_pp0() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void ItoZero::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ItoZero::thread_currentState_load_load_fu_74_p1() {
    currentState_load_load_fu_74_p1 = currentState.read();
}

void ItoZero::thread_i_data_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()))) {
        i_data_TDATA_blk_n = i_data_V_data_V_0_state.read()[0];
    } else {
        i_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void ItoZero::thread_i_data_TREADY() {
    i_data_TREADY = i_data_V_last_V_0_state.read()[1];
}

void ItoZero::thread_i_data_V_data_V_0_ack_in() {
    i_data_V_data_V_0_ack_in = i_data_V_data_V_0_state.read()[1];
}

void ItoZero::thread_i_data_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        i_data_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        i_data_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void ItoZero::thread_i_data_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_data_V_0_sel.read())) {
        i_data_V_data_V_0_data_out = i_data_V_data_V_0_payload_B.read();
    } else {
        i_data_V_data_V_0_data_out = i_data_V_data_V_0_payload_A.read();
    }
}

void ItoZero::thread_i_data_V_data_V_0_load_A() {
    i_data_V_data_V_0_load_A = (i_data_V_data_V_0_state_cmp_full.read() & ~i_data_V_data_V_0_sel_wr.read());
}

void ItoZero::thread_i_data_V_data_V_0_load_B() {
    i_data_V_data_V_0_load_B = (i_data_V_data_V_0_sel_wr.read() & i_data_V_data_V_0_state_cmp_full.read());
}

void ItoZero::thread_i_data_V_data_V_0_sel() {
    i_data_V_data_V_0_sel = i_data_V_data_V_0_sel_rd.read();
}

void ItoZero::thread_i_data_V_data_V_0_state_cmp_full() {
    i_data_V_data_V_0_state_cmp_full =  (sc_logic) ((!i_data_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(i_data_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void ItoZero::thread_i_data_V_data_V_0_vld_in() {
    i_data_V_data_V_0_vld_in = i_data_TVALID.read();
}

void ItoZero::thread_i_data_V_data_V_0_vld_out() {
    i_data_V_data_V_0_vld_out = i_data_V_data_V_0_state.read()[0];
}

void ItoZero::thread_i_data_V_last_V_0_ack_in() {
    i_data_V_last_V_0_ack_in = i_data_V_last_V_0_state.read()[1];
}

void ItoZero::thread_i_data_V_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        i_data_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        i_data_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void ItoZero::thread_i_data_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, i_data_V_last_V_0_sel.read())) {
        i_data_V_last_V_0_data_out = i_data_V_last_V_0_payload_B.read();
    } else {
        i_data_V_last_V_0_data_out = i_data_V_last_V_0_payload_A.read();
    }
}

void ItoZero::thread_i_data_V_last_V_0_load_A() {
    i_data_V_last_V_0_load_A = (i_data_V_last_V_0_state_cmp_full.read() & ~i_data_V_last_V_0_sel_wr.read());
}

void ItoZero::thread_i_data_V_last_V_0_load_B() {
    i_data_V_last_V_0_load_B = (i_data_V_last_V_0_sel_wr.read() & i_data_V_last_V_0_state_cmp_full.read());
}

void ItoZero::thread_i_data_V_last_V_0_sel() {
    i_data_V_last_V_0_sel = i_data_V_last_V_0_sel_rd.read();
}

void ItoZero::thread_i_data_V_last_V_0_state_cmp_full() {
    i_data_V_last_V_0_state_cmp_full =  (sc_logic) ((!i_data_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(i_data_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void ItoZero::thread_i_data_V_last_V_0_vld_in() {
    i_data_V_last_V_0_vld_in = i_data_TVALID.read();
}

void ItoZero::thread_i_data_V_last_V_0_vld_out() {
    i_data_V_last_V_0_vld_out = i_data_V_last_V_0_state.read()[0];
}

void ItoZero::thread_o_data_TDATA() {
    o_data_TDATA = o_data_V_data_V_1_data_out.read();
}

void ItoZero::thread_o_data_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter1_currentState_load_reg_110.read())))) {
        o_data_TDATA_blk_n = o_data_V_data_V_1_state.read()[1];
    } else {
        o_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void ItoZero::thread_o_data_TLAST() {
    o_data_TLAST = o_data_V_last_V_1_data_out.read();
}

void ItoZero::thread_o_data_TVALID() {
    o_data_TVALID = o_data_V_last_V_1_state.read()[0];
}

void ItoZero::thread_o_data_V_data_V_1_ack_in() {
    o_data_V_data_V_1_ack_in = o_data_V_data_V_1_state.read()[1];
}

void ItoZero::thread_o_data_V_data_V_1_ack_out() {
    o_data_V_data_V_1_ack_out = o_data_TREADY.read();
}

void ItoZero::thread_o_data_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_data_V_1_sel.read())) {
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_B.read();
    } else {
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_A.read();
    }
}

void ItoZero::thread_o_data_V_data_V_1_load_A() {
    o_data_V_data_V_1_load_A = (o_data_V_data_V_1_state_cmp_full.read() & ~o_data_V_data_V_1_sel_wr.read());
}

void ItoZero::thread_o_data_V_data_V_1_load_B() {
    o_data_V_data_V_1_load_B = (o_data_V_data_V_1_sel_wr.read() & o_data_V_data_V_1_state_cmp_full.read());
}

void ItoZero::thread_o_data_V_data_V_1_sel() {
    o_data_V_data_V_1_sel = o_data_V_data_V_1_sel_rd.read();
}

void ItoZero::thread_o_data_V_data_V_1_state_cmp_full() {
    o_data_V_data_V_1_state_cmp_full =  (sc_logic) ((!o_data_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(o_data_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void ItoZero::thread_o_data_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        o_data_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        o_data_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void ItoZero::thread_o_data_V_data_V_1_vld_out() {
    o_data_V_data_V_1_vld_out = o_data_V_data_V_1_state.read()[0];
}

void ItoZero::thread_o_data_V_last_V_1_ack_in() {
    o_data_V_last_V_1_ack_in = o_data_V_last_V_1_state.read()[1];
}

void ItoZero::thread_o_data_V_last_V_1_ack_out() {
    o_data_V_last_V_1_ack_out = o_data_TREADY.read();
}

void ItoZero::thread_o_data_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, o_data_V_last_V_1_sel.read())) {
        o_data_V_last_V_1_data_out = o_data_V_last_V_1_payload_B.read();
    } else {
        o_data_V_last_V_1_data_out = o_data_V_last_V_1_payload_A.read();
    }
}

void ItoZero::thread_o_data_V_last_V_1_load_A() {
    o_data_V_last_V_1_load_A = (o_data_V_last_V_1_state_cmp_full.read() & ~o_data_V_last_V_1_sel_wr.read());
}

void ItoZero::thread_o_data_V_last_V_1_load_B() {
    o_data_V_last_V_1_load_B = (o_data_V_last_V_1_sel_wr.read() & o_data_V_last_V_1_state_cmp_full.read());
}

void ItoZero::thread_o_data_V_last_V_1_sel() {
    o_data_V_last_V_1_sel = o_data_V_last_V_1_sel_rd.read();
}

void ItoZero::thread_o_data_V_last_V_1_state_cmp_full() {
    o_data_V_last_V_1_state_cmp_full =  (sc_logic) ((!o_data_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(o_data_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void ItoZero::thread_o_data_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, currentState_load_reg_110.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        o_data_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        o_data_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void ItoZero::thread_o_data_V_last_V_1_vld_out() {
    o_data_V_last_V_1_vld_out = o_data_V_last_V_1_state.read()[0];
}

void ItoZero::thread_p_Result_s_fu_97_p3() {
    p_Result_s_fu_97_p3 = esl_concat<16,16>(ap_const_lv16_0, tmp_fu_93_p1.read());
}

void ItoZero::thread_start_V_read_read_fu_50_p2() {
    start_V_read_read_fu_50_p2 = start_V.read();
}

void ItoZero::thread_tmp_fu_93_p1() {
    tmp_fu_93_p1 = i_data_V_data_V_0_data_out.read().range(16-1, 0);
}

void ItoZero::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void ItoZero::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_TDATA\" :  \"" << i_data_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_TVALID\" :  \"" << i_data_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"i_data_TREADY\" :  \"" << i_data_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_data_TLAST\" :  \"" << i_data_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_TDATA\" :  \"" << o_data_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_TVALID\" :  \"" << o_data_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"o_data_TREADY\" :  \"" << o_data_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"o_data_TLAST\" :  \"" << o_data_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"start_V\" :  \"" << start_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

